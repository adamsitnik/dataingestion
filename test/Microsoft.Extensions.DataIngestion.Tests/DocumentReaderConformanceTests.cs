// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Xunit;

namespace Microsoft.Extensions.DataIngestion.Tests;

public abstract class DocumentReaderConformanceTests
{
    protected abstract DocumentReader CreateDocumentReader(bool extractImages = false);

    public static IEnumerable<object[]> Sources
    {
        get
        {
            yield return new object[] { "https://winprotocoldocs-bhdugrdyduf5h2e4.b02.azurefd.net/MS-NRBF/%5bMS-NRBF%5d-190313.pdf" }; // PDF file
            yield return new object[] { "https://winprotocoldocs-bhdugrdyduf5h2e4.b02.azurefd.net/MS-NRBF/%5bMS-NRBF%5d-190313.docx" }; // DOCX file
            yield return new object[] { "https://www.bondcap.com/report/pdf/Trends_Artificial_Intelligence.pdf" }; // PDF file (presentation)
        }
    }

    protected virtual void SimpleAsserts(Document document, string source, string expectedId)
    {
        Assert.NotNull(document);
        Assert.Equal(expectedId, document.Identifier);
        Assert.NotEmpty(document.Sections);
        Assert.NotEmpty(document.Markdown);

        var elements = document.ToArray();
        Assert.Contains(elements, element => element is DocumentHeader);
        Assert.Contains(elements, element => element is DocumentParagraph);
        Assert.Contains(elements, element => element is DocumentTable);
        Assert.All(elements.Where(element => element is not DocumentImage), element => Assert.NotEmpty(element.Markdown));
    }

    [Theory]
    [MemberData(nameof(Sources))]
    public virtual async Task SupportsUris(string uri)
    {
        var reader = CreateDocumentReader();
        var document = await reader.ReadAsync(new Uri(uri));

        SimpleAsserts(document, uri, uri);
    }

    public static IEnumerable<object[]> Files
    {
        get
        {
            // One page document with a table, header, and footer and few paragraph.
            // Generated by Copilot from Microsoft Word.
            yield return new object[] { Path.Combine("TestFiles", "Sample.pdf") };
            yield return new object[] { Path.Combine("TestFiles", "Sample.docx") };
        }
    }

    [Theory]
    [MemberData(nameof(Files))]
    public virtual async Task SupportsFiles(string filePath)
    {
        var reader = CreateDocumentReader();
        var document = await reader.ReadAsync(filePath);

        SimpleAsserts(document, filePath, filePath);
    }

    public static IEnumerable<object[]> Images
    {
        get
        {
            // One page document with an Image generated by Microsoft Copilot.
            yield return new object[] { Path.Combine("TestFiles", "SampleWithImage.pdf") };
        }
    }

    [Theory]
    [MemberData(nameof(Images))]
    public virtual async Task SupportsImages(string filePath)
    {
        var reader = CreateDocumentReader(extractImages: true);
        var document = await reader.ReadAsync(filePath);

        SimpleAsserts(document, filePath, filePath);
        var elements = document.ToArray();
        Assert.Contains(elements, element => element is DocumentImage img && img.Content is not null && !string.IsNullOrEmpty(img.MediaType));
    }

    [Fact]
    public async Task ThrowsWhenIdentifierIsNotProvided()
    {
        var reader = CreateDocumentReader();

        await Assert.ThrowsAsync<ArgumentNullException>(async () => await reader.ReadAsync(new Uri("https://www.microsoft.com/"), identifier: null!));
        await Assert.ThrowsAsync<ArgumentNullException>(async () => await reader.ReadAsync(new Uri("https://www.microsoft.com/"), identifier: string.Empty));
        await Assert.ThrowsAsync<ArgumentNullException>(async () => await reader.ReadAsync("fileName.txt", identifier: null!));
        await Assert.ThrowsAsync<ArgumentNullException>(async () => await reader.ReadAsync("fileName.txt", identifier: string.Empty));
    }

    [Fact]
    public async Task ThrowsIfCancellationRequestedUrl()
    {
        var reader = CreateDocumentReader();
        using CancellationTokenSource cts = new();
        cts.Cancel();

        await Assert.ThrowsAsync<TaskCanceledException>(async () => await reader.ReadAsync(new Uri("https://www.microsoft.com/"), cts.Token));
    }

    [Fact]
    public async Task ThrowsIfCancellationRequested()
    {
        string filePath = Path.Combine(Path.GetTempPath(), Path.GetTempFileName() + ".txt");
        await File.WriteAllTextAsync(filePath, "This is a test file for cancellation token.");

        var reader = CreateDocumentReader();
        using CancellationTokenSource cts = new();
        cts.Cancel();

        try
        {
            await Assert.ThrowsAsync<TaskCanceledException>(async () => await reader.ReadAsync(filePath, cts.Token)); // File path
        }
        finally
        {
            File.Delete(filePath);
        }
    }
}
