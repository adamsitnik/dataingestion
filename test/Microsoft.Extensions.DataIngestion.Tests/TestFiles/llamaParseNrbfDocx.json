{
  "pages": [
    {
      "page": 1,
      "text": "[MS-NRBF]:\n\n.NET Remoting: Binary Format Data Structure\n\n\nIntellectual Property Rights Notice for Open Specifications Documentation\n§     Technical Documentation. Microsoft publishes Open Specifications documentation (“this\n      documentation”) for protocols, file formats, data portability, computer languages, and standards\n      support. Additionally, overview documents cover inter-protocol relationships and interactions.\n§     Copyrights. This documentation is covered by Microsoft copyrights. Regardless of any other\n      terms that are contained in the terms of use for the Microsoft website that hosts this\n      documentation, you can make copies of it in order to develop implementations of the technologies\n      that are described in this documentation and can distribute portions of it in your implementations\n      that use these technologies or in your documentation as necessary to properly document the\n      implementation. You can also distribute in your implementation, with or without modification, any\n      schemas, IDLs, or code samples that are included in the documentation. This permission also\n      applies to any documents that are referenced in the Open Specifications documentation.\n§     No Trade Secrets. Microsoft does not claim any trade secret rights in this documentation.\n§     Patents. Microsoft has patents that might cover your implementations of the technologies\n      described in the Open Specifications documentation. Neither this notice nor Microsoft's delivery of\n      this documentation grants any licenses under those patents or any other Microsoft patents.\n      However, a given Open Specifications document might be covered by the Microsoft Open\n      Specifications Promise or the Microsoft Community Promise. If you would prefer a written license,\n      or if the technologies described in this documentation are not covered by the Open Specifications\n      Promise or Community Promise, as applicable, patent licenses are available by contacting\n      iplg@microsoft.com.\n§     License Programs. To see all of the protocols in scope under a specific license program and the\n      associated patents, visit the Patent Map.\n§     Trademarks. The names of companies and products contained in this documentation might be\n      covered by trademarks or similar intellectual property rights. This notice does not grant any\n      licenses under those rights. For a list of Microsoft trademarks, visit\n      www.microsoft.com/trademarks.\n§     Fictitious Names. The example companies, organizations, products, domain names, email\n      addresses, logos, people, places, and events that are depicted in this documentation are fictitious.\n      No association with any real company, organization, product, domain name, email address, logo,\n      person, place, or event is intended or should be inferred.\n\nReservation of Rights. All other rights are reserved, and this notice does not grant any rights other\nthan as specifically described above, whether by implication, estoppel, or otherwise.\n\nTools. The Open Specifications documentation does not require the use of Microsoft programming\ntools or programming environments in order for you to develop an implementation. If you have access\nto Microsoft programming tools and environments, you are free to take advantage of them. Certain\nOpen Specifications documents are intended for use in conjunction with publicly available standards\nspecifications and network programming art and, as such, assume that the reader either is familiar\nwith the aforementioned material or has immediate access to it.\n\nSupport. For questions and support, please contact dochelp@microsoft.com.\n\n                                                                                                    1 / 55\n[MS-NRBF] - v20190313\n.NET Remoting: Binary Format Data Structure\nCopyright © 2019 Microsoft Corporation\nRelease: March 13, 2019",
      "md": "\n# .NET Remoting: Binary Format Data Structure\n\nIntellectual Property Rights Notice for Open Specifications Documentation\n\n- Technical Documentation. Microsoft publishes Open Specifications documentation (“this documentation”) for protocols, file formats, data portability, computer languages, and standards support. Additionally, overview documents cover inter-protocol relationships and interactions.\n- Copyrights. This documentation is covered by Microsoft copyrights. Regardless of any other terms that are contained in the terms of use for the Microsoft website that hosts this documentation, you can make copies of it in order to develop implementations of the technologies that are described in this documentation and can distribute portions of it in your implementations that use these technologies or in your documentation as necessary to properly document the implementation. You can also distribute in your implementation, with or without modification, any schemas, IDLs, or code samples that are included in the documentation. This permission also applies to any documents that are referenced in the Open Specifications documentation.\n- No Trade Secrets. Microsoft does not claim any trade secret rights in this documentation.\n- Patents. Microsoft has patents that might cover your implementations of the technologies described in the Open Specifications documentation. Neither this notice nor Microsoft's delivery of this documentation grants any licenses under those patents or any other Microsoft patents. However, a given Open Specifications document might be covered by the Microsoft Open Specifications Promise or the Microsoft Community Promise. If you would prefer a written license, or if the technologies described in this documentation are not covered by the Open Specifications Promise or Community Promise, as applicable, patent licenses are available by contacting iplg@microsoft.com.\n- License Programs. To see all of the protocols in scope under a specific license program and the associated patents, visit the Patent Map.\n- Trademarks. The names of companies and products contained in this documentation might be covered by trademarks or similar intellectual property rights. This notice does not grant any licenses under those rights. For a list of Microsoft trademarks, visit www.microsoft.com/trademarks.\n- Fictitious Names. The example companies, organizations, products, domain names, email addresses, logos, people, places, and events that are depicted in this documentation are fictitious. No association with any real company, organization, product, domain name, email address, logo, person, place, or event is intended or should be inferred.\n\nReservation of Rights. All other rights are reserved, and this notice does not grant any rights other than as specifically described above, whether by implication, estoppel, or otherwise.\n\nTools. The Open Specifications documentation does not require the use of Microsoft programming tools or programming environments in order for you to develop an implementation. If you have access to Microsoft programming tools and environments, you are free to take advantage of them. Certain Open Specifications documents are intended for use in conjunction with publicly available standards specifications and network programming art and, as such, assume that the reader either is familiar with the aforementioned material or has immediate access to it.\n\nSupport. For questions and support, please contact dochelp@microsoft.com.\n\n1 / 55\n\n[MS-NRBF] - v20190313\n\nCopyright © 2019 Microsoft Corporation\n\nRelease: March 13, 2019\n\n",
      "images": [
      ],
      "charts": [
      ],
      "items": [
        {
          "type": "heading",
          "lvl": 1,
          "value": ".NET Remoting: Binary Format Data Structure",
          "md": "# .NET Remoting: Binary Format Data Structure",
          "bBox": {
            "x": 72.1,
            "y": 92.9,
            "w": 361.75,
            "h": 639.45
          }
        },
        {
          "type": "text",
          "value": "Intellectual Property Rights Notice for Open Specifications Documentation\n\n- Technical Documentation. Microsoft publishes Open Specifications documentation (“this documentation”) for protocols, file formats, data portability, computer languages, and standards support. Additionally, overview documents cover inter-protocol relationships and interactions.\n- Copyrights. This documentation is covered by Microsoft copyrights. Regardless of any other terms that are contained in the terms of use for the Microsoft website that hosts this documentation, you can make copies of it in order to develop implementations of the technologies that are described in this documentation and can distribute portions of it in your implementations that use these technologies or in your documentation as necessary to properly document the implementation. You can also distribute in your implementation, with or without modification, any schemas, IDLs, or code samples that are included in the documentation. This permission also applies to any documents that are referenced in the Open Specifications documentation.\n- No Trade Secrets. Microsoft does not claim any trade secret rights in this documentation.\n- Patents. Microsoft has patents that might cover your implementations of the technologies described in the Open Specifications documentation. Neither this notice nor Microsoft's delivery of this documentation grants any licenses under those patents or any other Microsoft patents. However, a given Open Specifications document might be covered by the Microsoft Open Specifications Promise or the Microsoft Community Promise. If you would prefer a written license, or if the technologies described in this documentation are not covered by the Open Specifications Promise or Community Promise, as applicable, patent licenses are available by contacting iplg@microsoft.com.\n- License Programs. To see all of the protocols in scope under a specific license program and the associated patents, visit the Patent Map.\n- Trademarks. The names of companies and products contained in this documentation might be covered by trademarks or similar intellectual property rights. This notice does not grant any licenses under those rights. For a list of Microsoft trademarks, visit www.microsoft.com/trademarks.\n- Fictitious Names. The example companies, organizations, products, domain names, email addresses, logos, people, places, and events that are depicted in this documentation are fictitious. No association with any real company, organization, product, domain name, email address, logo, person, place, or event is intended or should be inferred.\n\nReservation of Rights. All other rights are reserved, and this notice does not grant any rights other than as specifically described above, whether by implication, estoppel, or otherwise.\n\nTools. The Open Specifications documentation does not require the use of Microsoft programming tools or programming environments in order for you to develop an implementation. If you have access to Microsoft programming tools and environments, you are free to take advantage of them. Certain Open Specifications documents are intended for use in conjunction with publicly available standards specifications and network programming art and, as such, assume that the reader either is familiar with the aforementioned material or has immediate access to it.\n\nSupport. For questions and support, please contact dochelp@microsoft.com.\n\n1 / 55\n\n[MS-NRBF] - v20190313\n\nCopyright © 2019 Microsoft Corporation\n\nRelease: March 13, 2019",
          "md": "Intellectual Property Rights Notice for Open Specifications Documentation\n\n- Technical Documentation. Microsoft publishes Open Specifications documentation (“this documentation”) for protocols, file formats, data portability, computer languages, and standards support. Additionally, overview documents cover inter-protocol relationships and interactions.\n- Copyrights. This documentation is covered by Microsoft copyrights. Regardless of any other terms that are contained in the terms of use for the Microsoft website that hosts this documentation, you can make copies of it in order to develop implementations of the technologies that are described in this documentation and can distribute portions of it in your implementations that use these technologies or in your documentation as necessary to properly document the implementation. You can also distribute in your implementation, with or without modification, any schemas, IDLs, or code samples that are included in the documentation. This permission also applies to any documents that are referenced in the Open Specifications documentation.\n- No Trade Secrets. Microsoft does not claim any trade secret rights in this documentation.\n- Patents. Microsoft has patents that might cover your implementations of the technologies described in the Open Specifications documentation. Neither this notice nor Microsoft's delivery of this documentation grants any licenses under those patents or any other Microsoft patents. However, a given Open Specifications document might be covered by the Microsoft Open Specifications Promise or the Microsoft Community Promise. If you would prefer a written license, or if the technologies described in this documentation are not covered by the Open Specifications Promise or Community Promise, as applicable, patent licenses are available by contacting iplg@microsoft.com.\n- License Programs. To see all of the protocols in scope under a specific license program and the associated patents, visit the Patent Map.\n- Trademarks. The names of companies and products contained in this documentation might be covered by trademarks or similar intellectual property rights. This notice does not grant any licenses under those rights. For a list of Microsoft trademarks, visit www.microsoft.com/trademarks.\n- Fictitious Names. The example companies, organizations, products, domain names, email addresses, logos, people, places, and events that are depicted in this documentation are fictitious. No association with any real company, organization, product, domain name, email address, logo, person, place, or event is intended or should be inferred.\n\nReservation of Rights. All other rights are reserved, and this notice does not grant any rights other than as specifically described above, whether by implication, estoppel, or otherwise.\n\nTools. The Open Specifications documentation does not require the use of Microsoft programming tools or programming environments in order for you to develop an implementation. If you have access to Microsoft programming tools and environments, you are free to take advantage of them. Certain Open Specifications documents are intended for use in conjunction with publicly available standards specifications and network programming art and, as such, assume that the reader either is familiar with the aforementioned material or has immediate access to it.\n\nSupport. For questions and support, please contact dochelp@microsoft.com.\n\n1 / 55\n\n[MS-NRBF] - v20190313\n\nCopyright © 2019 Microsoft Corporation\n\nRelease: March 13, 2019",
          "bBox": {
            "x": 72.1,
            "y": 150.3,
            "w": 467.9,
            "h": 603.85
          }
        }
      ],
      "status": "OK",
      "originalOrientationAngle": 0,
      "links": [
        {
          "url": "mailto:dochelp@microsoft.com",
          "unsafeUrl": "mailto:dochelp@microsoft.com",
          "text": "dochelp@microsoft.com ."
        },
        {
          "url": "https://www.microsoft.com/trademarks",
          "unsafeUrl": "https://www.microsoft.com/trademarks",
          "text": "www.microsoft.com/trademarks ."
        },
        {
          "url": "https://msdn.microsoft.com/en-us/openspecifications/dn750984",
          "unsafeUrl": "https://msdn.microsoft.com/en-us/openspecifications/dn750984",
          "text": "Patent  Map ."
        },
        {
          "url": "mailto:iplg@microsoft.com",
          "unsafeUrl": "mailto:iplg@microsoft.com",
          "text": "iplg@microsoft.com ."
        },
        {
          "url": "https://go.microsoft.com/fwlink/?LinkId=214448",
          "unsafeUrl": "https://go.microsoft.com/fwlink/?LinkId=214448",
          "text": "Microsoft  Community  Promise . "
        },
        {
          "url": "https://go.microsoft.com/fwlink/?LinkId=214445",
          "unsafeUrl": "https://go.microsoft.com/fwlink/?LinkId=214445",
          "text": "Specifications  Promise"
        },
        {
          "url": "https://go.microsoft.com/fwlink/?LinkId=214445",
          "unsafeUrl": "https://go.microsoft.com/fwlink/?LinkId=214445",
          "text": "Open"
        }
      ],
      "width": 612,
      "height": 792,
      "triggeredAutoMode": false,
      "parsingMode": "accurate",
      "structuredData": null,
      "noStructuredContent": false,
      "noTextContent": false,
      "pageHeaderMarkdown": "\n# .NET Remoting: Binary Format Data Structure\n\n",
      "pageFooterMarkdown": "\n1 / 55\n\n[MS-NRBF] - v20190313\n\nCopyright © 2019 Microsoft Corporation\n\nRelease: March 13, 2019\n\n",
      "confidence": 0.985
    },
    {
      "page": 2,
      "text": "Revision Summary\n\n                Revision     Revision\n Date           History      Class         Comments\n\n 7/20/2007      0.1          Major         MCPP Milestone 5 Initial Availability\n\n 9/28/2007      1.0          Major         Updated and revised the technical content.\n\n 10/23/2007     1.1          Minor         Clarified the meaning of the technical content.\n\n 11/30/2007     1.1.1        Editorial     Changed language and formatting in the technical content.\n\n 1/25/2008      1.1.2        Editorial     Changed language and formatting in the technical content.\n\n 3/14/2008      1.1.3        Editorial     Changed language and formatting in the technical content.\n\n 5/16/2008      1.1.4        Editorial     Changed language and formatting in the technical content.\n\n 6/20/2008      2.0          Major         Updated and revised the technical content.\n\n 7/25/2008      3.0          Major         Updated and revised the technical content.\n\n 8/29/2008      3.0.1        Editorial     Changed language and formatting in the technical content.\n\n 10/24/2008     4.0          Major         Updated and revised the technical content.\n\n 12/5/2008      4.1          Minor         Clarified the meaning of the technical content.\n\n 1/16/2009      5.0          Major         Updated and revised the technical content.\n\n 2/27/2009      5.1          Minor         Clarified the meaning of the technical content.\n\n 4/10/2009      5.1.1        Editorial     Changed language and formatting in the technical content.\n\n 5/22/2009      5.1.2        Editorial     Changed language and formatting in the technical content.\n\n 7/2/2009       5.1.3        Editorial     Changed language and formatting in the technical content.\n\n 8/14/2009      5.2          Minor         Clarified the meaning of the technical content.\n\n 9/25/2009      5.3          Minor         Clarified the meaning of the technical content.\n\n 11/6/2009      5.3.1        Editorial     Changed language and formatting in the technical content.\n\n 12/18/2009     5.4          Minor         Clarified the meaning of the technical content.\n\n 1/29/2010      5.5          Minor         Clarified the meaning of the technical content.\n\n 3/12/2010      6.0          Major         Updated and revised the technical content.\n\n 4/23/2010      7.0          Major         Updated and revised the technical content.\n\n 6/4/2010       7.0.1        Editorial     Changed language and formatting in the technical content.\n\n 7/16/2010      8.0          Major         Updated and revised the technical content.\n\n 8/27/2010      8.0          None          No changes to the meaning, language, or formatting of the\n                                           technical content.\n\n                                                                                          2 / 55\n\n[MS-NRBF] - v20190313\n.NET Remoting: Binary Format Data Structure\nCopyright © 2019 Microsoft Corporation\nRelease: March 13, 2019",
      "md": "# Revision Summary\n\n| Revision Date | Revision History | Revision Class | Comments                                                                     |\n| ------------- | ---------------- | -------------- | ---------------------------------------------------------------------------- |\n| 7/20/2007     | 0.1              | Major          | MCPP Milestone 5 Initial Availability                                        |\n| 9/28/2007     | 1.0              | Major          | Updated and revised the technical content.                                   |\n| 10/23/2007    | 1.1              | Minor          | Clarified the meaning of the technical content.                              |\n| 11/30/2007    | 1.1.1            | Editorial      | Changed language and formatting in the technical content.                    |\n| 1/25/2008     | 1.1.2            | Editorial      | Changed language and formatting in the technical content.                    |\n| 3/14/2008     | 1.1.3            | Editorial      | Changed language and formatting in the technical content.                    |\n| 5/16/2008     | 1.1.4            | Editorial      | Changed language and formatting in the technical content.                    |\n| 6/20/2008     | 2.0              | Major          | Updated and revised the technical content.                                   |\n| 7/25/2008     | 3.0              | Major          | Updated and revised the technical content.                                   |\n| 8/29/2008     | 3.0.1            | Editorial      | Changed language and formatting in the technical content.                    |\n| 10/24/2008    | 4.0              | Major          | Updated and revised the technical content.                                   |\n| 12/5/2008     | 4.1              | Minor          | Clarified the meaning of the technical content.                              |\n| 1/16/2009     | 5.0              | Major          | Updated and revised the technical content.                                   |\n| 2/27/2009     | 5.1              | Minor          | Clarified the meaning of the technical content.                              |\n| 4/10/2009     | 5.1.1            | Editorial      | Changed language and formatting in the technical content.                    |\n| 5/22/2009     | 5.1.2            | Editorial      | Changed language and formatting in the technical content.                    |\n| 7/2/2009      | 5.1.3            | Editorial      | Changed language and formatting in the technical content.                    |\n| 8/14/2009     | 5.2              | Minor          | Clarified the meaning of the technical content.                              |\n| 9/25/2009     | 5.3              | Minor          | Clarified the meaning of the technical content.                              |\n| 11/6/2009     | 5.3.1            | Editorial      | Changed language and formatting in the technical content.                    |\n| 12/18/2009    | 5.4              | Minor          | Clarified the meaning of the technical content.                              |\n| 1/29/2010     | 5.5              | Minor          | Clarified the meaning of the technical content.                              |\n| 3/12/2010     | 6.0              | Major          | Updated and revised the technical content.                                   |\n| 4/23/2010     | 7.0              | Major          | Updated and revised the technical content.                                   |\n| 6/4/2010      | 7.0.1            | Editorial      | Changed language and formatting in the technical content.                    |\n| 7/16/2010     | 8.0              | Major          | Updated and revised the technical content.                                   |\n| 8/27/2010     | 8.0              | None           | No changes to the meaning, language, or formatting of the technical content. |\n\n2 / 55\n\n[MS-NRBF] - v20190313\n\n.NET Remoting: Binary Format Data Structure\n\nCopyright © 2019 Microsoft Corporation\n\nRelease: March 13, 2019",
      "images": [
      ],
      "charts": [
      ],
      "items": [
        {
          "type": "heading",
          "lvl": 1,
          "value": "Revision Summary",
          "md": "# Revision Summary",
          "bBox": {
            "x": 72.1,
            "y": 58.4,
            "w": 180.55,
            "h": 36.6
          }
        },
        {
          "type": "table",
          "rows": [
            [
              "Revision Date",
              "Revision History",
              "Revision Class",
              "Comments"
            ],
            [
              "7/20/2007",
              "0.1",
              "Major",
              "MCPP Milestone 5 Initial Availability"
            ],
            [
              "9/28/2007",
              "1.0",
              "Major",
              "Updated and revised the technical content."
            ],
            [
              "10/23/2007",
              "1.1",
              "Minor",
              "Clarified the meaning of the technical content."
            ],
            [
              "11/30/2007",
              "1.1.1",
              "Editorial",
              "Changed language and formatting in the technical content."
            ],
            [
              "1/25/2008",
              "1.1.2",
              "Editorial",
              "Changed language and formatting in the technical content."
            ],
            [
              "3/14/2008",
              "1.1.3",
              "Editorial",
              "Changed language and formatting in the technical content."
            ],
            [
              "5/16/2008",
              "1.1.4",
              "Editorial",
              "Changed language and formatting in the technical content."
            ],
            [
              "6/20/2008",
              "2.0",
              "Major",
              "Updated and revised the technical content."
            ],
            [
              "7/25/2008",
              "3.0",
              "Major",
              "Updated and revised the technical content."
            ],
            [
              "8/29/2008",
              "3.0.1",
              "Editorial",
              "Changed language and formatting in the technical content."
            ],
            [
              "10/24/2008",
              "4.0",
              "Major",
              "Updated and revised the technical content."
            ],
            [
              "12/5/2008",
              "4.1",
              "Minor",
              "Clarified the meaning of the technical content."
            ],
            [
              "1/16/2009",
              "5.0",
              "Major",
              "Updated and revised the technical content."
            ],
            [
              "2/27/2009",
              "5.1",
              "Minor",
              "Clarified the meaning of the technical content."
            ],
            [
              "4/10/2009",
              "5.1.1",
              "Editorial",
              "Changed language and formatting in the technical content."
            ],
            [
              "5/22/2009",
              "5.1.2",
              "Editorial",
              "Changed language and formatting in the technical content."
            ],
            [
              "7/2/2009",
              "5.1.3",
              "Editorial",
              "Changed language and formatting in the technical content."
            ],
            [
              "8/14/2009",
              "5.2",
              "Minor",
              "Clarified the meaning of the technical content."
            ],
            [
              "9/25/2009",
              "5.3",
              "Minor",
              "Clarified the meaning of the technical content."
            ],
            [
              "11/6/2009",
              "5.3.1",
              "Editorial",
              "Changed language and formatting in the technical content."
            ],
            [
              "12/18/2009",
              "5.4",
              "Minor",
              "Clarified the meaning of the technical content."
            ],
            [
              "1/29/2010",
              "5.5",
              "Minor",
              "Clarified the meaning of the technical content."
            ],
            [
              "3/12/2010",
              "6.0",
              "Major",
              "Updated and revised the technical content."
            ],
            [
              "4/23/2010",
              "7.0",
              "Major",
              "Updated and revised the technical content."
            ],
            [
              "6/4/2010",
              "7.0.1",
              "Editorial",
              "Changed language and formatting in the technical content."
            ],
            [
              "7/16/2010",
              "8.0",
              "Major",
              "Updated and revised the technical content."
            ],
            [
              "8/27/2010",
              "8.0",
              "None",
              "No changes to the meaning, language, or formatting of the technical content."
            ]
          ],
          "md": "| Revision Date | Revision History | Revision Class | Comments                                                                     |\n| ------------- | ---------------- | -------------- | ---------------------------------------------------------------------------- |\n| 7/20/2007     | 0.1              | Major          | MCPP Milestone 5 Initial Availability                                        |\n| 9/28/2007     | 1.0              | Major          | Updated and revised the technical content.                                   |\n| 10/23/2007    | 1.1              | Minor          | Clarified the meaning of the technical content.                              |\n| 11/30/2007    | 1.1.1            | Editorial      | Changed language and formatting in the technical content.                    |\n| 1/25/2008     | 1.1.2            | Editorial      | Changed language and formatting in the technical content.                    |\n| 3/14/2008     | 1.1.3            | Editorial      | Changed language and formatting in the technical content.                    |\n| 5/16/2008     | 1.1.4            | Editorial      | Changed language and formatting in the technical content.                    |\n| 6/20/2008     | 2.0              | Major          | Updated and revised the technical content.                                   |\n| 7/25/2008     | 3.0              | Major          | Updated and revised the technical content.                                   |\n| 8/29/2008     | 3.0.1            | Editorial      | Changed language and formatting in the technical content.                    |\n| 10/24/2008    | 4.0              | Major          | Updated and revised the technical content.                                   |\n| 12/5/2008     | 4.1              | Minor          | Clarified the meaning of the technical content.                              |\n| 1/16/2009     | 5.0              | Major          | Updated and revised the technical content.                                   |\n| 2/27/2009     | 5.1              | Minor          | Clarified the meaning of the technical content.                              |\n| 4/10/2009     | 5.1.1            | Editorial      | Changed language and formatting in the technical content.                    |\n| 5/22/2009     | 5.1.2            | Editorial      | Changed language and formatting in the technical content.                    |\n| 7/2/2009      | 5.1.3            | Editorial      | Changed language and formatting in the technical content.                    |\n| 8/14/2009     | 5.2              | Minor          | Clarified the meaning of the technical content.                              |\n| 9/25/2009     | 5.3              | Minor          | Clarified the meaning of the technical content.                              |\n| 11/6/2009     | 5.3.1            | Editorial      | Changed language and formatting in the technical content.                    |\n| 12/18/2009    | 5.4              | Minor          | Clarified the meaning of the technical content.                              |\n| 1/29/2010     | 5.5              | Minor          | Clarified the meaning of the technical content.                              |\n| 3/12/2010     | 6.0              | Major          | Updated and revised the technical content.                                   |\n| 4/23/2010     | 7.0              | Major          | Updated and revised the technical content.                                   |\n| 6/4/2010      | 7.0.1            | Editorial      | Changed language and formatting in the technical content.                    |\n| 7/16/2010     | 8.0              | Major          | Updated and revised the technical content.                                   |\n| 8/27/2010     | 8.0              | None           | No changes to the meaning, language, or formatting of the technical content. |",
          "isPerfectTable": true,
          "csv": "\"Revision Date\",\"Revision History\",\"Revision Class\",\"Comments\"\n\"7/20/2007\",\"0.1\",\"Major\",\"MCPP Milestone 5 Initial Availability\"\n\"9/28/2007\",\"1.0\",\"Major\",\"Updated and revised the technical content.\"\n\"10/23/2007\",\"1.1\",\"Minor\",\"Clarified the meaning of the technical content.\"\n\"11/30/2007\",\"1.1.1\",\"Editorial\",\"Changed language and formatting in the technical content.\"\n\"1/25/2008\",\"1.1.2\",\"Editorial\",\"Changed language and formatting in the technical content.\"\n\"3/14/2008\",\"1.1.3\",\"Editorial\",\"Changed language and formatting in the technical content.\"\n\"5/16/2008\",\"1.1.4\",\"Editorial\",\"Changed language and formatting in the technical content.\"\n\"6/20/2008\",\"2.0\",\"Major\",\"Updated and revised the technical content.\"\n\"7/25/2008\",\"3.0\",\"Major\",\"Updated and revised the technical content.\"\n\"8/29/2008\",\"3.0.1\",\"Editorial\",\"Changed language and formatting in the technical content.\"\n\"10/24/2008\",\"4.0\",\"Major\",\"Updated and revised the technical content.\"\n\"12/5/2008\",\"4.1\",\"Minor\",\"Clarified the meaning of the technical content.\"\n\"1/16/2009\",\"5.0\",\"Major\",\"Updated and revised the technical content.\"\n\"2/27/2009\",\"5.1\",\"Minor\",\"Clarified the meaning of the technical content.\"\n\"4/10/2009\",\"5.1.1\",\"Editorial\",\"Changed language and formatting in the technical content.\"\n\"5/22/2009\",\"5.1.2\",\"Editorial\",\"Changed language and formatting in the technical content.\"\n\"7/2/2009\",\"5.1.3\",\"Editorial\",\"Changed language and formatting in the technical content.\"\n\"8/14/2009\",\"5.2\",\"Minor\",\"Clarified the meaning of the technical content.\"\n\"9/25/2009\",\"5.3\",\"Minor\",\"Clarified the meaning of the technical content.\"\n\"11/6/2009\",\"5.3.1\",\"Editorial\",\"Changed language and formatting in the technical content.\"\n\"12/18/2009\",\"5.4\",\"Minor\",\"Clarified the meaning of the technical content.\"\n\"1/29/2010\",\"5.5\",\"Minor\",\"Clarified the meaning of the technical content.\"\n\"3/12/2010\",\"6.0\",\"Major\",\"Updated and revised the technical content.\"\n\"4/23/2010\",\"7.0\",\"Major\",\"Updated and revised the technical content.\"\n\"6/4/2010\",\"7.0.1\",\"Editorial\",\"Changed language and formatting in the technical content.\"\n\"7/16/2010\",\"8.0\",\"Major\",\"Updated and revised the technical content.\"\n\"8/27/2010\",\"8.0\",\"None\",\"No changes to the meaning, language, or formatting of the technical content.\"",
          "bBox": {
            "x": 77.85,
            "y": 97.9,
            "w": 444.55,
            "h": 561.55
          }
        },
        {
          "type": "text",
          "value": "2 / 55\n\n[MS-NRBF] - v20190313\n\n.NET Remoting: Binary Format Data Structure\n\nCopyright © 2019 Microsoft Corporation\n\nRelease: March 13, 2019",
          "md": "2 / 55\n\n[MS-NRBF] - v20190313\n\n.NET Remoting: Binary Format Data Structure\n\nCopyright © 2019 Microsoft Corporation\n\nRelease: March 13, 2019",
          "bBox": {
            "x": 72.1,
            "y": 696.55,
            "w": 467.9,
            "h": 57.6
          }
        }
      ],
      "status": "OK",
      "originalOrientationAngle": 0,
      "links": [
      ],
      "width": 612,
      "height": 792,
      "triggeredAutoMode": false,
      "parsingMode": "accurate",
      "structuredData": null,
      "noStructuredContent": false,
      "noTextContent": false,
      "pageHeaderMarkdown": "",
      "pageFooterMarkdown": "",
      "confidence": 0.995
    },
    {
      "page": 3,
      "text": "                Revision     Revision\n Date           History      Class         Comments\n\n 10/8/2010      8.0          None          No changes to the meaning, language, or formatting of the\n                                           technical content.\n\n 11/19/2010     8.0          None          No changes to the meaning, language, or formatting of the\n                                           technical content.\n\n 1/7/2011       8.0          None          No changes to the meaning, language, or formatting of the\n                                           technical content.\n\n 2/11/2011      8.0          None          No changes to the meaning, language, or formatting of the\n                                           technical content.\n\n 3/25/2011      8.0          None          No changes to the meaning, language, or formatting of the\n                                           technical content.\n\n 5/6/2011       8.0          None          No changes to the meaning, language, or formatting of the\n                                           technical content.\n\n 6/17/2011      8.1          Minor         Clarified the meaning of the technical content.\n\n 9/23/2011      8.1          None          No changes to the meaning, language, or formatting of the\n                                           technical content.\n\n 12/16/2011     9.0          Major         Updated and revised the technical content.\n\n 3/30/2012      9.0          None          No changes to the meaning, language, or formatting of the\n                                           technical content.\n\n 7/12/2012      9.1          Minor         Clarified the meaning of the technical content.\n\n 10/25/2012     9.1          None          No changes to the meaning, language, or formatting of the\n                                           technical content.\n\n 1/31/2013      9.1          None          No changes to the meaning, language, or formatting of the\n                                           technical content.\n\n 8/8/2013       9.1          None          No changes to the meaning, language, or formatting of the\n                                           technical content.\n\n 11/14/2013     9.1          None          No changes to the meaning, language, or formatting of the\n                                           technical content.\n\n 2/13/2014      9.1          None          No changes to the meaning, language, or formatting of the\n                                           technical content.\n\n 5/15/2014      9.1          None          No changes to the meaning, language, or formatting of the\n                                           technical content.\n\n 6/30/2015      10.0         Major         Significantly changed the technical content.\n\n 10/16/2015     10.0         None          No changes to the meaning, language, or formatting of the\n                                           technical content.\n\n 7/14/2016      10.0         None          No changes to the meaning, language, or formatting of the\n                                           technical content.\n\n 3/16/2017      11.0         Major         Significantly changed the technical content.\n\n                                                                                          3 / 55\n\n[MS-NRBF] - v20190313\n.NET Remoting: Binary Format Data Structure\nCopyright © 2019 Microsoft Corporation\nRelease: March 13, 2019",
      "md": "\n# [MS-NRBF] - v20190313\n\n# .NET Remoting: Binary Format Data Structure\n\n# Copyright © 2019 Microsoft Corporation\n\n# Release: March 13, 2019\n\n| Revision Date | Revision History | Class | Comments                                                                     |\n| ------------- | ---------------- | ----- | ---------------------------------------------------------------------------- |\n| 10/8/2010     | 8.0              | None  | No changes to the meaning, language, or formatting of the technical content. |\n| 11/19/2010    | 8.0              | None  | No changes to the meaning, language, or formatting of the technical content. |\n| 1/7/2011      | 8.0              | None  | No changes to the meaning, language, or formatting of the technical content. |\n| 2/11/2011     | 8.0              | None  | No changes to the meaning, language, or formatting of the technical content. |\n| 3/25/2011     | 8.0              | None  | No changes to the meaning, language, or formatting of the technical content. |\n| 5/6/2011      | 8.0              | None  | No changes to the meaning, language, or formatting of the technical content. |\n| 6/17/2011     | 8.1              | Minor | Clarified the meaning of the technical content.                              |\n| 9/23/2011     | 8.1              | None  | No changes to the meaning, language, or formatting of the technical content. |\n| 12/16/2011    | 9.0              | Major | Updated and revised the technical content.                                   |\n| 3/30/2012     | 9.0              | None  | No changes to the meaning, language, or formatting of the technical content. |\n| 7/12/2012     | 9.1              | Minor | Clarified the meaning of the technical content.                              |\n| 10/25/2012    | 9.1              | None  | No changes to the meaning, language, or formatting of the technical content. |\n| 1/31/2013     | 9.1              | None  | No changes to the meaning, language, or formatting of the technical content. |\n| 8/8/2013      | 9.1              | None  | No changes to the meaning, language, or formatting of the technical content. |\n| 11/14/2013    | 9.1              | None  | No changes to the meaning, language, or formatting of the technical content. |\n| 2/13/2014     | 9.1              | None  | No changes to the meaning, language, or formatting of the technical content. |\n| 5/15/2014     | 9.1              | None  | No changes to the meaning, language, or formatting of the technical content. |\n| 6/30/2015     | 10.0             | Major | Significantly changed the technical content.                                 |\n| 10/16/2015    | 10.0             | None  | No changes to the meaning, language, or formatting of the technical content. |\n| 7/14/2016     | 10.0             | None  | No changes to the meaning, language, or formatting of the technical content. |\n| 3/16/2017     | 11.0             | Major | Significantly changed the technical content.                                 |\n\n3 / 55\n\n",
      "images": [
      ],
      "charts": [
      ],
      "items": [
        {
          "type": "heading",
          "lvl": 1,
          "value": "[MS-NRBF] - v20190313",
          "md": "# [MS-NRBF] - v20190313",
          "bBox": {
            "x": 72.1,
            "y": 713.45,
            "w": 95.66,
            "h": 8
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": ".NET Remoting: Binary Format Data Structure",
          "md": "# .NET Remoting: Binary Format Data Structure",
          "bBox": {
            "x": 72.1,
            "y": 724.35,
            "w": 182.82,
            "h": 8
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "Copyright © 2019 Microsoft Corporation",
          "md": "# Copyright © 2019 Microsoft Corporation",
          "bBox": {
            "x": 72.1,
            "y": 735.25,
            "w": 161.18,
            "h": 8
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "Release: March 13, 2019",
          "md": "# Release: March 13, 2019",
          "bBox": {
            "x": 72.1,
            "y": 746.15,
            "w": 99.12,
            "h": 8
          }
        },
        {
          "type": "table",
          "rows": [
            [
              "Revision Date",
              "Revision History",
              "Class",
              "Comments"
            ],
            [
              "10/8/2010",
              "8.0",
              "None",
              "No changes to the meaning, language, or formatting of the technical content."
            ],
            [
              "11/19/2010",
              "8.0",
              "None",
              "No changes to the meaning, language, or formatting of the technical content."
            ],
            [
              "1/7/2011",
              "8.0",
              "None",
              "No changes to the meaning, language, or formatting of the technical content."
            ],
            [
              "2/11/2011",
              "8.0",
              "None",
              "No changes to the meaning, language, or formatting of the technical content."
            ],
            [
              "3/25/2011",
              "8.0",
              "None",
              "No changes to the meaning, language, or formatting of the technical content."
            ],
            [
              "5/6/2011",
              "8.0",
              "None",
              "No changes to the meaning, language, or formatting of the technical content."
            ],
            [
              "6/17/2011",
              "8.1",
              "Minor",
              "Clarified the meaning of the technical content."
            ],
            [
              "9/23/2011",
              "8.1",
              "None",
              "No changes to the meaning, language, or formatting of the technical content."
            ],
            [
              "12/16/2011",
              "9.0",
              "Major",
              "Updated and revised the technical content."
            ],
            [
              "3/30/2012",
              "9.0",
              "None",
              "No changes to the meaning, language, or formatting of the technical content."
            ],
            [
              "7/12/2012",
              "9.1",
              "Minor",
              "Clarified the meaning of the technical content."
            ],
            [
              "10/25/2012",
              "9.1",
              "None",
              "No changes to the meaning, language, or formatting of the technical content."
            ],
            [
              "1/31/2013",
              "9.1",
              "None",
              "No changes to the meaning, language, or formatting of the technical content."
            ],
            [
              "8/8/2013",
              "9.1",
              "None",
              "No changes to the meaning, language, or formatting of the technical content."
            ],
            [
              "11/14/2013",
              "9.1",
              "None",
              "No changes to the meaning, language, or formatting of the technical content."
            ],
            [
              "2/13/2014",
              "9.1",
              "None",
              "No changes to the meaning, language, or formatting of the technical content."
            ],
            [
              "5/15/2014",
              "9.1",
              "None",
              "No changes to the meaning, language, or formatting of the technical content."
            ],
            [
              "6/30/2015",
              "10.0",
              "Major",
              "Significantly changed the technical content."
            ],
            [
              "10/16/2015",
              "10.0",
              "None",
              "No changes to the meaning, language, or formatting of the technical content."
            ],
            [
              "7/14/2016",
              "10.0",
              "None",
              "No changes to the meaning, language, or formatting of the technical content."
            ],
            [
              "3/16/2017",
              "11.0",
              "Major",
              "Significantly changed the technical content."
            ]
          ],
          "md": "| Revision Date | Revision History | Class | Comments                                                                     |\n| ------------- | ---------------- | ----- | ---------------------------------------------------------------------------- |\n| 10/8/2010     | 8.0              | None  | No changes to the meaning, language, or formatting of the technical content. |\n| 11/19/2010    | 8.0              | None  | No changes to the meaning, language, or formatting of the technical content. |\n| 1/7/2011      | 8.0              | None  | No changes to the meaning, language, or formatting of the technical content. |\n| 2/11/2011     | 8.0              | None  | No changes to the meaning, language, or formatting of the technical content. |\n| 3/25/2011     | 8.0              | None  | No changes to the meaning, language, or formatting of the technical content. |\n| 5/6/2011      | 8.0              | None  | No changes to the meaning, language, or formatting of the technical content. |\n| 6/17/2011     | 8.1              | Minor | Clarified the meaning of the technical content.                              |\n| 9/23/2011     | 8.1              | None  | No changes to the meaning, language, or formatting of the technical content. |\n| 12/16/2011    | 9.0              | Major | Updated and revised the technical content.                                   |\n| 3/30/2012     | 9.0              | None  | No changes to the meaning, language, or formatting of the technical content. |\n| 7/12/2012     | 9.1              | Minor | Clarified the meaning of the technical content.                              |\n| 10/25/2012    | 9.1              | None  | No changes to the meaning, language, or formatting of the technical content. |\n| 1/31/2013     | 9.1              | None  | No changes to the meaning, language, or formatting of the technical content. |\n| 8/8/2013      | 9.1              | None  | No changes to the meaning, language, or formatting of the technical content. |\n| 11/14/2013    | 9.1              | None  | No changes to the meaning, language, or formatting of the technical content. |\n| 2/13/2014     | 9.1              | None  | No changes to the meaning, language, or formatting of the technical content. |\n| 5/15/2014     | 9.1              | None  | No changes to the meaning, language, or formatting of the technical content. |\n| 6/30/2015     | 10.0             | Major | Significantly changed the technical content.                                 |\n| 10/16/2015    | 10.0             | None  | No changes to the meaning, language, or formatting of the technical content. |\n| 7/14/2016     | 10.0             | None  | No changes to the meaning, language, or formatting of the technical content. |\n| 3/16/2017     | 11.0             | Major | Significantly changed the technical content.                                 |",
          "isPerfectTable": true,
          "csv": "\"Revision Date\",\"Revision History\",\"Class\",\"Comments\"\n\"10/8/2010\",\"8.0\",\"None\",\"No changes to the meaning, language, or formatting of the technical content.\"\n\"11/19/2010\",\"8.0\",\"None\",\"No changes to the meaning, language, or formatting of the technical content.\"\n\"1/7/2011\",\"8.0\",\"None\",\"No changes to the meaning, language, or formatting of the technical content.\"\n\"2/11/2011\",\"8.0\",\"None\",\"No changes to the meaning, language, or formatting of the technical content.\"\n\"3/25/2011\",\"8.0\",\"None\",\"No changes to the meaning, language, or formatting of the technical content.\"\n\"5/6/2011\",\"8.0\",\"None\",\"No changes to the meaning, language, or formatting of the technical content.\"\n\"6/17/2011\",\"8.1\",\"Minor\",\"Clarified the meaning of the technical content.\"\n\"9/23/2011\",\"8.1\",\"None\",\"No changes to the meaning, language, or formatting of the technical content.\"\n\"12/16/2011\",\"9.0\",\"Major\",\"Updated and revised the technical content.\"\n\"3/30/2012\",\"9.0\",\"None\",\"No changes to the meaning, language, or formatting of the technical content.\"\n\"7/12/2012\",\"9.1\",\"Minor\",\"Clarified the meaning of the technical content.\"\n\"10/25/2012\",\"9.1\",\"None\",\"No changes to the meaning, language, or formatting of the technical content.\"\n\"1/31/2013\",\"9.1\",\"None\",\"No changes to the meaning, language, or formatting of the technical content.\"\n\"8/8/2013\",\"9.1\",\"None\",\"No changes to the meaning, language, or formatting of the technical content.\"\n\"11/14/2013\",\"9.1\",\"None\",\"No changes to the meaning, language, or formatting of the technical content.\"\n\"2/13/2014\",\"9.1\",\"None\",\"No changes to the meaning, language, or formatting of the technical content.\"\n\"5/15/2014\",\"9.1\",\"None\",\"No changes to the meaning, language, or formatting of the technical content.\"\n\"6/30/2015\",\"10.0\",\"Major\",\"Significantly changed the technical content.\"\n\"10/16/2015\",\"10.0\",\"None\",\"No changes to the meaning, language, or formatting of the technical content.\"\n\"7/14/2016\",\"10.0\",\"None\",\"No changes to the meaning, language, or formatting of the technical content.\"\n\"3/16/2017\",\"11.0\",\"Major\",\"Significantly changed the technical content.\"",
          "bBox": {
            "x": 77.85,
            "y": 70.9,
            "w": 393.54,
            "h": 608.7
          }
        },
        {
          "type": "text",
          "value": "3 / 55",
          "md": "3 / 55",
          "bBox": {
            "x": 517.2,
            "y": 696.55,
            "w": 22.8,
            "h": 8
          }
        }
      ],
      "status": "OK",
      "originalOrientationAngle": 0,
      "links": [
      ],
      "width": 612,
      "height": 792,
      "triggeredAutoMode": false,
      "parsingMode": "accurate",
      "structuredData": null,
      "noStructuredContent": false,
      "noTextContent": false,
      "pageHeaderMarkdown": "\n# [MS-NRBF] - v20190313\n\n# .NET Remoting: Binary Format Data Structure\n\n# Copyright © 2019 Microsoft Corporation\n\n# Release: March 13, 2019\n\n",
      "pageFooterMarkdown": "\n3 / 55\n\n",
      "confidence": 0.998
    },
    {
      "page": 4,
      "text": "              Revision     Revision\nDate          History      Class     Comments\n\n6/1/2017      11.0         None      No changes to the meaning, language, or formatting of the\n                                     technical content.\n\n3/13/2019     12.0         Major     Significantly changed the technical content.\n\n\n                                           4 / 55\n\n[MS-NRBF] - v20190313\n.NET Remoting: Binary Format Data Structure\nCopyright © 2019 Microsoft Corporation\nRelease: March 13, 2019",
      "md": "\n# [MS-NRBF] - v20190313\n\n# .NET Remoting: Binary Format Data Structure\n\nCopyright © 2019 Microsoft Corporation\n\nRelease: March 13, 2019\n\n| Revision Date | Revision History | Class | Comments                                                                     |\n| ------------- | ---------------- | ----- | ---------------------------------------------------------------------------- |\n| 6/1/2017      | 11.0             | None  | No changes to the meaning, language, or formatting of the technical content. |\n| 3/13/2019     | 12.0             | Major | Significantly changed the technical content.                                 |\n\n4 / 55\n\n",
      "images": [
      ],
      "charts": [
      ],
      "items": [
        {
          "type": "heading",
          "lvl": 1,
          "value": "[MS-NRBF] - v20190313",
          "md": "# [MS-NRBF] - v20190313",
          "bBox": {
            "x": 72.1,
            "y": 713.45,
            "w": 95.66,
            "h": 8
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": ".NET Remoting: Binary Format Data Structure",
          "md": "# .NET Remoting: Binary Format Data Structure",
          "bBox": {
            "x": 72.1,
            "y": 724.35,
            "w": 182.82,
            "h": 8
          }
        },
        {
          "type": "text",
          "value": "Copyright © 2019 Microsoft Corporation\n\nRelease: March 13, 2019",
          "md": "Copyright © 2019 Microsoft Corporation\n\nRelease: March 13, 2019",
          "bBox": {
            "x": 72.1,
            "y": 735.25,
            "w": 161.18,
            "h": 18.9
          }
        },
        {
          "type": "table",
          "rows": [
            [
              "Revision Date",
              "Revision History",
              "Class",
              "Comments"
            ],
            [
              "6/1/2017",
              "11.0",
              "None",
              "No changes to the meaning, language, or formatting of the technical content."
            ],
            [
              "3/13/2019",
              "12.0",
              "Major",
              "Significantly changed the technical content."
            ]
          ],
          "md": "| Revision Date | Revision History | Class | Comments                                                                     |\n| ------------- | ---------------- | ----- | ---------------------------------------------------------------------------- |\n| 6/1/2017      | 11.0             | None  | No changes to the meaning, language, or formatting of the technical content. |\n| 3/13/2019     | 12.0             | Major | Significantly changed the technical content.                                 |",
          "isPerfectTable": true,
          "csv": "\"Revision Date\",\"Revision History\",\"Class\",\"Comments\"\n\"6/1/2017\",\"11.0\",\"None\",\"No changes to the meaning, language, or formatting of the technical content.\"\n\"3/13/2019\",\"12.0\",\"Major\",\"Significantly changed the technical content.\"",
          "bBox": {
            "x": 77.85,
            "y": 70.9,
            "w": 382.99,
            "h": 59.5
          }
        },
        {
          "type": "text",
          "value": "4 / 55",
          "md": "4 / 55",
          "bBox": {
            "x": 517.2,
            "y": 696.55,
            "w": 22.8,
            "h": 8
          }
        }
      ],
      "status": "OK",
      "originalOrientationAngle": 0,
      "links": [
      ],
      "width": 612,
      "height": 792,
      "triggeredAutoMode": false,
      "parsingMode": "accurate",
      "structuredData": null,
      "noStructuredContent": false,
      "noTextContent": false,
      "pageHeaderMarkdown": "\n# [MS-NRBF] - v20190313\n\n# .NET Remoting: Binary Format Data Structure\n\nCopyright © 2019 Microsoft Corporation\n\nRelease: March 13, 2019\n\n",
      "pageFooterMarkdown": "\n4 / 55\n\n",
      "confidence": 0.988
    },
    {
      "page": 5,
      "text": "Table of Contents\n\n1                       Introduction........................................................................................................6\n  1.1       Glossary...........................................................................................................................6\n  1.2       References.......................................................................................................................9\n   1.2.1            Normative References............................................................................................... 9\n   1.2.2            Informative References............................................................................................. 9\n  1.3       Overview..........................................................................................................................9\n  1.4                           Relationship to Protocols and Other Structures.............................................................10\n  1.5             Applicability Statement................................................................................................. 10\n  1.6                Versioning and Localization...........................................................................................11\n  1.7               Vendor-Extensible Fields...............................................................................................11\n\n2  Structures........................................................................................................ 12\n  2.1              Common Definitions......................................................................................................12\n   2.1.1                   Common Data Types...............................................................................................12\n         2.1.1.1    Char.................................................................................................................. 12\n         2.1.1.2      Double...............................................................................................................12\n         2.1.1.3     Single................................................................................................................13\n         2.1.1.4        TimeSpan.......................................................................................................... 13\n         2.1.1.5        DateTime.......................................................................................................... 13\n         2.1.1.6               LengthPrefixedString........................................................................................14\n         2.1.1.7       Decimal.............................................................................................................16\n         2.1.1.8          ClassTypeInfo....................................................................................................16\n   2.1.2            Enumerations.......................................................................................................... 17\n         2.1.2.1                   RecordTypeEnumeration...................................................................................17\n         2.1.2.2                  BinaryTypeEnumeration....................................................................................18\n         2.1.2.3                   PrimitiveTypeEnumeration................................................................................19\n  2.2                  Method Invocation Records...........................................................................................20\n   2.2.1            Enumerations.......................................................................................................... 20\n         2.2.1.1           MessageFlags....................................................................................................20\n   2.2.2                 Common Structures.................................................................................................22\n         2.2.2.1            ValueWithCode..................................................................................................22\n         2.2.2.2                StringValueWithCode........................................................................................22\n         2.2.2.3                  ArrayOfValueWithCode.....................................................................................22\n   2.2.3             Record Definitions................................................................................................... 23\n         2.2.3.1            BinaryMethodCall.............................................................................................. 23\n         2.2.3.2            MethodCallArray................................................................................................24\n         2.2.3.3                BinaryMethodReturn.........................................................................................25\n         2.2.3.4                 MethodReturnCallArray.....................................................................................25\n  2.3         Class Records................................................................................................................26\n   2.3.1                 Common Structures.................................................................................................26\n         2.3.1.1      ClassInfo............................................................................................................26\n         2.3.1.2              MemberTypeInfo...............................................................................................27\n   2.3.2             Record Definitions................................................................................................... 28\n         2.3.2.1                       ClassWithMembersAndTypes............................................................................28\n         2.3.2.2               ClassWithMembers............................................................................................29\n         2.3.2.3                             SystemClassWithMembersAndTypes................................................................29\n         2.3.2.4                    SystemClassWithMembers................................................................................ 29\n         2.3.2.5         ClassWithId.......................................................................................................30\n\n                                                                                                                                                5 / 55\n[MS-NRBF] - v20190313\n.NET Remoting: Binary Format Data Structure\nCopyright © 2019 Microsoft Corporation\nRelease: March 13, 2019",
      "md": "\nTable of Contents\n\n# 1 Introduction\n\n........................................................................................................6\n\n# 1.1 Glossary\n\n...........................................................................................................................6\n\n# 1.2 References\n\n.......................................................................................................................9\n\n# 1.2.1 Normative References\n\n............................................................................................... 9\n\n# 1.2.2 Informative References\n\n............................................................................................. 9\n\n# 1.3 Overview\n\n..........................................................................................................................9\n\n# 1.4 Relationship to Protocols and Other Structures\n\n.............................................................................................10\n\n# 1.5 Applicability Statement\n\n................................................................................................. 10\n\n# 1.6 Versioning and Localization\n\n...........................................................................................11\n\n# 1.7 Vendor-Extensible Fields\n\n...............................................................................................11\n\n# 2 Structures\n\n........................................................................................................ 12\n\n# 2.1 Common Definitions\n\n......................................................................................................12\n\n# 2.1.1 Common Data Types\n\n...............................................................................................12\n\n# 2.1.1.1 Char\n\n.................................................................................................. 12\n\n# 2.1.1.2 Double\n\n.......................................................................................................12\n\n# 2.1.1.3 Single\n\n................................................................................................................13\n\n# 2.1.1.4 TimeSpan\n\n.......................................................................................................... 13\n\n# 2.1.1.5 DateTime\n\n.......................................................................................................... 13\n\n# 2.1.1.6 LengthPrefixedString\n\n..............................................................................................14\n\n# 2.1.1.7 Decimal\n\n.............................................................................................................16\n\n# 2.1.1.8 ClassTypeInfo\n\n....................................................................................................16\n\n# 2.1.2 Enumerations\n\n.......................................................................................................... 17\n\n# 2.1.2.1 RecordTypeEnumeration\n\n...................................................................................17\n\n# 2.1.2.2 BinaryTypeEnumeration\n\n....................................................................................18\n\n# 2.1.2.3 PrimitiveTypeEnumeration\n\n................................................................................19\n\n# 2.2 Method Invocation Records\n\n...........................................................................................20\n\n# 2.2.1 Enumerations\n\n.......................................................................................................... 20\n\n# 2.2.1.1 MessageFlags\n\n....................................................................................................20\n\n# 2.2.2 Common Structures\n\n.................................................................................................22\n\n# 2.2.2.1 ValueWithCode\n\n..................................................................................................22\n\n# 2.2.2.2 StringValueWithCode\n\n..............................................................................................22\n\n# 2.2.2.3 ArrayOfValueWithCode\n\n.....................................................................................22\n\n# 2.2.3 Record Definitions\n\n................................................................................................... 23\n\n# 2.2.3.1 BinaryMethodCall\n\n.............................................................................................. 23\n\n# 2.2.3.2 MethodCallArray\n\n................................................................................................24\n\n# 2.2.3.3 BinaryMethodReturn\n\n.........................................................................................25\n\n# 2.2.3.4 MethodReturnCallArray\n\n.....................................................................................25\n\n# 2.3 Class Records\n\n................................................................................................................26\n\n# 2.3.1 Common Structures\n\n.................................................................................................26\n\n# 2.3.1.1 ClassInfo\n\n............................................................................................................26\n\n# 2.3.1.2 MemberTypeInfo\n\n...............................................................................................27\n\n# 2.3.2 Record Definitions\n\n................................................................................................... 28\n\n# 2.3.2.1 ClassWithMembersAndTypes\n\n............................................................................28\n\n# 2.3.2.2 ClassWithMembers\n\n............................................................................................29\n\n# 2.3.2.3 SystemClassWithMembersAndTypes\n\n................................................................................29\n\n# 2.3.2.4 SystemClassWithMembers\n\n................................................................................ 29\n\n# 2.3.2.5 ClassWithId\n\n.......................................................................................................30\n\n5 / 55\n[MS-NRBF] - v20190313\n.NET Remoting: Binary Format Data Structure\nCopyright © 2019 Microsoft Corporation\nRelease: March 13, 2019\n",
      "images": [
      ],
      "charts": [
      ],
      "items": [
        {
          "type": "text",
          "value": "Table of Contents",
          "md": "Table of Contents",
          "bBox": {
            "x": 62.75,
            "y": 73.65,
            "w": 129.8,
            "h": 13
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "1 Introduction",
          "md": "# 1 Introduction",
          "bBox": {
            "x": 72.1,
            "y": 96.9,
            "w": 6,
            "h": 9
          }
        },
        {
          "type": "text",
          "value": "........................................................................................................6",
          "md": "........................................................................................................6",
          "bBox": {
            "x": 0,
            "y": 0,
            "w": 612,
            "h": 792
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "1.1 Glossary",
          "md": "# 1.1 Glossary",
          "bBox": {
            "x": 72.1,
            "y": 96.9,
            "w": 23.35,
            "h": 21.3
          }
        },
        {
          "type": "text",
          "value": "...........................................................................................................................6",
          "md": "...........................................................................................................................6",
          "bBox": {
            "x": 0,
            "y": 0,
            "w": 612,
            "h": 792
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "1.2 References",
          "md": "# 1.2 References",
          "bBox": {
            "x": 72.1,
            "y": 96.9,
            "w": 23.35,
            "h": 138
          }
        },
        {
          "type": "text",
          "value": ".......................................................................................................................9",
          "md": ".......................................................................................................................9",
          "bBox": {
            "x": 0,
            "y": 0,
            "w": 612,
            "h": 792
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "1.2.1 Normative References",
          "md": "# 1.2.1 Normative References",
          "bBox": {
            "x": 72.1,
            "y": 96.9,
            "w": 41,
            "h": 150.3
          }
        },
        {
          "type": "text",
          "value": "............................................................................................... 9",
          "md": "............................................................................................... 9",
          "bBox": {
            "x": 0,
            "y": 0,
            "w": 612,
            "h": 792
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "1.2.2 Informative References",
          "md": "# 1.2.2 Informative References",
          "bBox": {
            "x": 72.1,
            "y": 96.9,
            "w": 41,
            "h": 322.5
          }
        },
        {
          "type": "text",
          "value": "............................................................................................. 9",
          "md": "............................................................................................. 9",
          "bBox": {
            "x": 0,
            "y": 0,
            "w": 612,
            "h": 792
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "1.3 Overview",
          "md": "# 1.3 Overview",
          "bBox": {
            "x": 72.1,
            "y": 96.9,
            "w": 23.35,
            "h": 70.5
          }
        },
        {
          "type": "text",
          "value": "..........................................................................................................................9",
          "md": "..........................................................................................................................9",
          "bBox": {
            "x": 0,
            "y": 0,
            "w": 612,
            "h": 792
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "1.4 Relationship to Protocols and Other Structures",
          "md": "# 1.4 Relationship to Protocols and Other Structures",
          "bBox": {
            "x": 72.1,
            "y": 96.9,
            "w": 23.35,
            "h": 82.8
          }
        },
        {
          "type": "text",
          "value": ".............................................................................................10",
          "md": ".............................................................................................10",
          "bBox": {
            "x": 72.1,
            "y": 96.9,
            "w": 6,
            "h": 9
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "1.5 Applicability Statement",
          "md": "# 1.5 Applicability Statement",
          "bBox": {
            "x": 72.1,
            "y": 96.9,
            "w": 23.35,
            "h": 95.1
          }
        },
        {
          "type": "text",
          "value": "................................................................................................. 10",
          "md": "................................................................................................. 10",
          "bBox": {
            "x": 72.1,
            "y": 96.9,
            "w": 6,
            "h": 9
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "1.6 Versioning and Localization",
          "md": "# 1.6 Versioning and Localization",
          "bBox": {
            "x": 72.1,
            "y": 96.9,
            "w": 23.35,
            "h": 107.4
          }
        },
        {
          "type": "text",
          "value": "...........................................................................................11",
          "md": "...........................................................................................11",
          "bBox": {
            "x": 72.1,
            "y": 96.9,
            "w": 6,
            "h": 9
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "1.7 Vendor-Extensible Fields",
          "md": "# 1.7 Vendor-Extensible Fields",
          "bBox": {
            "x": 72.1,
            "y": 96.9,
            "w": 23.35,
            "h": 119.7
          }
        },
        {
          "type": "text",
          "value": "...............................................................................................11",
          "md": "...............................................................................................11",
          "bBox": {
            "x": 72.1,
            "y": 96.9,
            "w": 6,
            "h": 9
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "2 Structures",
          "md": "# 2 Structures",
          "bBox": {
            "x": 72.1,
            "y": 225.9,
            "w": 6,
            "h": 9
          }
        },
        {
          "type": "text",
          "value": "........................................................................................................ 12",
          "md": "........................................................................................................ 12",
          "bBox": {
            "x": 72.1,
            "y": 96.9,
            "w": 6,
            "h": 138
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "2.1 Common Definitions",
          "md": "# 2.1 Common Definitions",
          "bBox": {
            "x": 72.1,
            "y": 96.9,
            "w": 23.35,
            "h": 150.3
          }
        },
        {
          "type": "text",
          "value": "......................................................................................................12",
          "md": "......................................................................................................12",
          "bBox": {
            "x": 72.1,
            "y": 96.9,
            "w": 6,
            "h": 138
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "2.1.1 Common Data Types",
          "md": "# 2.1.1 Common Data Types",
          "bBox": {
            "x": 72.1,
            "y": 96.9,
            "w": 41,
            "h": 162.6
          }
        },
        {
          "type": "text",
          "value": "...............................................................................................12",
          "md": "...............................................................................................12",
          "bBox": {
            "x": 72.1,
            "y": 96.9,
            "w": 6,
            "h": 138
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "2.1.1.1 Char",
          "md": "# 2.1.1.1 Char",
          "bBox": {
            "x": 72.1,
            "y": 96.9,
            "w": 58.35,
            "h": 174.9
          }
        },
        {
          "type": "text",
          "value": ".................................................................................................. 12",
          "md": ".................................................................................................. 12",
          "bBox": {
            "x": 72.1,
            "y": 96.9,
            "w": 6,
            "h": 138
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "2.1.1.2 Double",
          "md": "# 2.1.1.2 Double",
          "bBox": {
            "x": 72.1,
            "y": 96.9,
            "w": 58.35,
            "h": 187.2
          }
        },
        {
          "type": "text",
          "value": ".......................................................................................................12",
          "md": ".......................................................................................................12",
          "bBox": {
            "x": 72.1,
            "y": 96.9,
            "w": 6,
            "h": 138
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "2.1.1.3 Single",
          "md": "# 2.1.1.3 Single",
          "bBox": {
            "x": 72.1,
            "y": 96.9,
            "w": 58.35,
            "h": 199.5
          }
        },
        {
          "type": "text",
          "value": "................................................................................................................13",
          "md": "................................................................................................................13",
          "bBox": {
            "x": 72.1,
            "y": 96.9,
            "w": 6,
            "h": 9
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "2.1.1.4 TimeSpan",
          "md": "# 2.1.1.4 TimeSpan",
          "bBox": {
            "x": 72.1,
            "y": 96.9,
            "w": 58.35,
            "h": 211.8
          }
        },
        {
          "type": "text",
          "value": ".......................................................................................................... 13",
          "md": ".......................................................................................................... 13",
          "bBox": {
            "x": 72.1,
            "y": 96.9,
            "w": 6,
            "h": 9
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "2.1.1.5 DateTime",
          "md": "# 2.1.1.5 DateTime",
          "bBox": {
            "x": 72.1,
            "y": 96.9,
            "w": 58.35,
            "h": 224.1
          }
        },
        {
          "type": "text",
          "value": ".......................................................................................................... 13",
          "md": ".......................................................................................................... 13",
          "bBox": {
            "x": 72.1,
            "y": 96.9,
            "w": 6,
            "h": 9
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "2.1.1.6 LengthPrefixedString",
          "md": "# 2.1.1.6 LengthPrefixedString",
          "bBox": {
            "x": 72.1,
            "y": 96.9,
            "w": 58.35,
            "h": 236.4
          }
        },
        {
          "type": "text",
          "value": "..............................................................................................14",
          "md": "..............................................................................................14",
          "bBox": {
            "x": 72.1,
            "y": 96.9,
            "w": 6,
            "h": 9
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "2.1.1.7 Decimal",
          "md": "# 2.1.1.7 Decimal",
          "bBox": {
            "x": 72.1,
            "y": 96.9,
            "w": 58.35,
            "h": 248.7
          }
        },
        {
          "type": "text",
          "value": ".............................................................................................................16",
          "md": ".............................................................................................................16",
          "bBox": {
            "x": 72.1,
            "y": 96.9,
            "w": 6,
            "h": 9
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "2.1.1.8 ClassTypeInfo",
          "md": "# 2.1.1.8 ClassTypeInfo",
          "bBox": {
            "x": 72.1,
            "y": 96.9,
            "w": 58.35,
            "h": 261
          }
        },
        {
          "type": "text",
          "value": "....................................................................................................16",
          "md": "....................................................................................................16",
          "bBox": {
            "x": 72.1,
            "y": 96.9,
            "w": 6,
            "h": 9
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "2.1.2 Enumerations",
          "md": "# 2.1.2 Enumerations",
          "bBox": {
            "x": 72.1,
            "y": 96.9,
            "w": 41,
            "h": 273.3
          }
        },
        {
          "type": "text",
          "value": ".......................................................................................................... 17",
          "md": ".......................................................................................................... 17",
          "bBox": {
            "x": 72.1,
            "y": 96.9,
            "w": 6,
            "h": 9
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "2.1.2.1 RecordTypeEnumeration",
          "md": "# 2.1.2.1 RecordTypeEnumeration",
          "bBox": {
            "x": 72.1,
            "y": 96.9,
            "w": 58.35,
            "h": 285.6
          }
        },
        {
          "type": "text",
          "value": "...................................................................................17",
          "md": "...................................................................................17",
          "bBox": {
            "x": 72.1,
            "y": 96.9,
            "w": 6,
            "h": 9
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "2.1.2.2 BinaryTypeEnumeration",
          "md": "# 2.1.2.2 BinaryTypeEnumeration",
          "bBox": {
            "x": 72.1,
            "y": 96.9,
            "w": 58.35,
            "h": 322.5
          }
        },
        {
          "type": "text",
          "value": "....................................................................................18",
          "md": "....................................................................................18",
          "bBox": {
            "x": 72.1,
            "y": 96.9,
            "w": 6,
            "h": 9
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "2.1.2.3 PrimitiveTypeEnumeration",
          "md": "# 2.1.2.3 PrimitiveTypeEnumeration",
          "bBox": {
            "x": 72.1,
            "y": 96.9,
            "w": 58.35,
            "h": 470.1
          }
        },
        {
          "type": "text",
          "value": "................................................................................19",
          "md": "................................................................................19",
          "bBox": {
            "x": 72.1,
            "y": 96.9,
            "w": 6,
            "h": 9
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "2.2 Method Invocation Records",
          "md": "# 2.2 Method Invocation Records",
          "bBox": {
            "x": 72.1,
            "y": 225.9,
            "w": 23.35,
            "h": 193.5
          }
        },
        {
          "type": "text",
          "value": "...........................................................................................20",
          "md": "...........................................................................................20",
          "bBox": {
            "x": 72.1,
            "y": 225.9,
            "w": 6,
            "h": 9
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "2.2.1 Enumerations",
          "md": "# 2.2.1 Enumerations",
          "bBox": {
            "x": 72.1,
            "y": 96.9,
            "w": 41,
            "h": 334.8
          }
        },
        {
          "type": "text",
          "value": ".......................................................................................................... 20",
          "md": ".......................................................................................................... 20",
          "bBox": {
            "x": 72.1,
            "y": 225.9,
            "w": 6,
            "h": 9
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "2.2.1.1 MessageFlags",
          "md": "# 2.2.1.1 MessageFlags",
          "bBox": {
            "x": 72.1,
            "y": 96.9,
            "w": 58.35,
            "h": 347.1
          }
        },
        {
          "type": "text",
          "value": "....................................................................................................20",
          "md": "....................................................................................................20",
          "bBox": {
            "x": 72.1,
            "y": 225.9,
            "w": 6,
            "h": 9
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "2.2.2 Common Structures",
          "md": "# 2.2.2 Common Structures",
          "bBox": {
            "x": 72.1,
            "y": 225.9,
            "w": 41,
            "h": 230.4
          }
        },
        {
          "type": "text",
          "value": ".................................................................................................22",
          "md": ".................................................................................................22",
          "bBox": {
            "x": 72.1,
            "y": 225.9,
            "w": 6,
            "h": 9
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "2.2.2.1 ValueWithCode",
          "md": "# 2.2.2.1 ValueWithCode",
          "bBox": {
            "x": 72.1,
            "y": 96.9,
            "w": 58.35,
            "h": 371.7
          }
        },
        {
          "type": "text",
          "value": "..................................................................................................22",
          "md": "..................................................................................................22",
          "bBox": {
            "x": 72.1,
            "y": 225.9,
            "w": 6,
            "h": 9
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "2.2.2.2 StringValueWithCode",
          "md": "# 2.2.2.2 StringValueWithCode",
          "bBox": {
            "x": 72.1,
            "y": 225.9,
            "w": 58.35,
            "h": 255
          }
        },
        {
          "type": "text",
          "value": "..............................................................................................22",
          "md": "..............................................................................................22",
          "bBox": {
            "x": 72.1,
            "y": 225.9,
            "w": 6,
            "h": 9
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "2.2.2.3 ArrayOfValueWithCode",
          "md": "# 2.2.2.3 ArrayOfValueWithCode",
          "bBox": {
            "x": 72.1,
            "y": 225.9,
            "w": 58.35,
            "h": 341.1
          }
        },
        {
          "type": "text",
          "value": ".....................................................................................22",
          "md": ".....................................................................................22",
          "bBox": {
            "x": 72.1,
            "y": 225.9,
            "w": 6,
            "h": 9
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "2.2.3 Record Definitions",
          "md": "# 2.2.3 Record Definitions",
          "bBox": {
            "x": 72.1,
            "y": 225.9,
            "w": 41,
            "h": 341.1
          }
        },
        {
          "type": "text",
          "value": "................................................................................................... 23",
          "md": "................................................................................................... 23",
          "bBox": {
            "x": 72.1,
            "y": 225.9,
            "w": 6,
            "h": 9
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "2.2.3.1 BinaryMethodCall",
          "md": "# 2.2.3.1 BinaryMethodCall",
          "bBox": {
            "x": 72.1,
            "y": 96.9,
            "w": 58.35,
            "h": 482.4
          }
        },
        {
          "type": "text",
          "value": ".............................................................................................. 23",
          "md": ".............................................................................................. 23",
          "bBox": {
            "x": 72.1,
            "y": 225.9,
            "w": 6,
            "h": 9
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "2.2.3.2 MethodCallArray",
          "md": "# 2.2.3.2 MethodCallArray",
          "bBox": {
            "x": 72.1,
            "y": 225.9,
            "w": 58.35,
            "h": 390.3
          }
        },
        {
          "type": "text",
          "value": "................................................................................................24",
          "md": "................................................................................................24",
          "bBox": {
            "x": 72.1,
            "y": 225.9,
            "w": 6,
            "h": 9
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "2.2.3.3 BinaryMethodReturn",
          "md": "# 2.2.3.3 BinaryMethodReturn",
          "bBox": {
            "x": 72.1,
            "y": 225.9,
            "w": 58.35,
            "h": 341.1
          }
        },
        {
          "type": "text",
          "value": ".........................................................................................25",
          "md": ".........................................................................................25",
          "bBox": {
            "x": 72.1,
            "y": 225.9,
            "w": 6,
            "h": 9
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "2.2.3.4 MethodReturnCallArray",
          "md": "# 2.2.3.4 MethodReturnCallArray",
          "bBox": {
            "x": 72.1,
            "y": 225.9,
            "w": 58.35,
            "h": 341.1
          }
        },
        {
          "type": "text",
          "value": ".....................................................................................25",
          "md": ".....................................................................................25",
          "bBox": {
            "x": 72.1,
            "y": 225.9,
            "w": 6,
            "h": 9
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "2.3 Class Records",
          "md": "# 2.3 Class Records",
          "bBox": {
            "x": 72.1,
            "y": 225.9,
            "w": 23.35,
            "h": 341.1
          }
        },
        {
          "type": "text",
          "value": "................................................................................................................26",
          "md": "................................................................................................................26",
          "bBox": {
            "x": 72.1,
            "y": 225.9,
            "w": 6,
            "h": 9
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "2.3.1 Common Structures",
          "md": "# 2.3.1 Common Structures",
          "bBox": {
            "x": 72.1,
            "y": 96.9,
            "w": 41,
            "h": 482.4
          }
        },
        {
          "type": "text",
          "value": ".................................................................................................26",
          "md": ".................................................................................................26",
          "bBox": {
            "x": 72.1,
            "y": 225.9,
            "w": 6,
            "h": 9
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "2.3.1.1 ClassInfo",
          "md": "# 2.3.1.1 ClassInfo",
          "bBox": {
            "x": 72.1,
            "y": 96.9,
            "w": 58.35,
            "h": 494.7
          }
        },
        {
          "type": "text",
          "value": "............................................................................................................26",
          "md": "............................................................................................................26",
          "bBox": {
            "x": 72.1,
            "y": 225.9,
            "w": 6,
            "h": 9
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "2.3.1.2 MemberTypeInfo",
          "md": "# 2.3.1.2 MemberTypeInfo",
          "bBox": {
            "x": 72.1,
            "y": 96.9,
            "w": 58.35,
            "h": 507
          }
        },
        {
          "type": "text",
          "value": "...............................................................................................27",
          "md": "...............................................................................................27",
          "bBox": {
            "x": 72.1,
            "y": 225.9,
            "w": 6,
            "h": 9
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "2.3.2 Record Definitions",
          "md": "# 2.3.2 Record Definitions",
          "bBox": {
            "x": 72.1,
            "y": 225.9,
            "w": 41,
            "h": 390.3
          }
        },
        {
          "type": "text",
          "value": "................................................................................................... 28",
          "md": "................................................................................................... 28",
          "bBox": {
            "x": 72.1,
            "y": 225.9,
            "w": 6,
            "h": 9
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "2.3.2.1 ClassWithMembersAndTypes",
          "md": "# 2.3.2.1 ClassWithMembersAndTypes",
          "bBox": {
            "x": 72.1,
            "y": 96.9,
            "w": 58.35,
            "h": 531.6
          }
        },
        {
          "type": "text",
          "value": "............................................................................28",
          "md": "............................................................................28",
          "bBox": {
            "x": 72.1,
            "y": 225.9,
            "w": 6,
            "h": 9
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "2.3.2.2 ClassWithMembers",
          "md": "# 2.3.2.2 ClassWithMembers",
          "bBox": {
            "x": 72.1,
            "y": 225.9,
            "w": 58.35,
            "h": 414.9
          }
        },
        {
          "type": "text",
          "value": "............................................................................................29",
          "md": "............................................................................................29",
          "bBox": {
            "x": 72.1,
            "y": 225.9,
            "w": 6,
            "h": 9
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "2.3.2.3 SystemClassWithMembersAndTypes",
          "md": "# 2.3.2.3 SystemClassWithMembersAndTypes",
          "bBox": {
            "x": 72.1,
            "y": 225.9,
            "w": 58.35,
            "h": 427.2
          }
        },
        {
          "type": "text",
          "value": "................................................................................29",
          "md": "................................................................................29",
          "bBox": {
            "x": 72.1,
            "y": 225.9,
            "w": 6,
            "h": 9
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "2.3.2.4 SystemClassWithMembers",
          "md": "# 2.3.2.4 SystemClassWithMembers",
          "bBox": {
            "x": 72.1,
            "y": 225.9,
            "w": 58.35,
            "h": 439.5
          }
        },
        {
          "type": "text",
          "value": "................................................................................ 29",
          "md": "................................................................................ 29",
          "bBox": {
            "x": 72.1,
            "y": 225.9,
            "w": 6,
            "h": 9
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "2.3.2.5 ClassWithId",
          "md": "# 2.3.2.5 ClassWithId",
          "bBox": {
            "x": 72.1,
            "y": 225.9,
            "w": 58.35,
            "h": 451.8
          }
        },
        {
          "type": "text",
          "value": ".......................................................................................................30\n\n5 / 55\n[MS-NRBF] - v20190313\n.NET Remoting: Binary Format Data Structure\nCopyright © 2019 Microsoft Corporation\nRelease: March 13, 2019",
          "md": ".......................................................................................................30\n\n5 / 55\n[MS-NRBF] - v20190313\n.NET Remoting: Binary Format Data Structure\nCopyright © 2019 Microsoft Corporation\nRelease: March 13, 2019",
          "bBox": {
            "x": 72.1,
            "y": 96.9,
            "w": 467.9,
            "h": 657.25
          }
        }
      ],
      "status": "OK",
      "originalOrientationAngle": 0,
      "links": [
      ],
      "width": 612,
      "height": 792,
      "triggeredAutoMode": false,
      "parsingMode": "accurate",
      "structuredData": null,
      "noStructuredContent": false,
      "noTextContent": false,
      "pageHeaderMarkdown": "\nTable of Contents\n",
      "pageFooterMarkdown": "\n5 / 55\n[MS-NRBF] - v20190313\n.NET Remoting: Binary Format Data Structure\nCopyright © 2019 Microsoft Corporation\nRelease: March 13, 2019\n",
      "confidence": 0.998
    },
    {
      "page": 6,
      "text": "  2.4      Array Records................................................................................................................ 30\n   2.4.1          Enumerations.......................................................................................................... 31\n         2.4.1.1                    BinaryArrayTypeEnumeration...........................................................................31\n   2.4.2               Common Definitions................................................................................................31\n         2.4.2.1    ArrayInfo........................................................................................................... 31\n   2.4.3           Record Definitions................................................................................................... 32\n         2.4.3.1       BinaryArray.......................................................................................................32\n         2.4.3.2          ArraySingleObject............................................................................................. 33\n         2.4.3.3           ArraySinglePrimitive..........................................................................................33\n         2.4.3.4          ArraySingleString..............................................................................................34\n  2.5                 Member Reference Records...........................................................................................34\n   2.5.1                 MemberPrimitiveTyped............................................................................................34\n   2.5.2                   MemberPrimitiveUnTyped....................................................................................... 35\n   2.5.3              MemberReference................................................................................................... 35\n   2.5.4       ObjectNull................................................................................................................36\n   2.5.5           ObjectNullMultiple................................................................................................... 36\n   2.5.6              ObjectNullMultiple256............................................................................................. 36\n   2.5.7             BinaryObjectString..................................................................................................37\n  2.6       Other Records................................................................................................................37\n   2.6.1                 SerializationHeaderRecord...................................................................................... 37\n   2.6.2        BinaryLibrary........................................................................................................... 38\n   2.6.3          MessageEnd............................................................................................................ 39\n  2.7               Binary Record Grammar................................................................................................39\n\n3  Structure Examples...........................................................................................40\n\n4  Security Considerations.....................................................................................44\n\n5  Appendix A: Product Behavior........................................................................... 45\n\n6  Change Tracking...............................................................................................47\n\n7  Index................................................................................................................48\n\n\n                                           6 / 55\n[MS-NRBF] - v20190313\n.NET Remoting: Binary Format Data Structure\nCopyright © 2019 Microsoft Corporation\nRelease: March 13, 2019",
      "md": "\n# .NET Remoting: Binary Format Data Structure\n\nCopyright © 2019 Microsoft Corporation\n\nRelease: March 13, 2019\n\n# 2.4 Array Records\n\n# 2.4.1 Enumerations\n\n# 2.4.1.1 BinaryArrayTypeEnumeration\n\n# 2.4.2 Common Definitions\n\n# 2.4.2.1 ArrayInfo\n\n# 2.4.3 Record Definitions\n\n# 2.4.3.1 BinaryArray\n\n# 2.4.3.2 ArraySingleObject\n\n# 2.4.3.3 ArraySinglePrimitive\n\n# 2.4.3.4 ArraySingleString\n\n# 2.5 Member Reference Records\n\n# 2.5.1 MemberPrimitiveTyped\n\n# 2.5.2 MemberPrimitiveUnTyped\n\n# 2.5.3 MemberReference\n\n# 2.5.4 ObjectNull\n\n# 2.5.5 ObjectNullMultiple\n\n# 2.5.6 ObjectNullMultiple256\n\n# 2.5.7 BinaryObjectString\n\n# 2.6 Other Records\n\n# 2.6.1 SerializationHeaderRecord\n\n# 2.6.2 BinaryLibrary\n\n# 2.6.3 MessageEnd\n\n# 2.7 Binary Record Grammar\n\n# 3 Structure Examples\n\n# 4 Security Considerations\n\n# 5 Appendix A: Product Behavior\n\n# 6 Change Tracking\n\n# 7 Index\n\n6 / 55\n\n",
      "images": [
      ],
      "charts": [
      ],
      "items": [
        {
          "type": "heading",
          "lvl": 1,
          "value": ".NET Remoting: Binary Format Data Structure",
          "md": "# .NET Remoting: Binary Format Data Structure",
          "bBox": {
            "x": 72.1,
            "y": 724.35,
            "w": 182.82,
            "h": 8
          }
        },
        {
          "type": "text",
          "value": "Copyright © 2019 Microsoft Corporation\n\nRelease: March 13, 2019",
          "md": "Copyright © 2019 Microsoft Corporation\n\nRelease: March 13, 2019",
          "bBox": {
            "x": 72.1,
            "y": 344.05,
            "w": 161.18,
            "h": 410.1
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "2.4 Array Records",
          "md": "# 2.4 Array Records",
          "bBox": {
            "x": 72.1,
            "y": 55.15,
            "w": 23.35,
            "h": 316.2
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "2.4.1 Enumerations",
          "md": "# 2.4.1 Enumerations",
          "bBox": {
            "x": 72.1,
            "y": 55.15,
            "w": 41,
            "h": 316.2
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "2.4.1.1 BinaryArrayTypeEnumeration",
          "md": "# 2.4.1.1 BinaryArrayTypeEnumeration",
          "bBox": {
            "x": 72.1,
            "y": 55.15,
            "w": 58.35,
            "h": 316.2
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "2.4.2 Common Definitions",
          "md": "# 2.4.2 Common Definitions",
          "bBox": {
            "x": 72.1,
            "y": 55.15,
            "w": 41,
            "h": 316.2
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "2.4.2.1 ArrayInfo",
          "md": "# 2.4.2.1 ArrayInfo",
          "bBox": {
            "x": 72.1,
            "y": 55.15,
            "w": 58.35,
            "h": 316.2
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "2.4.3 Record Definitions",
          "md": "# 2.4.3 Record Definitions",
          "bBox": {
            "x": 72.1,
            "y": 55.15,
            "w": 41,
            "h": 316.2
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "2.4.3.1 BinaryArray",
          "md": "# 2.4.3.1 BinaryArray",
          "bBox": {
            "x": 72.1,
            "y": 55.15,
            "w": 58.35,
            "h": 316.2
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "2.4.3.2 ArraySingleObject",
          "md": "# 2.4.3.2 ArraySingleObject",
          "bBox": {
            "x": 72.1,
            "y": 55.15,
            "w": 58.35,
            "h": 316.2
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "2.4.3.3 ArraySinglePrimitive",
          "md": "# 2.4.3.3 ArraySinglePrimitive",
          "bBox": {
            "x": 72.1,
            "y": 55.15,
            "w": 58.35,
            "h": 316.2
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "2.4.3.4 ArraySingleString",
          "md": "# 2.4.3.4 ArraySingleString",
          "bBox": {
            "x": 72.1,
            "y": 55.15,
            "w": 58.35,
            "h": 316.2
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "2.5 Member Reference Records",
          "md": "# 2.5 Member Reference Records",
          "bBox": {
            "x": 72.1,
            "y": 178.15,
            "w": 23.35,
            "h": 211.5
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "2.5.1 MemberPrimitiveTyped",
          "md": "# 2.5.1 MemberPrimitiveTyped",
          "bBox": {
            "x": 72.1,
            "y": 178.15,
            "w": 41,
            "h": 211.5
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "2.5.2 MemberPrimitiveUnTyped",
          "md": "# 2.5.2 MemberPrimitiveUnTyped",
          "bBox": {
            "x": 72.1,
            "y": 178.15,
            "w": 41,
            "h": 211.5
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "2.5.3 MemberReference",
          "md": "# 2.5.3 MemberReference",
          "bBox": {
            "x": 72.1,
            "y": 178.15,
            "w": 41,
            "h": 211.5
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "2.5.4 ObjectNull",
          "md": "# 2.5.4 ObjectNull",
          "bBox": {
            "x": 72.1,
            "y": 178.15,
            "w": 41,
            "h": 211.5
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "2.5.5 ObjectNullMultiple",
          "md": "# 2.5.5 ObjectNullMultiple",
          "bBox": {
            "x": 72.1,
            "y": 178.15,
            "w": 41,
            "h": 211.5
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "2.5.6 ObjectNullMultiple256",
          "md": "# 2.5.6 ObjectNullMultiple256",
          "bBox": {
            "x": 72.1,
            "y": 178.15,
            "w": 41,
            "h": 229.8
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "2.5.7 BinaryObjectString",
          "md": "# 2.5.7 BinaryObjectString",
          "bBox": {
            "x": 72.1,
            "y": 178.15,
            "w": 41,
            "h": 248.1
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "2.6 Other Records",
          "md": "# 2.6 Other Records",
          "bBox": {
            "x": 72.1,
            "y": 276.55,
            "w": 23.35,
            "h": 131.4
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "2.6.1 SerializationHeaderRecord",
          "md": "# 2.6.1 SerializationHeaderRecord",
          "bBox": {
            "x": 72.1,
            "y": 276.55,
            "w": 41,
            "h": 131.4
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "2.6.2 BinaryLibrary",
          "md": "# 2.6.2 BinaryLibrary",
          "bBox": {
            "x": 72.1,
            "y": 276.55,
            "w": 41,
            "h": 131.4
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "2.6.3 MessageEnd",
          "md": "# 2.6.3 MessageEnd",
          "bBox": {
            "x": 72.1,
            "y": 276.55,
            "w": 41,
            "h": 131.4
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "2.7 Binary Record Grammar",
          "md": "# 2.7 Binary Record Grammar",
          "bBox": {
            "x": 72.1,
            "y": 325.75,
            "w": 23.35,
            "h": 100.5
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "3 Structure Examples",
          "md": "# 3 Structure Examples",
          "bBox": {
            "x": 72.1,
            "y": 344.05,
            "w": 6,
            "h": 9
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "4 Security Considerations",
          "md": "# 4 Security Considerations",
          "bBox": {
            "x": 72.1,
            "y": 362.35,
            "w": 6,
            "h": 9
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "5 Appendix A: Product Behavior",
          "md": "# 5 Appendix A: Product Behavior",
          "bBox": {
            "x": 72.1,
            "y": 380.65,
            "w": 6,
            "h": 9
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "6 Change Tracking",
          "md": "# 6 Change Tracking",
          "bBox": {
            "x": 72.1,
            "y": 398.95,
            "w": 6,
            "h": 9
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "7 Index",
          "md": "# 7 Index",
          "bBox": {
            "x": 72.1,
            "y": 417.25,
            "w": 6,
            "h": 9
          }
        },
        {
          "type": "text",
          "value": "6 / 55",
          "md": "6 / 55",
          "bBox": {
            "x": 72.1,
            "y": 380.65,
            "w": 467.9,
            "h": 323.9
          }
        }
      ],
      "status": "OK",
      "originalOrientationAngle": 0,
      "links": [
      ],
      "width": 612,
      "height": 792,
      "triggeredAutoMode": false,
      "parsingMode": "accurate",
      "structuredData": null,
      "noStructuredContent": false,
      "noTextContent": false,
      "pageHeaderMarkdown": "\n# .NET Remoting: Binary Format Data Structure\n\nCopyright © 2019 Microsoft Corporation\n\nRelease: March 13, 2019\n\n",
      "pageFooterMarkdown": "\n6 / 55\n\n",
      "confidence": 0.867
    },
    {
      "page": 7,
      "text": "1    Introduction\n\nThe .NET Remoting: Binary Format Data Structure defines a set of structures that represent object\ngraph or method invocation information as an octet stream. One possible application of the structure\nis as the serialization format for the data model as specified in [MS-NRTP] section 3.1.1.\n\nSections 1.7 and 2 of this specification are normative. All other sections and examples in this\nspecification are informative.\n\n1.1  Glossary\n\nThis document uses the following terms:\n\n  argument: A named Data Value that is passed as part of a Remote Method invocation or\n     returned as part of the results of a Remote Method invocation. For more information about\n     Remote Method invocation, see [MS-NRTP] section 3.1.1.\n\n  array: A Remoting Type that is an ordered collection of values. The values are identified by their\n     position and position is determined by a set of integer indices. The number of indices required to\n     represent the position is called the Rank of the Array. An Array is part of the Remoting Data\n     Model and also specifies the Remoting Type of its items. For more information, [MS-NRTP]\n     section 3.1.1.\n\n  Call Context: A mechanism to pass data that is not part of the method Arguments between client\n     and server. It is a collection of name-value pairs that is carried with the execution of a Remote\n     Method. This collection is sent along with other method Arguments from client to server, and\n     is transmitted back, along with the Return Values and output Arguments, from the server to\n     the client. For more information, see [MS-NRTP] section 1.3.\n\n  class: (1) A Remoting Type that encapsulates a set of named values and a set of methods that\n     operate on those values. The named values are called Members of the Class. A Class is part of\n     the Remoting Data Model. For more information, see [MS-NRTP] section 3.1.1.\n\n     (2) See System.Object.\n\n  Class Metadata: Information about a Class that includes the Class name, its Library name, and the\n     names and Remoting Types of its Members.\n\n  Coordinated Universal Time (UTC): A high-precision atomic time standard that approximately\n     tracks Universal Time (UT). It is the basis for legal, civil time all over the Earth. Time zones\n     around the world are expressed as positive and negative offsets from UTC. In this role, it is also\n     referred to as Zulu time (Z) and Greenwich Mean Time (GMT). In these specifications, all\n     references to UTC refer to the time at UTC-0 (or GMT).\n\n  data value: An instance of a Remoting Type, which may be a Class, Array, Enum, or Primitive.\n     A Data Value is part of the Remoting Data Model. For more information, see [MS-NRTP]\n     section 3.1.1.\n\n  deserialize: See unmarshal.\n\n  Enum: A Primitive type whose members are constrained to a set of values. The Primitive type is\n     considered to be an underlying Remoting Type of the Enum. Each value has a name\n\n                                                                                                     7 / 55\n[MS-NRBF] - v20190313\n.NET Remoting: Binary Format Data Structure\nCopyright © 2019 Microsoft Corporation\nRelease: March 13, 2019",
      "md": "\n1    Introduction\n\nThe .NET Remoting: Binary Format Data Structure defines a set of structures that represent object graph or method invocation information as an octet stream. One possible application of the structure is as the serialization format for the data model as specified in [MS-NRTP] section 3.1.1.\n\nSections 1.7 and 2 of this specification are normative. All other sections and examples in this specification are informative.\n\n# 1.1  Glossary\n\nThis document uses the following terms:\n\n- argument: A named Data Value that is passed as part of a Remote Method invocation or returned as part of the results of a Remote Method invocation. For more information about Remote Method invocation, see [MS-NRTP] section 3.1.1.\n- array: A Remoting Type that is an ordered collection of values. The values are identified by their position and position is determined by a set of integer indices. The number of indices required to represent the position is called the Rank of the Array. An Array is part of the Remoting Data Model and also specifies the Remoting Type of its items. For more information, [MS-NRTP] section 3.1.1.\n- Call Context: A mechanism to pass data that is not part of the method Arguments between client and server. It is a collection of name-value pairs that is carried with the execution of a Remote Method. This collection is sent along with other method Arguments from client to server, and is transmitted back, along with the Return Values and output Arguments, from the server to the client. For more information, see [MS-NRTP] section 1.3.\n- class: (1) A Remoting Type that encapsulates a set of named values and a set of methods that operate on those values. The named values are called Members of the Class. A Class is part of the Remoting Data Model. For more information, see [MS-NRTP] section 3.1.1. (2) See System.Object.\n- Class Metadata: Information about a Class that includes the Class name, its Library name, and the names and Remoting Types of its Members.\n- Coordinated Universal Time (UTC): A high-precision atomic time standard that approximately tracks Universal Time (UT). It is the basis for legal, civil time all over the Earth. Time zones around the world are expressed as positive and negative offsets from UTC. In this role, it is also referred to as Zulu time (Z) and Greenwich Mean Time (GMT). In these specifications, all references to UTC refer to the time at UTC-0 (or GMT).\n- data value: An instance of a Remoting Type, which may be a Class, Array, Enum, or Primitive. A Data Value is part of the Remoting Data Model. For more information, see [MS-NRTP] section 3.1.1.\n- deserialize: See unmarshal.\n- Enum: A Primitive type whose members are constrained to a set of values. The Primitive type is considered to be an underlying Remoting Type of the Enum. Each value has a name.\n\n7 / 55\n[MS-NRBF] - v20190313\n.NET Remoting: Binary Format Data Structure\nCopyright © 2019 Microsoft Corporation\nRelease: March 13, 2019\n",
      "images": [
      ],
      "charts": [
      ],
      "items": [
        {
          "type": "text",
          "value": "1    Introduction\n\nThe .NET Remoting: Binary Format Data Structure defines a set of structures that represent object graph or method invocation information as an octet stream. One possible application of the structure is as the serialization format for the data model as specified in [MS-NRTP] section 3.1.1.\n\nSections 1.7 and 2 of this specification are normative. All other sections and examples in this specification are informative.",
          "md": "1    Introduction\n\nThe .NET Remoting: Binary Format Data Structure defines a set of structures that represent object graph or method invocation information as an octet stream. One possible application of the structure is as the serialization format for the data model as specified in [MS-NRTP] section 3.1.1.\n\nSections 1.7 and 2 of this specification are normative. All other sections and examples in this specification are informative.",
          "bBox": {
            "x": 72.1,
            "y": 62.55,
            "w": 460.63,
            "h": 669.8
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "1.1  Glossary",
          "md": "# 1.1  Glossary",
          "bBox": {
            "x": 72.1,
            "y": 62.55,
            "w": 75.8,
            "h": 121.65
          }
        },
        {
          "type": "text",
          "value": "This document uses the following terms:\n\n- argument: A named Data Value that is passed as part of a Remote Method invocation or returned as part of the results of a Remote Method invocation. For more information about Remote Method invocation, see [MS-NRTP] section 3.1.1.\n- array: A Remoting Type that is an ordered collection of values. The values are identified by their position and position is determined by a set of integer indices. The number of indices required to represent the position is called the Rank of the Array. An Array is part of the Remoting Data Model and also specifies the Remoting Type of its items. For more information, [MS-NRTP] section 3.1.1.\n- Call Context: A mechanism to pass data that is not part of the method Arguments between client and server. It is a collection of name-value pairs that is carried with the execution of a Remote Method. This collection is sent along with other method Arguments from client to server, and is transmitted back, along with the Return Values and output Arguments, from the server to the client. For more information, see [MS-NRTP] section 1.3.\n- class: (1) A Remoting Type that encapsulates a set of named values and a set of methods that operate on those values. The named values are called Members of the Class. A Class is part of the Remoting Data Model. For more information, see [MS-NRTP] section 3.1.1. (2) See System.Object.\n- Class Metadata: Information about a Class that includes the Class name, its Library name, and the names and Remoting Types of its Members.\n- Coordinated Universal Time (UTC): A high-precision atomic time standard that approximately tracks Universal Time (UT). It is the basis for legal, civil time all over the Earth. Time zones around the world are expressed as positive and negative offsets from UTC. In this role, it is also referred to as Zulu time (Z) and Greenwich Mean Time (GMT). In these specifications, all references to UTC refer to the time at UTC-0 (or GMT).\n- data value: An instance of a Remoting Type, which may be a Class, Array, Enum, or Primitive. A Data Value is part of the Remoting Data Model. For more information, see [MS-NRTP] section 3.1.1.\n- deserialize: See unmarshal.\n- Enum: A Primitive type whose members are constrained to a set of values. The Primitive type is considered to be an underlying Remoting Type of the Enum. Each value has a name.\n\n7 / 55\n[MS-NRBF] - v20190313\n.NET Remoting: Binary Format Data Structure\nCopyright © 2019 Microsoft Corporation\nRelease: March 13, 2019",
          "md": "This document uses the following terms:\n\n- argument: A named Data Value that is passed as part of a Remote Method invocation or returned as part of the results of a Remote Method invocation. For more information about Remote Method invocation, see [MS-NRTP] section 3.1.1.\n- array: A Remoting Type that is an ordered collection of values. The values are identified by their position and position is determined by a set of integer indices. The number of indices required to represent the position is called the Rank of the Array. An Array is part of the Remoting Data Model and also specifies the Remoting Type of its items. For more information, [MS-NRTP] section 3.1.1.\n- Call Context: A mechanism to pass data that is not part of the method Arguments between client and server. It is a collection of name-value pairs that is carried with the execution of a Remote Method. This collection is sent along with other method Arguments from client to server, and is transmitted back, along with the Return Values and output Arguments, from the server to the client. For more information, see [MS-NRTP] section 1.3.\n- class: (1) A Remoting Type that encapsulates a set of named values and a set of methods that operate on those values. The named values are called Members of the Class. A Class is part of the Remoting Data Model. For more information, see [MS-NRTP] section 3.1.1. (2) See System.Object.\n- Class Metadata: Information about a Class that includes the Class name, its Library name, and the names and Remoting Types of its Members.\n- Coordinated Universal Time (UTC): A high-precision atomic time standard that approximately tracks Universal Time (UT). It is the basis for legal, civil time all over the Earth. Time zones around the world are expressed as positive and negative offsets from UTC. In this role, it is also referred to as Zulu time (Z) and Greenwich Mean Time (GMT). In these specifications, all references to UTC refer to the time at UTC-0 (or GMT).\n- data value: An instance of a Remoting Type, which may be a Class, Array, Enum, or Primitive. A Data Value is part of the Remoting Data Model. For more information, see [MS-NRTP] section 3.1.1.\n- deserialize: See unmarshal.\n- Enum: A Primitive type whose members are constrained to a set of values. The Primitive type is considered to be an underlying Remoting Type of the Enum. Each value has a name.\n\n7 / 55\n[MS-NRBF] - v20190313\n.NET Remoting: Binary Format Data Structure\nCopyright © 2019 Microsoft Corporation\nRelease: March 13, 2019",
          "bBox": {
            "x": 72.1,
            "y": 62.55,
            "w": 467.9,
            "h": 691.6
          }
        }
      ],
      "status": "OK",
      "originalOrientationAngle": 0,
      "links": [
        {
          "unsafeUrl": "../../../../../../../upload/%5BMS-NRTP%5D.pdf#Section_3acb31b0b8734aaf85039727ec40fbec",
          "text": "[MS-NRTP]"
        },
        {
          "unsafeUrl": "../../../../../../../upload/%5BMS-NRTP%5D.pdf#Section_3acb31b0b8734aaf85039727ec40fbec",
          "text": "[MS-NRTP]"
        }
      ],
      "width": 612,
      "height": 792,
      "triggeredAutoMode": false,
      "parsingMode": "accurate",
      "structuredData": null,
      "noStructuredContent": false,
      "noTextContent": false,
      "pageHeaderMarkdown": "\n1    Introduction\n",
      "pageFooterMarkdown": "\n7 / 55\n[MS-NRBF] - v20190313\n.NET Remoting: Binary Format Data Structure\nCopyright © 2019 Microsoft Corporation\nRelease: March 13, 2019\n",
      "confidence": 0.999
    },
    {
      "page": 8,
      "text": " associated with it. An Enum is part of the Remoting Data Model, and an abbreviation for\n \"enumeration.\" For more information, see [MS-NRTP] section 3.1.1.\n\nException: A Class that indicates an error in the execution of a Remote Method. It is sent as part\n of the return message from a server to a client. An Exception contains a human-readable\n message that indicates what the error is, and can also have additional data to identify the error.\n An Exception is part of the Remoting Data Model. For more information, see [MS-NRTP]\n section 3.1.1.\n\nGeneric Argument: A formal argument used in a Generic Type or a Generic Remote Method\n to represent a parameterized Remoting Type. Generic Arguments can be referenced in the\n Class or the method as opaque Remoting Types. They are replaced by the actual types when\n the Class or the method is used. For more information, see Generic Type and Methods in\n [ECMA-335].\n\nGeneric Remote Method: A Remote Method that is parameterized by one or more Remoting\n Types. The method caller must provide the actual Remoting Types (in addition to the Input\n Arguments). For more information, see [MS-NRTP] section 3.1.1.\n\nGeneric Type: A Class, Server Type, or Server Interface that is parameterized by one or more\n Remoting Types. A Generic Type contains GenericArguments as a placeholder for the\n parameterized Remoting Types. A Generic Type cannot have any instances. For more\n information, see Generic Types and Methods in [ECMA-335].\n\nInput Argument: A named Data Value that is passed as part of a Remote Method invocation\n from the client to the server. For more information, see Remote Method in the Abstract Data\n Model (section 3.1.1).\n\nLibrary: Part of the Remoting Data Model. A Library is a named unit that contains a collection of\n Remoting Types. For more information, see Library in [MS-NRTP] section 3.1.1.\n\nlittle-endian: Multiple-byte values that are byte-ordered with the least significant byte stored in\n the memory location with the lowest address.\n\nlocal time zone: The time zone in which the computer running the implementation is configured.\n\nlogical call ID: An optional string value that identifies the logical thread of execution. This value is\n passed as part of the Call Context and can be used in implementation-specific local threading\n models on the server.\n\nmember: See Class.\n\nmessage content: The serialized body of a message.\n\nMessage Properties: A collection of implementation-specific, name-value pairs that are\n transmitted as part of a Remote Method invocation. Message Properties are used to\n exchange implementation-specific data between clients and servers.\n\nmethod signature: A list of the remoting types of the arguments of a remote method.\n\nNull Object: Part of the Remoting Data Model. Null Object is a special value that can be used in\n place of an instance of a Class, Array, or String. It indicates that no instance is being specified.\n For more information, see [MS-NRTP] section 3.1.1.\n\n\n                                           8 / 55\n[MS-NRBF] - v20190313\n.NET Remoting: Binary Format Data Structure\nCopyright © 2019 Microsoft Corporation\nRelease: March 13, 2019",
      "md": "\n# .NET Remoting: Binary Format Data Structure\n\nassociated with it. An Enum is part of the Remoting Data Model, and an abbreviation for \"enumeration.\" For more information, see [MS-NRTP] section 3.1.1.\n\nException: A Class that indicates an error in the execution of a Remote Method. It is sent as part of the return message from a server to a client. An Exception contains a human-readable message that indicates what the error is, and can also have additional data to identify the error. An Exception is part of the Remoting Data Model. For more information, see [MS-NRTP] section 3.1.1.\n\nGeneric Argument: A formal argument used in a Generic Type or a Generic Remote Method to represent a parameterized Remoting Type. Generic Arguments can be referenced in the Class or the method as opaque Remoting Types. They are replaced by the actual types when the Class or the method is used. For more information, see Generic Type and Methods in [ECMA-335].\n\nGeneric Remote Method: A Remote Method that is parameterized by one or more Remoting Types. The method caller must provide the actual Remoting Types (in addition to the Input Arguments). For more information, see [MS-NRTP] section 3.1.1.\n\nGeneric Type: A Class, Server Type, or Server Interface that is parameterized by one or more Remoting Types. A Generic Type contains GenericArguments as a placeholder for the parameterized Remoting Types. A Generic Type cannot have any instances. For more information, see Generic Types and Methods in [ECMA-335].\n\nInput Argument: A named Data Value that is passed as part of a Remote Method invocation from the client to the server. For more information, see Remote Method in the Abstract Data Model (section 3.1.1).\n\nLibrary: Part of the Remoting Data Model. A Library is a named unit that contains a collection of Remoting Types. For more information, see Library in [MS-NRTP] section 3.1.1.\n\nlittle-endian: Multiple-byte values that are byte-ordered with the least significant byte stored in the memory location with the lowest address.\n\nlocal time zone: The time zone in which the computer running the implementation is configured.\n\nlogical call ID: An optional string value that identifies the logical thread of execution. This value is passed as part of the Call Context and can be used in implementation-specific local threading models on the server.\n\nmember: See Class.\n\nmessage content: The serialized body of a message.\n\nMessage Properties: A collection of implementation-specific, name-value pairs that are transmitted as part of a Remote Method invocation. Message Properties are used to exchange implementation-specific data between clients and servers.\n\nmethod signature: A list of the remoting types of the arguments of a remote method.\n\nNull Object: Part of the Remoting Data Model. Null Object is a special value that can be used in place of an instance of a Class, Array, or String. It indicates that no instance is being specified. For more information, see [MS-NRTP] section 3.1.1.\n\n8 / 55\n\nCopyright © 2019 Microsoft Corporation\n\nRelease: March 13, 2019\n\n",
      "images": [
      ],
      "charts": [
      ],
      "items": [
        {
          "type": "heading",
          "lvl": 1,
          "value": ".NET Remoting: Binary Format Data Structure",
          "md": "# .NET Remoting: Binary Format Data Structure",
          "bBox": {
            "x": 72.1,
            "y": 724.35,
            "w": 182.82,
            "h": 8
          }
        },
        {
          "type": "text",
          "value": "associated with it. An Enum is part of the Remoting Data Model, and an abbreviation for \"enumeration.\" For more information, see [MS-NRTP] section 3.1.1.\n\nException: A Class that indicates an error in the execution of a Remote Method. It is sent as part of the return message from a server to a client. An Exception contains a human-readable message that indicates what the error is, and can also have additional data to identify the error. An Exception is part of the Remoting Data Model. For more information, see [MS-NRTP] section 3.1.1.\n\nGeneric Argument: A formal argument used in a Generic Type or a Generic Remote Method to represent a parameterized Remoting Type. Generic Arguments can be referenced in the Class or the method as opaque Remoting Types. They are replaced by the actual types when the Class or the method is used. For more information, see Generic Type and Methods in [ECMA-335].\n\nGeneric Remote Method: A Remote Method that is parameterized by one or more Remoting Types. The method caller must provide the actual Remoting Types (in addition to the Input Arguments). For more information, see [MS-NRTP] section 3.1.1.\n\nGeneric Type: A Class, Server Type, or Server Interface that is parameterized by one or more Remoting Types. A Generic Type contains GenericArguments as a placeholder for the parameterized Remoting Types. A Generic Type cannot have any instances. For more information, see Generic Types and Methods in [ECMA-335].\n\nInput Argument: A named Data Value that is passed as part of a Remote Method invocation from the client to the server. For more information, see Remote Method in the Abstract Data Model (section 3.1.1).\n\nLibrary: Part of the Remoting Data Model. A Library is a named unit that contains a collection of Remoting Types. For more information, see Library in [MS-NRTP] section 3.1.1.\n\nlittle-endian: Multiple-byte values that are byte-ordered with the least significant byte stored in the memory location with the lowest address.\n\nlocal time zone: The time zone in which the computer running the implementation is configured.\n\nlogical call ID: An optional string value that identifies the logical thread of execution. This value is passed as part of the Call Context and can be used in implementation-specific local threading models on the server.\n\nmember: See Class.\n\nmessage content: The serialized body of a message.\n\nMessage Properties: A collection of implementation-specific, name-value pairs that are transmitted as part of a Remote Method invocation. Message Properties are used to exchange implementation-specific data between clients and servers.\n\nmethod signature: A list of the remoting types of the arguments of a remote method.\n\nNull Object: Part of the Remoting Data Model. Null Object is a special value that can be used in place of an instance of a Class, Array, or String. It indicates that no instance is being specified. For more information, see [MS-NRTP] section 3.1.1.\n\n8 / 55\n\nCopyright © 2019 Microsoft Corporation\n\nRelease: March 13, 2019",
          "md": "associated with it. An Enum is part of the Remoting Data Model, and an abbreviation for \"enumeration.\" For more information, see [MS-NRTP] section 3.1.1.\n\nException: A Class that indicates an error in the execution of a Remote Method. It is sent as part of the return message from a server to a client. An Exception contains a human-readable message that indicates what the error is, and can also have additional data to identify the error. An Exception is part of the Remoting Data Model. For more information, see [MS-NRTP] section 3.1.1.\n\nGeneric Argument: A formal argument used in a Generic Type or a Generic Remote Method to represent a parameterized Remoting Type. Generic Arguments can be referenced in the Class or the method as opaque Remoting Types. They are replaced by the actual types when the Class or the method is used. For more information, see Generic Type and Methods in [ECMA-335].\n\nGeneric Remote Method: A Remote Method that is parameterized by one or more Remoting Types. The method caller must provide the actual Remoting Types (in addition to the Input Arguments). For more information, see [MS-NRTP] section 3.1.1.\n\nGeneric Type: A Class, Server Type, or Server Interface that is parameterized by one or more Remoting Types. A Generic Type contains GenericArguments as a placeholder for the parameterized Remoting Types. A Generic Type cannot have any instances. For more information, see Generic Types and Methods in [ECMA-335].\n\nInput Argument: A named Data Value that is passed as part of a Remote Method invocation from the client to the server. For more information, see Remote Method in the Abstract Data Model (section 3.1.1).\n\nLibrary: Part of the Remoting Data Model. A Library is a named unit that contains a collection of Remoting Types. For more information, see Library in [MS-NRTP] section 3.1.1.\n\nlittle-endian: Multiple-byte values that are byte-ordered with the least significant byte stored in the memory location with the lowest address.\n\nlocal time zone: The time zone in which the computer running the implementation is configured.\n\nlogical call ID: An optional string value that identifies the logical thread of execution. This value is passed as part of the Call Context and can be used in implementation-specific local threading models on the server.\n\nmember: See Class.\n\nmessage content: The serialized body of a message.\n\nMessage Properties: A collection of implementation-specific, name-value pairs that are transmitted as part of a Remote Method invocation. Message Properties are used to exchange implementation-specific data between clients and servers.\n\nmethod signature: A list of the remoting types of the arguments of a remote method.\n\nNull Object: Part of the Remoting Data Model. Null Object is a special value that can be used in place of an instance of a Class, Array, or String. It indicates that no instance is being specified. For more information, see [MS-NRTP] section 3.1.1.\n\n8 / 55\n\nCopyright © 2019 Microsoft Corporation\n\nRelease: March 13, 2019",
          "bBox": {
            "x": 72.1,
            "y": 55.15,
            "w": 467.9,
            "h": 699
          }
        }
      ],
      "status": "OK",
      "originalOrientationAngle": 0,
      "links": [
        {
          "url": "https://go.microsoft.com/fwlink/?LinkId=93453",
          "unsafeUrl": "https://go.microsoft.com/fwlink/?LinkId=93453",
          "text": "[ECMA-335] ."
        }
      ],
      "width": 612,
      "height": 792,
      "triggeredAutoMode": false,
      "parsingMode": "accurate",
      "structuredData": null,
      "noStructuredContent": false,
      "noTextContent": false,
      "pageHeaderMarkdown": "\n# .NET Remoting: Binary Format Data Structure\n\n",
      "pageFooterMarkdown": "\n8 / 55\n\nCopyright © 2019 Microsoft Corporation\n\nRelease: March 13, 2019\n\n",
      "confidence": 0.993
    },
    {
      "page": 9,
      "text": " object graph: In object-oriented programming, groups of interrelated objects that form a network\n  through often complex relationships with each other are known as an object graph. In an object\n  graph, objects can be linked to each other by a specific object, by owning or containing another\n  object, or by holding a reference to another object. Such an abstract structure can be used to\n  represent the state of an application.\n\n Output Argument: A named Data Value that is returned as part of the results of a Remote\n  Method invocation. For more information, see Remote Method in Abstract Data Model (section\n  3.1.1).\n\n Primitive Type: Part of the Remoting Data Model. Primitive Types are predefined Remoting\n  Types such as Byte, Int16, Int32, Int64, and so on. For more information, see [MS-NRTP] section\n  3.1.1\n\n Primitive Value: Part of the Remoting Data Model. A Primitive Value is an instance of a\n  Primitive Type.\n\n record: A variable-length sequence of bytes with a predefined structure.\n\n Remote Method: Part of the Remoting Data Model. A Remote Method is a remotely callable\n  operation. A Remote Method can either be One-Way or Two-Way. In the case of a One-Way\n  Method, there is no reply from the implementation. For more information, see [MS-NRTP] section\n  3.1.1\n\n Remoting Data Model: A model that is used to represent higher-layer–defined data structures and\n  values, and to represent a Remote Method invocation and the Return Value or error\n  information from that invocation. A protocol, such as [MS-NRLS], that is built on top of this\n  protocol can be defined by using the Remoting Data Model, and can be agnostic to the\n  serialization format. For more information, see Abstract Data Model (section 3.1.1).\n\n Remoting Type: Part of the Remoting Data Model. Class, Array, Enum, and Primitive are\n  different kinds of Remoting Types. All Remoting Types are identified by a name that is case\n  sensitive. For more information, see [MS-NRTP] section 3.1.1\n\n Return Value: A Data Value that is returned as part of the results of a Remote Method\n  invocation. For more information, see Remote Method in Abstract Data Model (section 3.1.1).\n\n serialization: A mechanism by which an application converts an object into an XML representation.\n\n Serialization Format: The structure of the serialized message content, which can be either binary\n  or SOAP. Binary serialization format is specified in [MS-NRBF]. SOAP serialization format is\n  specified in [MS-NRTP].\n\n Serialization Stream: An octet stream that contains a sequence of records defined in this\n  document.\n\n serialize: The process of taking an in-memory data structure, flat or otherwise, and turning it into a\n  flat stream of bytes. See also marshal.\n\n Server Type: Part of the Remoting Data Model. A Server Type contains Remote Methods.\n\n System Library: A specially designated library that can be used to reduce the wire size for\n  commonly used data types. The name of the library is agreed to by both the server and the\n  client.\n\n                                                                                               9 / 55\n[MS-NRBF] - v20190313\n.NET Remoting: Binary Format Data Structure\nCopyright © 2019 Microsoft Corporation\nRelease: March 13, 2019",
      "md": "\n# .NET Remoting: Binary Format Data Structure\n\nobject graph: In object-oriented programming, groups of interrelated objects that form a network through often complex relationships with each other are known as an object graph. In an object graph, objects can be linked to each other by a specific object, by owning or containing another object, or by holding a reference to another object. Such an abstract structure can be used to represent the state of an application.\n\n# Output Argument\n\nA named Data Value that is returned as part of the results of a Remote Method invocation. For more information, see Remote Method in Abstract Data Model (section 3.1.1).\n\n# Primitive Type\n\nPart of the Remoting Data Model. Primitive Types are predefined Remoting Types such as Byte, Int16, Int32, Int64, and so on. For more information, see [MS-NRTP] section 3.1.1\n\n# Primitive Value\n\nPart of the Remoting Data Model. A Primitive Value is an instance of a Primitive Type.\n\n# record\n\nA variable-length sequence of bytes with a predefined structure.\n\n# Remote Method\n\nPart of the Remoting Data Model. A Remote Method is a remotely callable operation. A Remote Method can either be One-Way or Two-Way. In the case of a One-Way Method, there is no reply from the implementation. For more information, see [MS-NRTP] section 3.1.1\n\n# Remoting Data Model\n\nA model that is used to represent higher-layer–defined data structures and values, and to represent a Remote Method invocation and the Return Value or error information from that invocation. A protocol, such as [MS-NRLS], that is built on top of this protocol can be defined by using the Remoting Data Model, and can be agnostic to the serialization format. For more information, see Abstract Data Model (section 3.1.1).\n\n# Remoting Type\n\nPart of the Remoting Data Model. Class, Array, Enum, and Primitive are different kinds of Remoting Types. All Remoting Types are identified by a name that is case sensitive. For more information, see [MS-NRTP] section 3.1.1\n\n# Return Value\n\nA Data Value that is returned as part of the results of a Remote Method invocation. For more information, see Remote Method in Abstract Data Model (section 3.1.1).\n\n# serialization\n\nA mechanism by which an application converts an object into an XML representation.\n\n# Serialization Format\n\nThe structure of the serialized message content, which can be either binary or SOAP. Binary serialization format is specified in [MS-NRBF]. SOAP serialization format is specified in [MS-NRTP].\n\n# Serialization Stream\n\nAn octet stream that contains a sequence of records defined in this document.\n\n# serialize\n\nThe process of taking an in-memory data structure, flat or otherwise, and turning it into a flat stream of bytes. See also marshal.\n\n# Server Type\n\nPart of the Remoting Data Model. A Server Type contains Remote Methods.\n\n# System Library\n\nA specially designated library that can be used to reduce the wire size for commonly used data types. The name of the library is agreed to by both the server and the client.\n\nCopyright © 2019 Microsoft Corporation\n\nRelease: March 13, 2019\n\n[MS-NRBF] - v20190313\n\n",
      "images": [
      ],
      "charts": [
      ],
      "items": [
        {
          "type": "heading",
          "lvl": 1,
          "value": ".NET Remoting: Binary Format Data Structure",
          "md": "# .NET Remoting: Binary Format Data Structure",
          "bBox": {
            "x": 72.1,
            "y": 724.35,
            "w": 182.82,
            "h": 8
          }
        },
        {
          "type": "text",
          "value": "object graph: In object-oriented programming, groups of interrelated objects that form a network through often complex relationships with each other are known as an object graph. In an object graph, objects can be linked to each other by a specific object, by owning or containing another object, or by holding a reference to another object. Such an abstract structure can be used to represent the state of an application.",
          "md": "object graph: In object-oriented programming, groups of interrelated objects that form a network through often complex relationships with each other are known as an object graph. In an object graph, objects can be linked to each other by a specific object, by owning or containing another object, or by holding a reference to another object. Such an abstract structure can be used to represent the state of an application.",
          "bBox": {
            "x": 85.8,
            "y": 55.15,
            "w": 446.82,
            "h": 58.2
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "Output Argument",
          "md": "# Output Argument",
          "bBox": {
            "x": 0,
            "y": 0,
            "w": 612,
            "h": 792
          }
        },
        {
          "type": "text",
          "value": "A named Data Value that is returned as part of the results of a Remote Method invocation. For more information, see Remote Method in Abstract Data Model (section 3.1.1).",
          "md": "A named Data Value that is returned as part of the results of a Remote Method invocation. For more information, see Remote Method in Abstract Data Model (section 3.1.1).",
          "bBox": {
            "x": 99.5,
            "y": 137.95,
            "w": 438.88,
            "h": 330.3
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "Primitive Type",
          "md": "# Primitive Type",
          "bBox": {
            "x": 0,
            "y": 0,
            "w": 612,
            "h": 792
          }
        },
        {
          "type": "text",
          "value": "Part of the Remoting Data Model. Primitive Types are predefined Remoting Types such as Byte, Int16, Int32, Int64, and so on. For more information, see [MS-NRTP] section 3.1.1",
          "md": "Part of the Remoting Data Model. Primitive Types are predefined Remoting Types such as Byte, Int16, Int32, Int64, and so on. For more information, see [MS-NRTP] section 3.1.1",
          "bBox": {
            "x": 99.5,
            "y": 183.85,
            "w": 435.27,
            "h": 134.4
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "Primitive Value",
          "md": "# Primitive Value",
          "bBox": {
            "x": 0,
            "y": 0,
            "w": 612,
            "h": 792
          }
        },
        {
          "type": "text",
          "value": "Part of the Remoting Data Model. A Primitive Value is an instance of a Primitive Type.",
          "md": "Part of the Remoting Data Model. A Primitive Value is an instance of a Primitive Type.",
          "bBox": {
            "x": 99.5,
            "y": 229.75,
            "w": 76.6,
            "h": 9
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "record",
          "md": "# record",
          "bBox": {
            "x": 0,
            "y": 0,
            "w": 612,
            "h": 792
          }
        },
        {
          "type": "text",
          "value": "A variable-length sequence of bytes with a predefined structure.",
          "md": "A variable-length sequence of bytes with a predefined structure.",
          "bBox": {
            "x": 0,
            "y": 0,
            "w": 612,
            "h": 792
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "Remote Method",
          "md": "# Remote Method",
          "bBox": {
            "x": 0,
            "y": 0,
            "w": 612,
            "h": 792
          }
        },
        {
          "type": "text",
          "value": "Part of the Remoting Data Model. A Remote Method is a remotely callable operation. A Remote Method can either be One-Way or Two-Way. In the case of a One-Way Method, there is no reply from the implementation. For more information, see [MS-NRTP] section 3.1.1",
          "md": "Part of the Remoting Data Model. A Remote Method is a remotely callable operation. A Remote Method can either be One-Way or Two-Way. In the case of a One-Way Method, there is no reply from the implementation. For more information, see [MS-NRTP] section 3.1.1",
          "bBox": {
            "x": 99.5,
            "y": 196.15,
            "w": 437.06,
            "h": 122.1
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "Remoting Data Model",
          "md": "# Remoting Data Model",
          "bBox": {
            "x": 0,
            "y": 0,
            "w": 612,
            "h": 792
          }
        },
        {
          "type": "text",
          "value": "A model that is used to represent higher-layer–defined data structures and values, and to represent a Remote Method invocation and the Return Value or error information from that invocation. A protocol, such as [MS-NRLS], that is built on top of this protocol can be defined by using the Remoting Data Model, and can be agnostic to the serialization format. For more information, see Abstract Data Model (section 3.1.1).",
          "md": "A model that is used to represent higher-layer–defined data structures and values, and to represent a Remote Method invocation and the Return Value or error information from that invocation. A protocol, such as [MS-NRLS], that is built on top of this protocol can be defined by using the Remoting Data Model, and can be agnostic to the serialization format. For more information, see Abstract Data Model (section 3.1.1).",
          "bBox": {
            "x": 99.5,
            "y": 150.25,
            "w": 407.42,
            "h": 238.5
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "Remoting Type",
          "md": "# Remoting Type",
          "bBox": {
            "x": 0,
            "y": 0,
            "w": 612,
            "h": 792
          }
        },
        {
          "type": "text",
          "value": "Part of the Remoting Data Model. Class, Array, Enum, and Primitive are different kinds of Remoting Types. All Remoting Types are identified by a name that is case sensitive. For more information, see [MS-NRTP] section 3.1.1",
          "md": "Part of the Remoting Data Model. Class, Array, Enum, and Primitive are different kinds of Remoting Types. All Remoting Types are identified by a name that is case sensitive. For more information, see [MS-NRTP] section 3.1.1",
          "bBox": {
            "x": 99.5,
            "y": 196.15,
            "w": 431.45,
            "h": 238.5
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "Return Value",
          "md": "# Return Value",
          "bBox": {
            "x": 0,
            "y": 0,
            "w": 612,
            "h": 792
          }
        },
        {
          "type": "text",
          "value": "A Data Value that is returned as part of the results of a Remote Method invocation. For more information, see Remote Method in Abstract Data Model (section 3.1.1).",
          "md": "A Data Value that is returned as part of the results of a Remote Method invocation. For more information, see Remote Method in Abstract Data Model (section 3.1.1).",
          "bBox": {
            "x": 99.5,
            "y": 137.95,
            "w": 438.88,
            "h": 330.3
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "serialization",
          "md": "# serialization",
          "bBox": {
            "x": 0,
            "y": 0,
            "w": 612,
            "h": 792
          }
        },
        {
          "type": "text",
          "value": "A mechanism by which an application converts an object into an XML representation.",
          "md": "A mechanism by which an application converts an object into an XML representation.",
          "bBox": {
            "x": 0,
            "y": 0,
            "w": 612,
            "h": 792
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "Serialization Format",
          "md": "# Serialization Format",
          "bBox": {
            "x": 0,
            "y": 0,
            "w": 612,
            "h": 792
          }
        },
        {
          "type": "text",
          "value": "The structure of the serialized message content, which can be either binary or SOAP. Binary serialization format is specified in [MS-NRBF]. SOAP serialization format is specified in [MS-NRTP].",
          "md": "The structure of the serialized message content, which can be either binary or SOAP. Binary serialization format is specified in [MS-NRBF]. SOAP serialization format is specified in [MS-NRTP].",
          "bBox": {
            "x": 99.5,
            "y": 514.15,
            "w": 406.77,
            "h": 21.3
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "Serialization Stream",
          "md": "# Serialization Stream",
          "bBox": {
            "x": 0,
            "y": 0,
            "w": 612,
            "h": 792
          }
        },
        {
          "type": "text",
          "value": "An octet stream that contains a sequence of records defined in this document.",
          "md": "An octet stream that contains a sequence of records defined in this document.",
          "bBox": {
            "x": 99.5,
            "y": 560.05,
            "w": 48,
            "h": 9
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "serialize",
          "md": "# serialize",
          "bBox": {
            "x": 0,
            "y": 0,
            "w": 612,
            "h": 792
          }
        },
        {
          "type": "text",
          "value": "The process of taking an in-memory data structure, flat or otherwise, and turning it into a flat stream of bytes. See also marshal.",
          "md": "The process of taking an in-memory data structure, flat or otherwise, and turning it into a flat stream of bytes. See also marshal.",
          "bBox": {
            "x": 99.5,
            "y": 593.65,
            "w": 173.8,
            "h": 9
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "Server Type",
          "md": "# Server Type",
          "bBox": {
            "x": 0,
            "y": 0,
            "w": 612,
            "h": 792
          }
        },
        {
          "type": "text",
          "value": "Part of the Remoting Data Model. A Server Type contains Remote Methods.",
          "md": "Part of the Remoting Data Model. A Server Type contains Remote Methods.",
          "bBox": {
            "x": 0,
            "y": 0,
            "w": 612,
            "h": 792
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "System Library",
          "md": "# System Library",
          "bBox": {
            "x": 0,
            "y": 0,
            "w": 612,
            "h": 792
          }
        },
        {
          "type": "text",
          "value": "A specially designated library that can be used to reduce the wire size for commonly used data types. The name of the library is agreed to by both the server and the client.\n\nCopyright © 2019 Microsoft Corporation\n\nRelease: March 13, 2019\n\n[MS-NRBF] - v20190313",
          "md": "A specially designated library that can be used to reduce the wire size for commonly used data types. The name of the library is agreed to by both the server and the client.\n\nCopyright © 2019 Microsoft Corporation\n\nRelease: March 13, 2019\n\n[MS-NRBF] - v20190313",
          "bBox": {
            "x": 72.1,
            "y": 648.55,
            "w": 446.19,
            "h": 105.6
          }
        }
      ],
      "status": "OK",
      "originalOrientationAngle": 0,
      "links": [
        {
          "unsafeUrl": "../../../../../../../upload/%5BMS-NRBF%5D.pdf#Section_75b9fe09be15475f85b8ae7b7558cfe5",
          "text": "[MS-NRBF] . "
        },
        {
          "unsafeUrl": "../../../../../../../upload/%5BMS-NRLS%5D.pdf#Section_dffdda1f2c454978927c4280469ce355",
          "text": "[MS-NRLS] , "
        }
      ],
      "width": 612,
      "height": 792,
      "triggeredAutoMode": false,
      "parsingMode": "accurate",
      "structuredData": null,
      "noStructuredContent": false,
      "noTextContent": false,
      "pageHeaderMarkdown": "\n# .NET Remoting: Binary Format Data Structure\n\n",
      "pageFooterMarkdown": "\nCopyright © 2019 Microsoft Corporation\n\nRelease: March 13, 2019\n\n[MS-NRBF] - v20190313\n\n",
      "confidence": 0.997
    },
    {
      "page": 10,
      "text": " System.Object: Part of the Remoting Data Model. System.Object is a Class that has no\n     Members. A Class that does not extend another Class is considered to extend System.Object.\n\n Ultimate Array Item Type: The Item Type of the innermost Array in a recursive construction of\n     Array of Arrays. For instance, an \"Array of TypeA\" has an Ultimate Array Item Type of TypeA. An\n     \"Array of Array of TypeA\" also has an Ultimate Array Item Type of TypeA, as does an \"Array of\n     Array of Array of TypeA\".\n\n Unicode: A character encoding standard developed by the Unicode Consortium that represents\n     almost all of the written languages of the world. The Unicode standard [UNICODE5.0.0/2007]\n     provides three forms (UTF-8, UTF-16, and UTF-32) and seven schemes (UTF-8, UTF-16, UTF-16\n     BE, UTF-16 LE, UTF-32, UTF-32 LE, and UTF-32 BE).\n\n UTF-8: A byte-oriented standard for encoding Unicode characters, defined in the Unicode standard.\n     Unless specified otherwise, this term refers to the UTF-8 encoding form specified in\n     [UNICODE5.0.0/2007] section 3.9.\n\n MAY, SHOULD, MUST, SHOULD NOT, MUST NOT: These terms (in all caps) are used as defined\n     in [RFC2119]. All statements of optional behavior use either MAY, SHOULD, or SHOULD NOT.\n\n1.2   References\n\nLinks to a document in the Microsoft Open Specifications library point to the correct section in the most\nrecently published version of the referenced document. However, because individual documents in the\nlibrary are not updated at the same time, the section numbers in the documents may not match. You\ncan confirm the correct section numbering by checking the Errata.\n\n1.2.1 Normative References\n\nWe conduct frequent surveys of the normative references to assure their continued availability. If you\nhave any issue with finding a normative reference, please contact dochelp@microsoft.com. We will\nassist you in finding the relevant information.\n\n[IEEE754] IEEE, \"IEEE Standard for Binary Floating-Point Arithmetic\", IEEE 754-1985, October 1985,\nhttp://ieeexplore.ieee.org/servlet/opac?punumber=2355\n\n[MS-DTYP] Microsoft Corporation, \"Windows Data Types\".\n\n[MS-NRTP] Microsoft Corporation, \".NET Remoting: Core Protocol\".\n\n[RFC2119] Bradner, S., \"Key words for use in RFCs to Indicate Requirement Levels\", BCP 14, RFC 2119,\nMarch 1997, http://www.rfc-editor.org/rfc/rfc2119.txt\n\n[RFC4234] Crocker, D., Ed., and Overell, P., \"Augmented BNF for Syntax Specifications: ABNF\", RFC\n4234, October 2005, http://www.rfc-editor.org/rfc/rfc4234.txt\n\n1.2.2 Informative References\n\n[MS-NETOD] Microsoft Corporation, \"Microsoft .NET Framework Protocols Overview\".\n\n[MSDN-.NET-FRAMEWORK] Microsoft Corporation, \"Overview of the .NET Framework\",\nhttp://msdn.microsoft.com/en-us/library/zw4w595w.aspx\n\n                                                                                         10 / 55\n[MS-NRBF] - v20190313\n.NET Remoting: Binary Format Data Structure\nCopyright © 2019 Microsoft Corporation\nRelease: March 13, 2019",
      "md": "\nSystem.Object: Part of the Remoting Data Model. System.Object is a Class that has no Members. A Class that does not extend another Class is considered to extend System.Object.\n\nUltimate Array Item Type: The Item Type of the innermost Array in a recursive construction of Array of Arrays. For instance, an \"Array of TypeA\" has an Ultimate Array Item Type of TypeA. An \"Array of Array of TypeA\" also has an Ultimate Array Item Type of TypeA, as does an \"Array of Array of Array of TypeA\".\n\nUnicode: A character encoding standard developed by the Unicode Consortium that represents almost all of the written languages of the world. The Unicode standard [UNICODE5.0.0/2007] provides three forms (UTF-8, UTF-16, and UTF-32) and seven schemes (UTF-8, UTF-16, UTF-16 BE, UTF-16 LE, UTF-32, UTF-32 LE, and UTF-32 BE).\n\nUTF-8: A byte-oriented standard for encoding Unicode characters, defined in the Unicode standard. Unless specified otherwise, this term refers to the UTF-8 encoding form specified in [UNICODE5.0.0/2007] section 3.9.\n\nMAY, SHOULD, MUST, SHOULD NOT, MUST NOT: These terms (in all caps) are used as defined in [RFC2119]. All statements of optional behavior use either MAY, SHOULD, or SHOULD NOT.\n\n# 1.2   References\n\nLinks to a document in the Microsoft Open Specifications library point to the correct section in the most recently published version of the referenced document. However, because individual documents in the library are not updated at the same time, the section numbers in the documents may not match. You can confirm the correct section numbering by checking the Errata.\n\n# 1.2.1 Normative References\n\nWe conduct frequent surveys of the normative references to assure their continued availability. If you have any issue with finding a normative reference, please contact dochelp@microsoft.com. We will assist you in finding the relevant information.\n\n- [IEEE754] IEEE, \"IEEE Standard for Binary Floating-Point Arithmetic\", IEEE 754-1985, October 1985, http://ieeexplore.ieee.org/servlet/opac?punumber=2355\n- [MS-DTYP] Microsoft Corporation, \"Windows Data Types\".\n- [MS-NRTP] Microsoft Corporation, \".NET Remoting: Core Protocol\".\n- [RFC2119] Bradner, S., \"Key words for use in RFCs to Indicate Requirement Levels\", BCP 14, RFC 2119, March 1997, http://www.rfc-editor.org/rfc/rfc2119.txt\n- [RFC4234] Crocker, D., Ed., and Overell, P., \"Augmented BNF for Syntax Specifications: ABNF\", RFC 4234, October 2005, http://www.rfc-editor.org/rfc/rfc4234.txt\n\n# 1.2.2 Informative References\n\n- [MS-NETOD] Microsoft Corporation, \"Microsoft .NET Framework Protocols Overview\".\n- [MSDN-.NET-FRAMEWORK] Microsoft Corporation, \"Overview of the .NET Framework\", http://msdn.microsoft.com/en-us/library/zw4w595w.aspx\n\n",
      "images": [
      ],
      "charts": [
      ],
      "items": [
        {
          "type": "text",
          "value": "System.Object: Part of the Remoting Data Model. System.Object is a Class that has no Members. A Class that does not extend another Class is considered to extend System.Object.\n\nUltimate Array Item Type: The Item Type of the innermost Array in a recursive construction of Array of Arrays. For instance, an \"Array of TypeA\" has an Ultimate Array Item Type of TypeA. An \"Array of Array of TypeA\" also has an Ultimate Array Item Type of TypeA, as does an \"Array of Array of Array of TypeA\".\n\nUnicode: A character encoding standard developed by the Unicode Consortium that represents almost all of the written languages of the world. The Unicode standard [UNICODE5.0.0/2007] provides three forms (UTF-8, UTF-16, and UTF-32) and seven schemes (UTF-8, UTF-16, UTF-16 BE, UTF-16 LE, UTF-32, UTF-32 LE, and UTF-32 BE).\n\nUTF-8: A byte-oriented standard for encoding Unicode characters, defined in the Unicode standard. Unless specified otherwise, this term refers to the UTF-8 encoding form specified in [UNICODE5.0.0/2007] section 3.9.\n\nMAY, SHOULD, MUST, SHOULD NOT, MUST NOT: These terms (in all caps) are used as defined in [RFC2119]. All statements of optional behavior use either MAY, SHOULD, or SHOULD NOT.",
          "md": "System.Object: Part of the Remoting Data Model. System.Object is a Class that has no Members. A Class that does not extend another Class is considered to extend System.Object.\n\nUltimate Array Item Type: The Item Type of the innermost Array in a recursive construction of Array of Arrays. For instance, an \"Array of TypeA\" has an Ultimate Array Item Type of TypeA. An \"Array of Array of TypeA\" also has an Ultimate Array Item Type of TypeA, as does an \"Array of Array of Array of TypeA\".\n\nUnicode: A character encoding standard developed by the Unicode Consortium that represents almost all of the written languages of the world. The Unicode standard [UNICODE5.0.0/2007] provides three forms (UTF-8, UTF-16, and UTF-32) and seven schemes (UTF-8, UTF-16, UTF-16 BE, UTF-16 LE, UTF-32, UTF-32 LE, and UTF-32 BE).\n\nUTF-8: A byte-oriented standard for encoding Unicode characters, defined in the Unicode standard. Unless specified otherwise, this term refers to the UTF-8 encoding form specified in [UNICODE5.0.0/2007] section 3.9.\n\nMAY, SHOULD, MUST, SHOULD NOT, MUST NOT: These terms (in all caps) are used as defined in [RFC2119]. All statements of optional behavior use either MAY, SHOULD, or SHOULD NOT.",
          "bBox": {
            "x": 85.8,
            "y": 55.15,
            "w": 454.4,
            "h": 217.2
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "1.2   References",
          "md": "# 1.2   References",
          "bBox": {
            "x": 72.1,
            "y": 291.8,
            "w": 89.8,
            "h": 10
          }
        },
        {
          "type": "text",
          "value": "Links to a document in the Microsoft Open Specifications library point to the correct section in the most recently published version of the referenced document. However, because individual documents in the library are not updated at the same time, the section numbers in the documents may not match. You can confirm the correct section numbering by checking the Errata.",
          "md": "Links to a document in the Microsoft Open Specifications library point to the correct section in the most recently published version of the referenced document. However, because individual documents in the library are not updated at the same time, the section numbers in the documents may not match. You can confirm the correct section numbering by checking the Errata.",
          "bBox": {
            "x": 72.1,
            "y": 314.3,
            "w": 467.06,
            "h": 45.9
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "1.2.1 Normative References",
          "md": "# 1.2.1 Normative References",
          "bBox": {
            "x": 72.1,
            "y": 291.8,
            "w": 156.8,
            "h": 97.85
          }
        },
        {
          "type": "text",
          "value": "We conduct frequent surveys of the normative references to assure their continued availability. If you have any issue with finding a normative reference, please contact dochelp@microsoft.com. We will assist you in finding the relevant information.\n\n- [IEEE754] IEEE, \"IEEE Standard for Binary Floating-Point Arithmetic\", IEEE 754-1985, October 1985, http://ieeexplore.ieee.org/servlet/opac?punumber=2355\n- [MS-DTYP] Microsoft Corporation, \"Windows Data Types\".\n- [MS-NRTP] Microsoft Corporation, \".NET Remoting: Core Protocol\".\n- [RFC2119] Bradner, S., \"Key words for use in RFCs to Indicate Requirement Levels\", BCP 14, RFC 2119, March 1997, http://www.rfc-editor.org/rfc/rfc2119.txt\n- [RFC4234] Crocker, D., Ed., and Overell, P., \"Augmented BNF for Syntax Specifications: ABNF\", RFC 4234, October 2005, http://www.rfc-editor.org/rfc/rfc4234.txt",
          "md": "We conduct frequent surveys of the normative references to assure their continued availability. If you have any issue with finding a normative reference, please contact dochelp@microsoft.com. We will assist you in finding the relevant information.\n\n- [IEEE754] IEEE, \"IEEE Standard for Binary Floating-Point Arithmetic\", IEEE 754-1985, October 1985, http://ieeexplore.ieee.org/servlet/opac?punumber=2355\n- [MS-DTYP] Microsoft Corporation, \"Windows Data Types\".\n- [MS-NRTP] Microsoft Corporation, \".NET Remoting: Core Protocol\".\n- [RFC2119] Bradner, S., \"Key words for use in RFCs to Indicate Requirement Levels\", BCP 14, RFC 2119, March 1997, http://www.rfc-editor.org/rfc/rfc2119.txt\n- [RFC4234] Crocker, D., Ed., and Overell, P., \"Augmented BNF for Syntax Specifications: ABNF\", RFC 4234, October 2005, http://www.rfc-editor.org/rfc/rfc4234.txt",
          "bBox": {
            "x": 72.1,
            "y": 291.8,
            "w": 465.3,
            "h": 291.35
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "1.2.2 Informative References",
          "md": "# 1.2.2 Informative References",
          "bBox": {
            "x": 72.1,
            "y": 291.8,
            "w": 163.15,
            "h": 320.8
          }
        },
        {
          "type": "text",
          "value": "- [MS-NETOD] Microsoft Corporation, \"Microsoft .NET Framework Protocols Overview\".\n- [MSDN-.NET-FRAMEWORK] Microsoft Corporation, \"Overview of the .NET Framework\", http://msdn.microsoft.com/en-us/library/zw4w595w.aspx",
          "md": "- [MS-NETOD] Microsoft Corporation, \"Microsoft .NET Framework Protocols Overview\".\n- [MSDN-.NET-FRAMEWORK] Microsoft Corporation, \"Overview of the .NET Framework\", http://msdn.microsoft.com/en-us/library/zw4w595w.aspx",
          "bBox": {
            "x": 72.1,
            "y": 625.1,
            "w": 385.43,
            "h": 43.6
          }
        }
      ],
      "status": "OK",
      "originalOrientationAngle": 0,
      "links": [
        {
          "url": "https://go.microsoft.com/fwlink/?LinkId=195551",
          "unsafeUrl": "https://go.microsoft.com/fwlink/?LinkId=195551",
          "text": "http://msdn.microsoft.com/en-us/library/zw4w595w.aspx"
        },
        {
          "unsafeUrl": "../../../../../../../upload/%5BMS-NETOD%5D.pdf#Section_bcca8164da0843f2a983c34ed99171b0",
          "text": "Microsoft  .NET  Framework  Protocols  Overview \"."
        },
        {
          "url": "https://go.microsoft.com/fwlink/?LinkId=90462",
          "unsafeUrl": "https://go.microsoft.com/fwlink/?LinkId=90462",
          "text": "http://www.rfc-editor.org/rfc/rfc4234.txt"
        },
        {
          "url": "https://go.microsoft.com/fwlink/?LinkId=90317",
          "unsafeUrl": "https://go.microsoft.com/fwlink/?LinkId=90317",
          "text": "http://www.rfc-editor.org/rfc/rfc2119.txt"
        },
        {
          "unsafeUrl": "../../../../../../../upload/%5BMS-NRTP%5D.pdf#Section_3acb31b0b8734aaf85039727ec40fbec",
          "text": ".NET  Remoting:  Core  Protocol \"."
        },
        {
          "unsafeUrl": "../../../../../../../upload/%5BMS-DTYP%5D.pdf#Section_cca2742956894a16b2b49325d93e4ba2",
          "text": "Windows  Data  Types \"."
        },
        {
          "url": "https://go.microsoft.com/fwlink/?LinkId=89903",
          "unsafeUrl": "https://go.microsoft.com/fwlink/?LinkId=89903",
          "text": "http://ieeexplore.ieee.org/servlet/opac?punumber=2355"
        },
        {
          "url": "mailto:dochelp@microsoft.com",
          "unsafeUrl": "mailto:dochelp@microsoft.com",
          "text": "dochelp@microsoft.com . "
        },
        {
          "url": "https://go.microsoft.com/fwlink/?linkid=850906",
          "unsafeUrl": "https://go.microsoft.com/fwlink/?linkid=850906",
          "text": "Errata ."
        },
        {
          "url": "https://go.microsoft.com/fwlink/?LinkId=90317",
          "unsafeUrl": "https://go.microsoft.com/fwlink/?LinkId=90317",
          "text": "[RFC2119] . "
        },
        {
          "url": "https://go.microsoft.com/fwlink/?LinkId=154659",
          "unsafeUrl": "https://go.microsoft.com/fwlink/?LinkId=154659",
          "text": "[UNICODE5.0.0/2007]"
        }
      ],
      "width": 612,
      "height": 792,
      "triggeredAutoMode": false,
      "parsingMode": "accurate",
      "structuredData": null,
      "noStructuredContent": false,
      "noTextContent": false,
      "pageHeaderMarkdown": "",
      "pageFooterMarkdown": "",
      "confidence": 0.953
    },
    {
      "page": 11,
      "text": "1.3   Overview\n\nThe .NET Remoting: Binary Format Data Structure defines a set of structures that represent object\ngraph or method invocation information as an octet stream. One possible application of the structure\nis as the serialization format for the data model as specified in [MS-NRTP] section 3.1.1.\n\nThis specification defines the records used by this format, and the grammar for writing the records to\nthe serialization stream.\n\nThe format provides structures for mapping instances of data that conform to the Remoting Data\nModel into octets. The Remoting Data Model is specified in [MS-NRTP] section 3.1.1.\n\nThe format consists of a sequence of variable-length records. The records are used to hold the\nserialized instances of Classes (2), Arrays, Primitive Types, and method invocations. There are\nmultiple record types to represent each of these instances. The various record types optimize the wire\nsize of the serialized instance. This section specifies the structure of each record in detail. For clarity,\nthe records are grouped as follows:\n\n§     Class (2) records contain Class (2) instances. The format allows serialization of Class Metadata, in\n      addition to the actual data. Richness of metadata directly contributes to the wire size. The amount\n      of metadata can be reduced by conveying implicit information through special record types and by\n      sharing metadata across records.\n\n§     Array records contain Array instances. There is a general record type for Array that can represent\n      multiple dimensions and nonzero lower bound. There are more compact Array records for\n      frequently used Array types such as single-dimensional Array of String, Object, and Primitive\n      Values.\n\n§     Members reference records contain Data Values of Class (2) Members or Array items. There are\n      different record types for Null Object, string values, Primitive Type values, and instances of\n      Classes (2) and Arrays.\n\n§     Method invocation records contain information about Remote Method, Server Type,\n      Arguments, Return Value, Exception, Message Properties, and Call Context.\n\n§     Other records include records that are used to mark the beginning and end of the format.\n\n1.4   Relationship to Protocols and Other Structures\n\nThis format is part of the .NET Remoting protocols. The .NET Remoting Protocol (as specified in [MS-\nNRTP]) uses this format to encode message content before transmission, as specified in [MS-NRTP]\nsection 3.\n\nThe serialized content is transmitted over either HTTP or TCP, by using headers and framing as\nspecified in [MS-NRTP] section 3. The following block diagram illustrates the relationship.\n\n\n                                           11 / 55\n[MS-NRBF] - v20190313\n.NET Remoting: Binary Format Data Structure\nCopyright © 2019 Microsoft Corporation\nRelease: March 13, 2019",
      "md": "\n# 1.3 Overview\n\nThe .NET Remoting: Binary Format Data Structure defines a set of structures that represent object graph or method invocation information as an octet stream. One possible application of the structure is as the serialization format for the data model as specified in [MS-NRTP] section 3.1.1.\n\nThis specification defines the records used by this format, and the grammar for writing the records to the serialization stream.\n\nThe format provides structures for mapping instances of data that conform to the Remoting Data Model into octets. The Remoting Data Model is specified in [MS-NRTP] section 3.1.1.\n\nThe format consists of a sequence of variable-length records. The records are used to hold the serialized instances of Classes (2), Arrays, Primitive Types, and method invocations. There are multiple record types to represent each of these instances. The various record types optimize the wire size of the serialized instance. This section specifies the structure of each record in detail. For clarity, the records are grouped as follows:\n\n- Class (2) records contain Class (2) instances. The format allows serialization of Class Metadata, in addition to the actual data. Richness of metadata directly contributes to the wire size. The amount of metadata can be reduced by conveying implicit information through special record types and by sharing metadata across records.\n- Array records contain Array instances. There is a general record type for Array that can represent multiple dimensions and nonzero lower bound. There are more compact Array records for frequently used Array types such as single-dimensional Array of String, Object, and Primitive Values.\n- Members reference records contain Data Values of Class (2) Members or Array items. There are different record types for Null Object, string values, Primitive Type values, and instances of Classes (2) and Arrays.\n- Method invocation records contain information about Remote Method, Server Type, Arguments, Return Value, Exception, Message Properties, and Call Context.\n- Other records include records that are used to mark the beginning and end of the format.\n\n# 1.4 Relationship to Protocols and Other Structures\n\nThis format is part of the .NET Remoting protocols. The .NET Remoting Protocol (as specified in [MS-NRTP]) uses this format to encode message content before transmission, as specified in [MS-NRTP] section 3.\n\nThe serialized content is transmitted over either HTTP or TCP, by using headers and framing as specified in [MS-NRTP] section 3. The following block diagram illustrates the relationship.",
      "images": [
      ],
      "charts": [
      ],
      "items": [
        {
          "type": "heading",
          "lvl": 1,
          "value": "1.3 Overview",
          "md": "# 1.3 Overview",
          "bBox": {
            "x": 72.1,
            "y": 55.3,
            "w": 79.8,
            "h": 10
          }
        },
        {
          "type": "text",
          "value": "The .NET Remoting: Binary Format Data Structure defines a set of structures that represent object graph or method invocation information as an octet stream. One possible application of the structure is as the serialization format for the data model as specified in [MS-NRTP] section 3.1.1.\n\nThis specification defines the records used by this format, and the grammar for writing the records to the serialization stream.\n\nThe format provides structures for mapping instances of data that conform to the Remoting Data Model into octets. The Remoting Data Model is specified in [MS-NRTP] section 3.1.1.\n\nThe format consists of a sequence of variable-length records. The records are used to hold the serialized instances of Classes (2), Arrays, Primitive Types, and method invocations. There are multiple record types to represent each of these instances. The various record types optimize the wire size of the serialized instance. This section specifies the structure of each record in detail. For clarity, the records are grouped as follows:\n\n- Class (2) records contain Class (2) instances. The format allows serialization of Class Metadata, in addition to the actual data. Richness of metadata directly contributes to the wire size. The amount of metadata can be reduced by conveying implicit information through special record types and by sharing metadata across records.\n- Array records contain Array instances. There is a general record type for Array that can represent multiple dimensions and nonzero lower bound. There are more compact Array records for frequently used Array types such as single-dimensional Array of String, Object, and Primitive Values.\n- Members reference records contain Data Values of Class (2) Members or Array items. There are different record types for Null Object, string values, Primitive Type values, and instances of Classes (2) and Arrays.\n- Method invocation records contain information about Remote Method, Server Type, Arguments, Return Value, Exception, Message Properties, and Call Context.\n- Other records include records that are used to mark the beginning and end of the format.",
          "md": "The .NET Remoting: Binary Format Data Structure defines a set of structures that represent object graph or method invocation information as an octet stream. One possible application of the structure is as the serialization format for the data model as specified in [MS-NRTP] section 3.1.1.\n\nThis specification defines the records used by this format, and the grammar for writing the records to the serialization stream.\n\nThe format provides structures for mapping instances of data that conform to the Remoting Data Model into octets. The Remoting Data Model is specified in [MS-NRTP] section 3.1.1.\n\nThe format consists of a sequence of variable-length records. The records are used to hold the serialized instances of Classes (2), Arrays, Primitive Types, and method invocations. There are multiple record types to represent each of these instances. The various record types optimize the wire size of the serialized instance. This section specifies the structure of each record in detail. For clarity, the records are grouped as follows:\n\n- Class (2) records contain Class (2) instances. The format allows serialization of Class Metadata, in addition to the actual data. Richness of metadata directly contributes to the wire size. The amount of metadata can be reduced by conveying implicit information through special record types and by sharing metadata across records.\n- Array records contain Array instances. There is a general record type for Array that can represent multiple dimensions and nonzero lower bound. There are more compact Array records for frequently used Array types such as single-dimensional Array of String, Object, and Primitive Values.\n- Members reference records contain Data Values of Class (2) Members or Array items. There are different record types for Null Object, string values, Primitive Type values, and instances of Classes (2) and Arrays.\n- Method invocation records contain information about Remote Method, Server Type, Arguments, Return Value, Exception, Message Properties, and Call Context.\n- Other records include records that are used to mark the beginning and end of the format.",
          "bBox": {
            "x": 72.1,
            "y": 77.8,
            "w": 467.76,
            "h": 654.55
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "1.4 Relationship to Protocols and Other Structures",
          "md": "# 1.4 Relationship to Protocols and Other Structures",
          "bBox": {
            "x": 72.1,
            "y": 485.75,
            "w": 282.45,
            "h": 10
          }
        },
        {
          "type": "text",
          "value": "This format is part of the .NET Remoting protocols. The .NET Remoting Protocol (as specified in [MS-NRTP]) uses this format to encode message content before transmission, as specified in [MS-NRTP] section 3.\n\nThe serialized content is transmitted over either HTTP or TCP, by using headers and framing as specified in [MS-NRTP] section 3. The following block diagram illustrates the relationship.",
          "md": "This format is part of the .NET Remoting protocols. The .NET Remoting Protocol (as specified in [MS-NRTP]) uses this format to encode message content before transmission, as specified in [MS-NRTP] section 3.\n\nThe serialized content is transmitted over either HTTP or TCP, by using headers and framing as specified in [MS-NRTP] section 3. The following block diagram illustrates the relationship.",
          "bBox": {
            "x": 72.1,
            "y": 508.25,
            "w": 457.41,
            "h": 67.2
          }
        }
      ],
      "status": "OK",
      "originalOrientationAngle": 0,
      "links": [
        {
          "unsafeUrl": "../../../../../../../upload/%5BMS-NRTP%5D.pdf#Section_3acb31b0b8734aaf85039727ec40fbec",
          "text": "NRTP] ) "
        },
        {
          "unsafeUrl": "../../../../../../../upload/%5BMS-NRTP%5D.pdf#Section_3acb31b0b8734aaf85039727ec40fbec",
          "text": "[MS-"
        },
        {
          "unsafeUrl": "../../../../../../../upload/%5BMS-NRTP%5D.pdf#Section_3acb31b0b8734aaf85039727ec40fbec",
          "text": "[MS-NRTP]"
        }
      ],
      "width": 612,
      "height": 792,
      "triggeredAutoMode": false,
      "parsingMode": "accurate",
      "structuredData": null,
      "noStructuredContent": false,
      "noTextContent": false,
      "pageHeaderMarkdown": "\n# 1.3 Overview\n\n",
      "pageFooterMarkdown": "",
      "confidence": 0.951
    },
    {
      "page": 12,
      "text": "                                User Application\n      NET Remoting Lifetime Services\n           Extenslon [MS-NRLS])\n\n                                NET Remoting Core Protocol[MSNRTP])\n\n     NET Remoting Blnary Format Data Structure              NET Remoting SOAP Mapping\n             ([MS-NRBF])                                    ([MS-NRTP])\n     Remoting over TCP          Remoting over HTTP          SOAP HTTP Binding             SOAP TCP Binding\n           (defined in          (defined in                 (defined in                     (defined in\n            [MS-NRTPI)          [MS-NRTP])                  [SOAPA.1])                       (MS-NRTP])\n      NNET Negotiate Stream     NTLM Authentication [MS      NTLE huthenticabon[MS_    NNET Negotiate Stream\n      TCP                       NLMP] and HTTP                    NMP and HTT    TCP\n            ([MS-NNS]           Aurhentication IRFC7617I    Authentication [RFC2617]         ([MS-NNS]\n     TCP (specified in          HTTP (specified             HTTP (specified    TCP (specified in\n            [RFC793])           [RFC2616])                  [RFC2616])                       [RFC793])\n\nFigure 1: The .NET Remoting protocols\n\n1.5   Applicability Statement\n\nThe .NET Remoting: Binary Format Data Structure can be used as part of a Remote Method\ninvocation protocol or to persist an object graph. It has a compact octet stream representation that\nmakes it applicable to wire protocols. Because the format is binary, it is not suitable for cases where\nthe output has to be human readable. The format does not include additional information to aid in\nerror detection or to prevent corruption.\n\n1.6   Versioning and Localization\n\nThis document covers versioning issues in the following areas:\n\n§     Protocol Versions: The Serialization Header record has fields called MajorVersion and\n      MinorVersion that denote the version of the .NET Remoting: Binary Format Data Structure in use.\n      Because only one version of the .NET Remoting: Binary Format Data Structure has been defined to\n      date, the value of MajorVersion is always set to 1 and MinorVersion to 0. Future revisions of the\n      format would increment this value. The Serialization Header record is specified in section 2.6.1.\n\n§     Message Versions: MessageFlags           (section     2.2.1.1) defines a flag named \"Generic Method\". The\n      flag indicates that the method being invoked is a Generic Remote Method. The flag is valid only\n      in Microsoft .NET Framework 2.0, Microsoft .NET Framework 3.0, Microsoft .NET Framework 3.5,\n      and Microsoft .NET Framework 4.0. For more information, see [MSDN-.NET-FRAMEWORK].\n\nThere are no localization-dependent structures described in this document.\n\n1.7   Vendor-Extensible Fields\n\nThis format allows implementation-specific name-value pairs called Message Properties to be added\nto the MethodCallArray          (section 2.2.3.2) and MethodReturnCallArray    (section 2.2.3.4) records.\n\n                                                                                                         12 / 55\n[MS-NRBF] - v20190313\n.NET Remoting: Binary Format Data Structure\nCopyright © 2019 Microsoft Corporation\nRelease: March 13, 2019",
      "md": "User Application\n# .NET Remoting Lifetime Services\n\n# Extension [MS-NRLS]\n\n# .NET Remoting Core Protocol [MS-NRTP]\n\n# .NET Remoting Binary Format Data Structure [MS-NRBF]\n\n# .NET Remoting SOAP Mapping [MS-NRTP]\n\n| Remoting over TCP       | Remoting over HTTP                                                | SOAP HTTP Binding                                 | SOAP TCP Binding            |\n| ----------------------- | ----------------------------------------------------------------- | ------------------------------------------------- | --------------------------- |\n| (defined in \\[MS-NRTPI) | (defined in \\[MS-NRTP])                                           | (defined in \\[SOAPA.1])                           | (defined in \\[MS-NRTP])     |\n| NNET Negotiate Stream   | NTLM Authentication \\[MS NLMP] and HTTP Authentication \\[RFC7617] | NTLE Authentication \\[MS\\_NMP and HTTP \\[RFC2617] | NNET Negotiate Stream TCP   |\n| (\\[MS-NNS]              | TCP (specified in \\[RFC793])                                      | HTTP (specified \\[RFC2616])                       | HTTP (specified \\[RFC2616]) |\n|                         | TCP (specified in \\[RFC793])                                      |                                                   |                             |\n\nFigure 1: The .NET Remoting protocols\n\n# 1.5 Applicability Statement\n\nThe .NET Remoting: Binary Format Data Structure can be used as part of a Remote Method invocation protocol or to persist an object graph. It has a compact octet stream representation that makes it applicable to wire protocols. Because the format is binary, it is not suitable for cases where the output has to be human readable. The format does not include additional information to aid in error detection or to prevent corruption.\n\n# 1.6 Versioning and Localization\n\nThis document covers versioning issues in the following areas:\n\n- Protocol Versions: The Serialization Header record has fields called MajorVersion and MinorVersion that denote the version of the .NET Remoting: Binary Format Data Structure in use. Because only one version of the .NET Remoting: Binary Format Data Structure has been defined to date, the value of MajorVersion is always set to 1 and MinorVersion to 0. Future revisions of the format would increment this value. The Serialization Header record is specified in section 2.6.1.\n- Message Versions: MessageFlags (section 2.2.1.1) defines a flag named \"Generic Method\". The flag indicates that the method being invoked is a Generic Remote Method. The flag is valid only in Microsoft .NET Framework 2.0, Microsoft .NET Framework 3.0, Microsoft .NET Framework 3.5, and Microsoft .NET Framework 4.0. For more information, see [MSDN-.NET-FRAMEWORK].\n\nThere are no localization-dependent structures described in this document.\n\n# 1.7 Vendor-Extensible Fields\n\nThis format allows implementation-specific name-value pairs called Message Properties to be added to the MethodCallArray (section 2.2.3.2) and MethodReturnCallArray (section 2.2.3.4) records.\n\n12 / 55\n[MS-NRBF] - v20190313\n.NET Remoting: Binary Format Data Structure\nCopyright © 2019 Microsoft Corporation\nRelease: March 13, 2019",
      "images": [
        {
          "name": "img_p11_1.png",
          "height": 322,
          "width": 565,
          "x": 72,
          "y": 53.94999999999999,
          "original_width": 565,
          "original_height": 322,
          "ocr": [
            {
              "x": 227,
              "y": 37,
              "w": 112,
              "h": 16,
              "confidence": 0.9999879001839078,
              "text": "User Application"
            },
            {
              "x": 17,
              "y": 55,
              "w": 176,
              "h": 14,
              "confidence": 0.8101183755813731,
              "text": "NET Remoting Lifetime Services"
            },
            {
              "x": 41,
              "y": 67,
              "w": 126,
              "h": 16,
              "confidence": 0.8443931405546493,
              "text": "Extenslon [MS-NRLS])"
            },
            {
              "x": 171,
              "y": 107,
              "w": 80,
              "h": 16,
              "confidence": 0.8229989502441795,
              "text": "NET Remoting"
            },
            {
              "x": 257,
              "y": 109,
              "w": 74,
              "h": 12,
              "confidence": 0.8953370293543493,
              "text": "Core Protocol"
            },
            {
              "x": 357,
              "y": 109,
              "w": 42,
              "h": 14,
              "confidence": 0.9915497931562511,
              "text": "NRTP])"
            },
            {
              "x": 23,
              "y": 149,
              "w": 242,
              "h": 14,
              "confidence": 0.6106261754138945,
              "text": "NET Remoting Blnary Format Data Structure"
            },
            {
              "x": 345,
              "y": 149,
              "w": 162,
              "h": 14,
              "confidence": 0.631025943333819,
              "text": "NET Remoting SOAP Mapping"
            },
            {
              "x": 105,
              "y": 161,
              "w": 74,
              "h": 16,
              "confidence": 0.9946678438374665,
              "text": "([MS-NRBF])"
            },
            {
              "x": 389,
              "y": 161,
              "w": 72,
              "h": 16,
              "confidence": 0.9944205659357932,
              "text": "([MS-NRTP])"
            },
            {
              "x": 16,
              "y": 190,
              "w": 107,
              "h": 17,
              "confidence": 0.985394914514685,
              "text": "Remoting over TCP"
            },
            {
              "x": 157,
              "y": 191,
              "w": 54,
              "h": 14,
              "confidence": 0.7402710912562896,
              "text": "Remoting"
            },
            {
              "x": 213,
              "y": 191,
              "w": 58,
              "h": 12,
              "confidence": 0.9135630557730361,
              "text": "over HTTP"
            },
            {
              "x": 301,
              "y": 191,
              "w": 108,
              "h": 14,
              "confidence": 0.9932744213401196,
              "text": "SOAP HTTP Binding"
            },
            {
              "x": 445,
              "y": 191,
              "w": 102,
              "h": 14,
              "confidence": 0.9984703277004078,
              "text": "SOAP TCP Binding"
            },
            {
              "x": 39,
              "y": 205,
              "w": 62,
              "h": 12,
              "confidence": 0.7251683462159467,
              "text": "(defined in"
            },
            {
              "x": 183,
              "y": 203,
              "w": 62,
              "h": 14,
              "confidence": 0.7318235332325121,
              "text": "(defined in"
            },
            {
              "x": 325,
              "y": 203,
              "w": 62,
              "h": 14,
              "confidence": 0.7574111935670963,
              "text": "(defined in"
            },
            {
              "x": 465,
              "y": 203,
              "w": 62,
              "h": 14,
              "confidence": 0.9972173714103131,
              "text": "(defined in"
            },
            {
              "x": 37,
              "y": 217,
              "w": 66,
              "h": 12,
              "confidence": 0.3945922843033637,
              "text": "[MS-NRTPI)"
            },
            {
              "x": 179,
              "y": 215,
              "w": 68,
              "h": 14,
              "confidence": 0.7916684412764459,
              "text": "[MS-NRTP])"
            },
            {
              "x": 323,
              "y": 215,
              "w": 64,
              "h": 14,
              "confidence": 0.49503374979160913,
              "text": "[SOAPA.1])"
            },
            {
              "x": 463,
              "y": 215,
              "w": 66,
              "h": 14,
              "confidence": 0.866131908908986,
              "text": "(MS-NRTP])"
            },
            {
              "x": 7,
              "y": 237,
              "w": 126,
              "h": 14,
              "confidence": 0.719569000922812,
              "text": "NNET Negotiate Stream"
            },
            {
              "x": 151,
              "y": 239,
              "w": 122,
              "h": 12,
              "confidence": 0.6633416658699345,
              "text": "NTLM Authentication [MS"
            },
            {
              "x": 292,
              "y": 238,
              "w": 26,
              "h": 8,
              "confidence": 0.31582218408584595,
              "text": "NTLE"
            },
            {
              "x": 322,
              "y": 238,
              "w": 68,
              "h": 8,
              "confidence": 0.277608249672512,
              "text": "huthenticabon"
            },
            {
              "x": 391,
              "y": 237,
              "w": 24,
              "h": 14,
              "confidence": 0.7074724435806274,
              "text": "[MS_"
            },
            {
              "x": 433,
              "y": 237,
              "w": 126,
              "h": 14,
              "confidence": 0.7187027250134185,
              "text": "NNET Negotiate Stream"
            },
            {
              "x": 67,
              "y": 249,
              "w": 24,
              "h": 14,
              "confidence": 0.9973127790154638,
              "text": "TCP"
            },
            {
              "x": 173,
              "y": 249,
              "w": 80,
              "h": 14,
              "confidence": 0.7760092239937739,
              "text": "NLMP] and HTTP"
            },
            {
              "x": 314,
              "y": 250,
              "w": 28,
              "h": 8,
              "confidence": 0.7714045967589549,
              "text": "NMP"
            },
            {
              "x": 348,
              "y": 250,
              "w": 44,
              "h": 8,
              "confidence": 0.8592241963125548,
              "text": "and HTT"
            },
            {
              "x": 493,
              "y": 249,
              "w": 24,
              "h": 14,
              "confidence": 0.9973857081231915,
              "text": "TCP"
            },
            {
              "x": 41,
              "y": 261,
              "w": 58,
              "h": 14,
              "confidence": 0.5651039276704384,
              "text": "([MS-NNS]"
            },
            {
              "x": 152,
              "y": 262,
              "w": 122,
              "h": 8,
              "confidence": 0.1567913943832877,
              "text": "Aurhentication IRFC7617I"
            },
            {
              "x": 293,
              "y": 261,
              "w": 122,
              "h": 12,
              "confidence": 0.9694113551307387,
              "text": "Authentication [RFC2617]"
            },
            {
              "x": 467,
              "y": 261,
              "w": 58,
              "h": 14,
              "confidence": 0.5651039276704384,
              "text": "([MS-NNS]"
            },
            {
              "x": 23,
              "y": 285,
              "w": 94,
              "h": 18,
              "confidence": 0.7248105436350097,
              "text": "TCP (specified in"
            },
            {
              "x": 163,
              "y": 287,
              "w": 88,
              "h": 14,
              "confidence": 0.996565852765161,
              "text": "HTTP (specified"
            },
            {
              "x": 303,
              "y": 287,
              "w": 88,
              "h": 14,
              "confidence": 0.9971253681581489,
              "text": "HTTP (specified"
            },
            {
              "x": 449,
              "y": 285,
              "w": 94,
              "h": 18,
              "confidence": 0.7307151433294329,
              "text": "TCP (specified in"
            },
            {
              "x": 41,
              "y": 301,
              "w": 60,
              "h": 14,
              "confidence": 0.9984254554161169,
              "text": "[RFC793])"
            },
            {
              "x": 181,
              "y": 301,
              "w": 66,
              "h": 14,
              "confidence": 0.9846879619184326,
              "text": "[RFC2616])"
            },
            {
              "x": 321,
              "y": 301,
              "w": 66,
              "h": 14,
              "confidence": 0.9838232778044778,
              "text": "[RFC2616])"
            },
            {
              "x": 467,
              "y": 301,
              "w": 60,
              "h": 14,
              "confidence": 0.9984254554161169,
              "text": "[RFC793])"
            },
            {
              "x": 329.29289321881345,
              "y": 108.29289321881345,
              "w": 26.414213562373106,
              "h": 11.414213562373106,
              "confidence": 0.9285388745790825,
              "text": "[MS"
            }
          ]
        }
      ],
      "charts": [
      ],
      "items": [
        {
          "type": "text",
          "value": "User Application",
          "md": "User Application",
          "bBox": {
            "x": 232,
            "y": 80,
            "w": 79,
            "h": 11
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": ".NET Remoting Lifetime Services",
          "md": "# .NET Remoting Lifetime Services",
          "bBox": {
            "x": 84,
            "y": 93,
            "w": 124,
            "h": 10
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "Extension [MS-NRLS]",
          "md": "# Extension [MS-NRLS]",
          "bBox": {
            "x": 0,
            "y": 0,
            "w": 612,
            "h": 792
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": ".NET Remoting Core Protocol [MS-NRTP]",
          "md": "# .NET Remoting Core Protocol [MS-NRTP]",
          "bBox": {
            "x": 0,
            "y": 0,
            "w": 612,
            "h": 792
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": ".NET Remoting Binary Format Data Structure [MS-NRBF]",
          "md": "# .NET Remoting Binary Format Data Structure [MS-NRBF]",
          "bBox": {
            "x": 0,
            "y": 0,
            "w": 612,
            "h": 792
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": ".NET Remoting SOAP Mapping [MS-NRTP]",
          "md": "# .NET Remoting SOAP Mapping [MS-NRTP]",
          "bBox": {
            "x": 316,
            "y": 159,
            "w": 115,
            "h": 10
          }
        },
        {
          "type": "table",
          "rows": [
            [
              "Remoting over TCP",
              "Remoting over HTTP",
              "SOAP HTTP Binding",
              "SOAP TCP Binding"
            ],
            [
              "(defined in [MS-NRTPI)",
              "(defined in [MS-NRTP])",
              "(defined in [SOAPA.1])",
              "(defined in [MS-NRTP])"
            ],
            [
              "NNET Negotiate Stream",
              "NTLM Authentication [MS NLMP] and HTTP Authentication [RFC7617]",
              "NTLE Authentication [MS_NMP and HTTP [RFC2617]",
              "NNET Negotiate Stream TCP"
            ],
            [
              "([MS-NNS]",
              "TCP (specified in [RFC793])",
              "HTTP (specified [RFC2616])",
              "HTTP (specified [RFC2616])"
            ],
            [
              "",
              "TCP (specified in [RFC793])",
              "",
              ""
            ]
          ],
          "md": "| Remoting over TCP       | Remoting over HTTP                                                | SOAP HTTP Binding                                 | SOAP TCP Binding            |\n| ----------------------- | ----------------------------------------------------------------- | ------------------------------------------------- | --------------------------- |\n| (defined in \\[MS-NRTPI) | (defined in \\[MS-NRTP])                                           | (defined in \\[SOAPA.1])                           | (defined in \\[MS-NRTP])     |\n| NNET Negotiate Stream   | NTLM Authentication \\[MS NLMP] and HTTP Authentication \\[RFC7617] | NTLE Authentication \\[MS\\_NMP and HTTP \\[RFC2617] | NNET Negotiate Stream TCP   |\n| (\\[MS-NNS]              | TCP (specified in \\[RFC793])                                      | HTTP (specified \\[RFC2616])                       | HTTP (specified \\[RFC2616]) |\n|                         | TCP (specified in \\[RFC793])                                      |                                                   |                             |",
          "isPerfectTable": true,
          "csv": "\"Remoting over TCP\",\"Remoting over HTTP\",\"SOAP HTTP Binding\",\"SOAP TCP Binding\"\n\"(defined in [MS-NRTPI)\",\"(defined in [MS-NRTP])\",\"(defined in [SOAPA.1])\",\"(defined in [MS-NRTP])\"\n\"NNET Negotiate Stream\",\"NTLM Authentication [MS NLMP] and HTTP Authentication [RFC7617]\",\"NTLE Authentication [MS_NMP and HTTP [RFC2617]\",\"NNET Negotiate Stream TCP\"\n\"([MS-NNS]\",\"TCP (specified in [RFC793])\",\"HTTP (specified [RFC2616])\",\"HTTP (specified [RFC2616])\"\n\"\",\"TCP (specified in [RFC793])\",\"\",\"\"",
          "bBox": {
            "x": 72.1,
            "y": 80,
            "w": 467.9,
            "h": 674.15
          }
        },
        {
          "type": "text",
          "value": "Figure 1: The .NET Remoting protocols",
          "md": "Figure 1: The .NET Remoting protocols",
          "bBox": {
            "x": 72.1,
            "y": 291.4,
            "w": 195.75,
            "h": 9
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "1.5 Applicability Statement",
          "md": "# 1.5 Applicability Statement",
          "bBox": {
            "x": 72.1,
            "y": 319.85,
            "w": 156.1,
            "h": 10
          }
        },
        {
          "type": "text",
          "value": "The .NET Remoting: Binary Format Data Structure can be used as part of a Remote Method invocation protocol or to persist an object graph. It has a compact octet stream representation that makes it applicable to wire protocols. Because the format is binary, it is not suitable for cases where the output has to be human readable. The format does not include additional information to aid in error detection or to prevent corruption.",
          "md": "The .NET Remoting: Binary Format Data Structure can be used as part of a Remote Method invocation protocol or to persist an object graph. It has a compact octet stream representation that makes it applicable to wire protocols. Because the format is binary, it is not suitable for cases where the output has to be human readable. The format does not include additional information to aid in error detection or to prevent corruption.",
          "bBox": {
            "x": 72.1,
            "y": 342.35,
            "w": 456.22,
            "h": 390
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "1.6 Versioning and Localization",
          "md": "# 1.6 Versioning and Localization",
          "bBox": {
            "x": 72.1,
            "y": 420,
            "w": 178.55,
            "h": 10
          }
        },
        {
          "type": "text",
          "value": "This document covers versioning issues in the following areas:\n\n- Protocol Versions: The Serialization Header record has fields called MajorVersion and MinorVersion that denote the version of the .NET Remoting: Binary Format Data Structure in use. Because only one version of the .NET Remoting: Binary Format Data Structure has been defined to date, the value of MajorVersion is always set to 1 and MinorVersion to 0. Future revisions of the format would increment this value. The Serialization Header record is specified in section 2.6.1.\n- Message Versions: MessageFlags (section 2.2.1.1) defines a flag named \"Generic Method\". The flag indicates that the method being invoked is a Generic Remote Method. The flag is valid only in Microsoft .NET Framework 2.0, Microsoft .NET Framework 3.0, Microsoft .NET Framework 3.5, and Microsoft .NET Framework 4.0. For more information, see [MSDN-.NET-FRAMEWORK].\n\nThere are no localization-dependent structures described in this document.",
          "md": "This document covers versioning issues in the following areas:\n\n- Protocol Versions: The Serialization Header record has fields called MajorVersion and MinorVersion that denote the version of the .NET Remoting: Binary Format Data Structure in use. Because only one version of the .NET Remoting: Binary Format Data Structure has been defined to date, the value of MajorVersion is always set to 1 and MinorVersion to 0. Future revisions of the format would increment this value. The Serialization Header record is specified in section 2.6.1.\n- Message Versions: MessageFlags (section 2.2.1.1) defines a flag named \"Generic Method\". The flag indicates that the method being invoked is a Generic Remote Method. The flag is valid only in Microsoft .NET Framework 2.0, Microsoft .NET Framework 3.0, Microsoft .NET Framework 3.5, and Microsoft .NET Framework 4.0. For more information, see [MSDN-.NET-FRAMEWORK].\n\nThere are no localization-dependent structures described in this document.",
          "bBox": {
            "x": 72.1,
            "y": 442.5,
            "w": 466.86,
            "h": 289.85
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "1.7 Vendor-Extensible Fields",
          "md": "# 1.7 Vendor-Extensible Fields",
          "bBox": {
            "x": 72.1,
            "y": 620.95,
            "w": 163.2,
            "h": 10
          }
        },
        {
          "type": "text",
          "value": "This format allows implementation-specific name-value pairs called Message Properties to be added to the MethodCallArray (section 2.2.3.2) and MethodReturnCallArray (section 2.2.3.4) records.\n\n12 / 55\n[MS-NRBF] - v20190313\n.NET Remoting: Binary Format Data Structure\nCopyright © 2019 Microsoft Corporation\nRelease: March 13, 2019",
          "md": "This format allows implementation-specific name-value pairs called Message Properties to be added to the MethodCallArray (section 2.2.3.2) and MethodReturnCallArray (section 2.2.3.4) records.\n\n12 / 55\n[MS-NRBF] - v20190313\n.NET Remoting: Binary Format Data Structure\nCopyright © 2019 Microsoft Corporation\nRelease: March 13, 2019",
          "bBox": {
            "x": 72.1,
            "y": 534.3,
            "w": 467.9,
            "h": 219.85
          }
        }
      ],
      "status": "OK",
      "originalOrientationAngle": 0,
      "links": [
        {
          "url": "https://go.microsoft.com/fwlink/?LinkId=195551",
          "unsafeUrl": "https://go.microsoft.com/fwlink/?LinkId=195551",
          "text": "[MSDN-.NET-FRAMEWORK] ."
        }
      ],
      "width": 612,
      "height": 792,
      "triggeredAutoMode": false,
      "parsingMode": "accurate",
      "structuredData": null,
      "noStructuredContent": false,
      "noTextContent": false,
      "pageHeaderMarkdown": "User Application",
      "pageFooterMarkdown": "12 / 55\n[MS-NRBF] - v20190313\n.NET Remoting: Binary Format Data Structure\nCopyright © 2019 Microsoft Corporation\nRelease: March 13, 2019",
      "confidence": 0.98
    },
    {
      "page": 13,
      "text": "2     Structures\n\n2.1    Common Definitions\n\nThe following sections specify the common structures and enumerations that are used by all records.\n\n2.1.1  Common Data Types\n\nThis section specifies the structures of the common Remoting Types that are supported by this\nformat. The format supports the following Primitive Types as specified in [MS-DTYP].\n\n§     BOOLEAN\n\n§     BYTE\n\n§     INT8\n\n§     INT16\n\n§     INT32\n\n§     INT64\n\n§     UINT16\n\n§     UINT32\n\n§     UINT64\n\nThe byte-ordering of the multibyte data types is little-endian. The signed data types use two's\ncomplement to represent the negative numbers.\n\nIn addition, this format defines the following common types.\n\n2.1.1.1 Char\n\nThe Char represents a Unicode character value.\n\n                         1                                  2                          3\n0    1 2  3 4 5 6 7 8 9  0    1 2 3   4 5     6 7 8 9       0    1 2 3 4 5 6 7 8    9  0 1\n\n                                  Value (variable)\n\n                                          ...\n\nValue (variable): UTF-8-encoded bytes.\n\n2.1.1.2 Double\n\nThe Double represents a 64-bit double-precision floating-point value.\n\n\n                                           13 / 55\n[MS-NRBF] - v20190313\n.NET Remoting: Binary Format Data Structure\nCopyright © 2019 Microsoft Corporation\nRelease: March 13, 2019",
      "md": "\n# 2 Structures\n\n# 2.1 Common Definitions\n\nThe following sections specify the common structures and enumerations that are used by all records.\n\n# 2.1.1 Common Data Types\n\nThis section specifies the structures of the common Remoting Types that are supported by this format. The format supports the following Primitive Types as specified in [MS-DTYP].\n\n- BOOLEAN\n- BYTE\n- INT8\n- INT16\n- INT32\n- INT64\n- UINT16\n- UINT32\n- UINT64\n\nThe byte-ordering of the multibyte data types is little-endian. The signed data types use two's complement to represent the negative numbers.\n\nIn addition, this format defines the following common types.\n\n# 2.1.1.1 Char\n\nThe Char represents a Unicode character value.\n\n1                                  2                          3\n0    1 2  3 4 5 6 7 8 9  0    1 2 3   4 5     6 7 8 9       0    1 2 3 4 5 6 7 8    9  0 1\n\nValue (variable)\n\n...\n\nValue (variable): UTF-8-encoded bytes.\n\n# 2.1.1.2 Double\n\nThe Double represents a 64-bit double-precision floating-point value.\n\n",
      "images": [
      ],
      "charts": [
      ],
      "items": [
        {
          "type": "heading",
          "lvl": 1,
          "value": "2 Structures",
          "md": "# 2 Structures",
          "bBox": {
            "x": 72.1,
            "y": 62.55,
            "w": 305.55,
            "h": 459.55
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "2.1 Common Definitions",
          "md": "# 2.1 Common Definitions",
          "bBox": {
            "x": 72.1,
            "y": 62.55,
            "w": 427.05,
            "h": 459.55
          }
        },
        {
          "type": "text",
          "value": "The following sections specify the common structures and enumerations that are used by all records.",
          "md": "The following sections specify the common structures and enumerations that are used by all records.",
          "bBox": {
            "x": 72.1,
            "y": 62.55,
            "w": 458.08,
            "h": 63.65
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "2.1.1 Common Data Types",
          "md": "# 2.1.1 Common Data Types",
          "bBox": {
            "x": 72.1,
            "y": 62.55,
            "w": 427.05,
            "h": 459.55
          }
        },
        {
          "type": "text",
          "value": "This section specifies the structures of the common Remoting Types that are supported by this format. The format supports the following Primitive Types as specified in [MS-DTYP].\n\n- BOOLEAN\n- BYTE\n- INT8\n- INT16\n- INT32\n- INT64\n- UINT16\n- UINT32\n- UINT64\n\nThe byte-ordering of the multibyte data types is little-endian. The signed data types use two's complement to represent the negative numbers.\n\nIn addition, this format defines the following common types.",
          "md": "This section specifies the structures of the common Remoting Types that are supported by this format. The format supports the following Primitive Types as specified in [MS-DTYP].\n\n- BOOLEAN\n- BYTE\n- INT8\n- INT16\n- INT32\n- INT64\n- UINT16\n- UINT32\n- UINT64\n\nThe byte-ordering of the multibyte data types is little-endian. The signed data types use two's complement to represent the negative numbers.\n\nIn addition, this format defines the following common types.",
          "bBox": {
            "x": 72.1,
            "y": 62.55,
            "w": 438.04,
            "h": 459.55
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "2.1.1.1 Char",
          "md": "# 2.1.1.1 Char",
          "bBox": {
            "x": 72.1,
            "y": 62.55,
            "w": 427.05,
            "h": 459.55
          }
        },
        {
          "type": "text",
          "value": "The Char represents a Unicode character value.\n\n1                                  2                          3\n0    1 2  3 4 5 6 7 8 9  0    1 2 3   4 5     6 7 8 9       0    1 2 3 4 5 6 7 8    9  0 1\n\nValue (variable)\n\n...\n\nValue (variable): UTF-8-encoded bytes.",
          "md": "The Char represents a Unicode character value.\n\n1                                  2                          3\n0    1 2  3 4 5 6 7 8 9  0    1 2 3   4 5     6 7 8 9       0    1 2 3 4 5 6 7 8    9  0 1\n\nValue (variable)\n\n...\n\nValue (variable): UTF-8-encoded bytes.",
          "bBox": {
            "x": 72.1,
            "y": 62.55,
            "w": 427.05,
            "h": 531.75
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "2.1.1.2 Double",
          "md": "# 2.1.1.2 Double",
          "bBox": {
            "x": 72.1,
            "y": 62.55,
            "w": 427.05,
            "h": 561.2
          }
        },
        {
          "type": "text",
          "value": "The Double represents a 64-bit double-precision floating-point value.",
          "md": "The Double represents a 64-bit double-precision floating-point value.",
          "bBox": {
            "x": 72.1,
            "y": 514.1,
            "w": 359.55,
            "h": 131.15
          }
        }
      ],
      "status": "OK",
      "originalOrientationAngle": 0,
      "links": [
        {
          "unsafeUrl": "../../../../../../../upload/%5BMS-DTYP%5D.pdf#Section_cca2742956894a16b2b49325d93e4ba2",
          "text": "[MS-DTYP] ."
        }
      ],
      "width": 612,
      "height": 792,
      "triggeredAutoMode": false,
      "parsingMode": "accurate",
      "structuredData": null,
      "noStructuredContent": false,
      "noTextContent": false,
      "pageHeaderMarkdown": "",
      "pageFooterMarkdown": "",
      "confidence": 0.874
    },
    {
      "page": 14,
      "text": "                            1                                2                             3\n0 1 2 3 4 5   6      7 8 9  0    1    2 3  4 5      6 7 8 9  0    1 2 3 4 5 6 7 8   9      0  1\n\n                            Value\n\n                             ...\n\nValue (8 bytes): A 64-bit double-precision floating-point value, as specified in [IEEE754].\n\n2.1.1.3 Single\n\nThe Single represents a 32-bit single-precision floating-point value.\n\n                            1                                2                             3\n0 1 2 3 4 5   6      7 8 9  0    1    2 3  4 5      6 7 8 9  0    1 2 3 4 5 6 7 8   9      0  1\n\n                                             Value\n\nValue (4 bytes): A 32-bit single-precision floating-point value, as specified in [IEEE754].\n\n2.1.1.4 TimeSpan\n\nThe TimeSpan represents time duration.\n\n                            1                                2                             3\n0 1 2 3 4 5   6      7 8 9  0    1    2 3  4 5      6 7 8 9  0    1 2 3 4 5 6 7 8   9      0  1\n\n                            Value\n\n                             ...\n\nValue (8 bytes): A 64-bit signed-integer value that specifies duration as the number of 100\n  nanoseconds. The values range from -10675199 days, 2 hours, 48 minutes, and 05.4775808\n  seconds to 10675199 days, 2 hours, 48 minutes, and 05.4775807 seconds inclusive.\n\n2.1.1.5 DateTime\n\nThe DateTime represents an instant of time.\n\n                            1                                2                             3\n0 1 2 3 4 5   6      7 8 9  0    1    2 3  4 5      6 7 8 9  0    1 2 3 4 5 6 7 8   9      0  1\n\n                                             Ticks\n\n                                             ...                                           Kind\n\nTicks (62 bits): A 62-bit signed-integer value that specifies the number of 100 nanoseconds that\n  have elapsed since 12:00:00, January 1, 0001. The value can represent time instants in a\n  granularity of 100 nanoseconds until 23:59:59.9999999, December 31, 9999.\n\nKind (2 bits): Provides the time-zone information as follows. The value can range from 0 to 2,\n  inclusive<1>. The following table maps values with the meaning of the Ticks field.\n\n                                                                                               14 / 55\n\n[MS-NRBF] - v20190313\n.NET Remoting: Binary Format Data Structure\nCopyright © 2019 Microsoft Corporation\nRelease: March 13, 2019",
      "md": "\n# [MS-NRBF] - v20190313\n\n# .NET Remoting: Binary Format Data Structure\n\nCopyright © 2019 Microsoft Corporation\n\nRelease: March 13, 2019\n\n# 2.1.1 Data Types\n\n# 2.1.1.1 Double\n\nThe Double represents a 64-bit double-precision floating-point value, as specified in [IEEE754].\n\n|         | Value                                                                       |\n| ------- | --------------------------------------------------------------------------- |\n| 8 bytes | A 64-bit double-precision floating-point value, as specified in \\[IEEE754]. |\n\n# 2.1.1.2 Single\n\nThe Single represents a 32-bit single-precision floating-point value.\n\n|         | Value |                                                                             |   |   |\n| ------- | ----- | --------------------------------------------------------------------------- | - | - |\n| 4 bytes |       | A 32-bit single-precision floating-point value, as specified in \\[IEEE754]. |   |   |\n\n# 2.1.1.3 TimeSpan\n\nThe TimeSpan represents time duration.\n\n|         | Value                                                                                                                                                                                                                                              |\n| ------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| 8 bytes | A 64-bit signed-integer value that specifies duration as the number of 100 nanoseconds. The values range from -10675199 days, 2 hours, 48 minutes, and 05.4775808 seconds to 10675199 days, 2 hours, 48 minutes, and 05.4775807 seconds inclusive. |\n\n# 2.1.1.4 DateTime\n\nThe DateTime represents an instant of time.\n\n| Ticks   |                                                                                                                                                                                                                                                    |\n| ------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| 62 bits | A 62-bit signed-integer value that specifies the number of 100 nanoseconds that have elapsed since 12:00:00, January 1, 0001. The value can represent time instants in a granularity of 100 nanoseconds until 23:59:59.9999999, December 31, 9999. |\n|         | Kind                                                                                                                                                                                                                                               |\n| 2 bits  | Provides the time-zone information as follows. The value can range from 0 to 2, inclusive1. The following table maps values with the meaning of the Ticks field.                                                                                   |\n\n14 / 55\n\n",
      "images": [
      ],
      "charts": [
      ],
      "items": [
        {
          "type": "heading",
          "lvl": 1,
          "value": "[MS-NRBF] - v20190313",
          "md": "# [MS-NRBF] - v20190313",
          "bBox": {
            "x": 72.1,
            "y": 58.05,
            "w": 427.05,
            "h": 663.4
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": ".NET Remoting: Binary Format Data Structure",
          "md": "# .NET Remoting: Binary Format Data Structure",
          "bBox": {
            "x": 72.1,
            "y": 724.35,
            "w": 182.82,
            "h": 8
          }
        },
        {
          "type": "text",
          "value": "Copyright © 2019 Microsoft Corporation\n\nRelease: March 13, 2019",
          "md": "Copyright © 2019 Microsoft Corporation\n\nRelease: March 13, 2019",
          "bBox": {
            "x": 72.1,
            "y": 58.05,
            "w": 427.05,
            "h": 696.1
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "2.1.1 Data Types",
          "md": "# 2.1.1 Data Types",
          "bBox": {
            "x": 89.15,
            "y": 58.05,
            "w": 410,
            "h": 494.75
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "2.1.1.1 Double",
          "md": "# 2.1.1.1 Double",
          "bBox": {
            "x": 89.15,
            "y": 58.05,
            "w": 410,
            "h": 494.75
          }
        },
        {
          "type": "text",
          "value": "The Double represents a 64-bit double-precision floating-point value, as specified in [IEEE754].",
          "md": "The Double represents a 64-bit double-precision floating-point value, as specified in [IEEE754].",
          "bBox": {
            "x": 129.65,
            "y": 69.95,
            "w": 315.5,
            "h": 482.85
          }
        },
        {
          "type": "table",
          "rows": [
            [
              "",
              "Value"
            ],
            [
              "8 bytes",
              "A 64-bit double-precision floating-point value, as specified in [IEEE754]."
            ]
          ],
          "md": "|         | Value                                                                       |\n| ------- | --------------------------------------------------------------------------- |\n| 8 bytes | A 64-bit double-precision floating-point value, as specified in \\[IEEE754]. |",
          "isPerfectTable": true,
          "csv": "\"\",\"Value\"\n\"8 bytes\",\"A 64-bit double-precision floating-point value, as specified in [IEEE754].\"",
          "bBox": {
            "x": 72.1,
            "y": 58.05,
            "w": 467.9,
            "h": 696.1
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "2.1.1.2 Single",
          "md": "# 2.1.1.2 Single",
          "bBox": {
            "x": 89.15,
            "y": 58.05,
            "w": 410,
            "h": 494.75
          }
        },
        {
          "type": "text",
          "value": "The Single represents a 32-bit single-precision floating-point value.",
          "md": "The Single represents a 32-bit single-precision floating-point value.",
          "bBox": {
            "x": 72.1,
            "y": 58.05,
            "w": 413.55,
            "h": 494.75
          }
        },
        {
          "type": "table",
          "rows": [
            [
              "",
              "Value",
              "",
              "",
              ""
            ],
            [
              "4 bytes",
              "",
              "A 32-bit single-precision floating-point value, as specified in [IEEE754].",
              "",
              ""
            ]
          ],
          "md": "|         | Value |                                                                             |   |   |\n| ------- | ----- | --------------------------------------------------------------------------- | - | - |\n| 4 bytes |       | A 32-bit single-precision floating-point value, as specified in \\[IEEE754]. |   |   |",
          "isPerfectTable": true,
          "csv": "\"\",\"Value\",\"\",\"\",\"\"\n\"4 bytes\",\"\",\"A 32-bit single-precision floating-point value, as specified in [IEEE754].\",\"\",\"\"",
          "bBox": {
            "x": 72.1,
            "y": 58.05,
            "w": 467.9,
            "h": 696.1
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "2.1.1.3 TimeSpan",
          "md": "# 2.1.1.3 TimeSpan",
          "bBox": {
            "x": 89.15,
            "y": 58.05,
            "w": 410,
            "h": 494.75
          }
        },
        {
          "type": "text",
          "value": "The TimeSpan represents time duration.",
          "md": "The TimeSpan represents time duration.",
          "bBox": {
            "x": 72.1,
            "y": 325.85,
            "w": 182.63,
            "h": 9
          }
        },
        {
          "type": "table",
          "rows": [
            [
              "",
              "Value"
            ],
            [
              "8 bytes",
              "A 64-bit signed-integer value that specifies duration as the number of 100 nanoseconds. The values range from -10675199 days, 2 hours, 48 minutes, and 05.4775808 seconds to 10675199 days, 2 hours, 48 minutes, and 05.4775807 seconds inclusive."
            ]
          ],
          "md": "|         | Value                                                                                                                                                                                                                                              |\n| ------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| 8 bytes | A 64-bit signed-integer value that specifies duration as the number of 100 nanoseconds. The values range from -10675199 days, 2 hours, 48 minutes, and 05.4775808 seconds to 10675199 days, 2 hours, 48 minutes, and 05.4775807 seconds inclusive. |",
          "isPerfectTable": true,
          "csv": "\"\",\"Value\"\n\"8 bytes\",\"A 64-bit signed-integer value that specifies duration as the number of 100 nanoseconds. The values range from -10675199 days, 2 hours, 48 minutes, and 05.4775808 seconds to 10675199 days, 2 hours, 48 minutes, and 05.4775807 seconds inclusive.\"",
          "bBox": {
            "x": 72.1,
            "y": 58.05,
            "w": 467.9,
            "h": 696.1
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "2.1.1.4 DateTime",
          "md": "# 2.1.1.4 DateTime",
          "bBox": {
            "x": 89.15,
            "y": 58.05,
            "w": 410,
            "h": 494.75
          }
        },
        {
          "type": "text",
          "value": "The DateTime represents an instant of time.",
          "md": "The DateTime represents an instant of time.",
          "bBox": {
            "x": 72.1,
            "y": 508.7,
            "w": 199.94,
            "h": 9
          }
        },
        {
          "type": "table",
          "rows": [
            [
              "Ticks",
              ""
            ],
            [
              "62 bits",
              "A 62-bit signed-integer value that specifies the number of 100 nanoseconds that have elapsed since 12:00:00, January 1, 0001. The value can represent time instants in a granularity of 100 nanoseconds until 23:59:59.9999999, December 31, 9999."
            ],
            [
              "",
              "Kind"
            ],
            [
              "2 bits",
              "Provides the time-zone information as follows. The value can range from 0 to 2, inclusive1. The following table maps values with the meaning of the Ticks field."
            ]
          ],
          "md": "| Ticks   |                                                                                                                                                                                                                                                    |\n| ------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| 62 bits | A 62-bit signed-integer value that specifies the number of 100 nanoseconds that have elapsed since 12:00:00, January 1, 0001. The value can represent time instants in a granularity of 100 nanoseconds until 23:59:59.9999999, December 31, 9999. |\n|         | Kind                                                                                                                                                                                                                                               |\n| 2 bits  | Provides the time-zone information as follows. The value can range from 0 to 2, inclusive1. The following table maps values with the meaning of the Ticks field.                                                                                   |",
          "isPerfectTable": true,
          "csv": "\"Ticks\",\"\"\n\"62 bits\",\"A 62-bit signed-integer value that specifies the number of 100 nanoseconds that have elapsed since 12:00:00, January 1, 0001. The value can represent time instants in a granularity of 100 nanoseconds until 23:59:59.9999999, December 31, 9999.\"\n\"\",\"Kind\"\n\"2 bits\",\"Provides the time-zone information as follows. The value can range from 0 to 2, inclusive1. The following table maps values with the meaning of the Ticks field.\"",
          "bBox": {
            "x": 72.1,
            "y": 58.05,
            "w": 467.9,
            "h": 696.1
          }
        },
        {
          "type": "text",
          "value": "14 / 55",
          "md": "14 / 55",
          "bBox": {
            "x": 89.15,
            "y": 58.05,
            "w": 450.85,
            "h": 646.5
          }
        }
      ],
      "status": "OK",
      "originalOrientationAngle": 0,
      "links": [
        {
          "url": "https://go.microsoft.com/fwlink/?LinkId=89903",
          "unsafeUrl": "https://go.microsoft.com/fwlink/?LinkId=89903",
          "text": "[IEEE754] ."
        },
        {
          "url": "https://go.microsoft.com/fwlink/?LinkId=89903",
          "unsafeUrl": "https://go.microsoft.com/fwlink/?LinkId=89903",
          "text": "[IEEE754] ."
        }
      ],
      "width": 612,
      "height": 792,
      "triggeredAutoMode": false,
      "parsingMode": "accurate",
      "structuredData": null,
      "noStructuredContent": false,
      "noTextContent": false,
      "pageHeaderMarkdown": "\n# [MS-NRBF] - v20190313\n\n# .NET Remoting: Binary Format Data Structure\n\nCopyright © 2019 Microsoft Corporation\n\nRelease: March 13, 2019\n\n",
      "pageFooterMarkdown": "\n14 / 55\n\n",
      "confidence": 0.781
    },
    {
      "page": 15,
      "text": "Valu\ne     Meaning\n\n0     Time-zone information is not specified.\n\n1     The time specified is in the Coordinated Universal Time (UTC) time zone.\n\n2     The time specified is in the local time zone.\n\n\n2.1.1.6 LengthPrefixedString\n\nThe LengthPrefixedString represents a string value. The string is prefixed by the length of the UTF-8\nencoded string in bytes. The length is encoded in a variable-length field with a minimum of 1 byte and\na maximum of 5 bytes. To minimize the wire size, length is encoded as a variable-length field.\n\n                                  1                                     2                                     3\n0 1    2   3 4 5 6   7 8       9  0    1       2   3 4 5 6    7 8   9   0    1       2 3    4  5  6  7  8  9  0  1\n\n                                                   Length (variable)\n\n                                                         ...\n\n                                                   String (variable)\n\n                                                         ...\n\nLength (variable): A numerical value that can range from 0 to 2147483647 (2^31) inclusive.\n\n  To minimize the wire size, the encoding of the length MUST be encoded as follows:\n\n  §      The Length field MUST be at least 1 byte and MUST NOT be more than 5 bytes.\n\n  §      Each byte MUST hold the Length value in its lower 7 bits.\n\n  §      The high bit MUST be used to indicate that the length continues in the next byte.\n\n  §      In the case that all 5 bytes are used, the high 5 bits in the fifth byte MUST be 0.\n\n                                          1                                     2                                 3\n  0      1 2 3 4   5   6  7    8       9  0      1 2   3 4  5 6     7 8      9  0      1  2  3  4  5  6  7  8  9  0  1\n\n         Length_0-6       A\n\n  Length_0-6 (7 bits): Length values range from 0 to 127 (7 bits).\n\n  A - Reserved_7 (1 bit): The value MUST be 0.\n\n                                          1                                     2                                 3\n  0      1 2 3 4   5   6  7    8       9  0    1   2   3 4  5 6     7 8      9  0      1  2  3  4  5  6  7  8  9  0  1\n\n         Length_0-6       A               Length_8-14       B\n\n                                                                                                                     15 / 55\n[MS-NRBF] - v20190313\n.NET Remoting: Binary Format Data Structure\nCopyright © 2019 Microsoft Corporation\nRelease: March 13, 2019",
      "md": "\nValu\ne     Meaning\n\n| 0 | Time-zone information is not specified.                                  |\n| - | ------------------------------------------------------------------------ |\n| 1 | The time specified is in the Coordinated Universal Time (UTC) time zone. |\n| 2 | The time specified is in the local time zone.                            |\n\n# 2.1.1.6 LengthPrefixedString\n\nThe LengthPrefixedString represents a string value. The string is prefixed by the length of the UTF-8 encoded string in bytes. The length is encoded in a variable-length field with a minimum of 1 byte and a maximum of 5 bytes. To minimize the wire size, length is encoded as a variable-length field.\n\n0 1    2   3 4 5 6   7 8       9  0    1       2   3 4 5 6    7 8   9   0    1       2 3    4  5  6  7  8  9  0  1\nLength (variable)\n...\nString (variable)\n...\n\nLength (variable): A numerical value that can range from 0 to 2147483647 (231) inclusive.\n\nTo minimize the wire size, the encoding of the length MUST be encoded as follows:\n\n- The Length field MUST be at least 1 byte and MUST NOT be more than 5 bytes.\n- Each byte MUST hold the Length value in its lower 7 bits.\n- The high bit MUST be used to indicate that the length continues in the next byte.\n- In the case that all 5 bytes are used, the high 5 bits in the fifth byte MUST be 0.\n\n| 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 |   |   |\n| --------------------------------------------------------------- | - | - |\n| Length\\_0-6                                                     | A |   |\n\nLength_0-6 (7 bits): Length values range from 0 to 127 (7 bits).\n\nA - Reserved_7 (1 bit): The value MUST be 0.\n\n|   |             |   |              | 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 |   |   |   |\n| - | ----------- | - | ------------ | --------------------------------------------------------------- | - | - | - |\n|   | Length\\_0-6 | A | Length\\_8-14 | B                                                               |   |   |   |\n\n15 / 55\n[MS-NRBF] - v20190313\n.NET Remoting: Binary Format Data Structure\nCopyright © 2019 Microsoft Corporation\nRelease: March 13, 2019\n",
      "images": [
      ],
      "charts": [
      ],
      "items": [
        {
          "type": "text",
          "value": "Valu\ne     Meaning",
          "md": "Valu\ne     Meaning",
          "bBox": {
            "x": 95.85,
            "y": 60,
            "w": 97.8,
            "h": 606.1
          }
        },
        {
          "type": "table",
          "rows": [
            [
              "0",
              "Time-zone information is not specified."
            ],
            [
              "1",
              "The time specified is in the Coordinated Universal Time (UTC) time zone."
            ],
            [
              "2",
              "The time specified is in the local time zone."
            ]
          ],
          "md": "| 0 | Time-zone information is not specified.                                  |\n| - | ------------------------------------------------------------------------ |\n| 1 | The time specified is in the Coordinated Universal Time (UTC) time zone. |\n| 2 | The time specified is in the local time zone.                            |",
          "isPerfectTable": true,
          "csv": "\"0\",\"Time-zone information is not specified.\"\n\"1\",\"The time specified is in the Coordinated Universal Time (UTC) time zone.\"\n\"2\",\"The time specified is in the local time zone.\"",
          "bBox": {
            "x": 72.1,
            "y": 91.2,
            "w": 467.9,
            "h": 662.95
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "2.1.1.6 LengthPrefixedString",
          "md": "# 2.1.1.6 LengthPrefixedString",
          "bBox": {
            "x": 72.1,
            "y": 70.9,
            "w": 445.75,
            "h": 572.4
          }
        },
        {
          "type": "text",
          "value": "The LengthPrefixedString represents a string value. The string is prefixed by the length of the UTF-8 encoded string in bytes. The length is encoded in a variable-length field with a minimum of 1 byte and a maximum of 5 bytes. To minimize the wire size, length is encoded as a variable-length field.\n\n0 1    2   3 4 5 6   7 8       9  0    1       2   3 4 5 6    7 8   9   0    1       2 3    4  5  6  7  8  9  0  1\nLength (variable)\n...\nString (variable)\n...\n\nLength (variable): A numerical value that can range from 0 to 2147483647 (231) inclusive.\n\nTo minimize the wire size, the encoding of the length MUST be encoded as follows:\n\n- The Length field MUST be at least 1 byte and MUST NOT be more than 5 bytes.\n- Each byte MUST hold the Length value in its lower 7 bits.\n- The high bit MUST be used to indicate that the length continues in the next byte.\n- In the case that all 5 bytes are used, the high 5 bits in the fifth byte MUST be 0.",
          "md": "The LengthPrefixedString represents a string value. The string is prefixed by the length of the UTF-8 encoded string in bytes. The length is encoded in a variable-length field with a minimum of 1 byte and a maximum of 5 bytes. To minimize the wire size, length is encoded as a variable-length field.\n\n0 1    2   3 4 5 6   7 8       9  0    1       2   3 4 5 6    7 8   9   0    1       2 3    4  5  6  7  8  9  0  1\nLength (variable)\n...\nString (variable)\n...\n\nLength (variable): A numerical value that can range from 0 to 2147483647 (231) inclusive.\n\nTo minimize the wire size, the encoding of the length MUST be encoded as follows:\n\n- The Length field MUST be at least 1 byte and MUST NOT be more than 5 bytes.\n- Each byte MUST hold the Length value in its lower 7 bits.\n- The high bit MUST be used to indicate that the length continues in the next byte.\n- In the case that all 5 bytes are used, the high 5 bits in the fifth byte MUST be 0.",
          "bBox": {
            "x": 72.1,
            "y": 60,
            "w": 462.95,
            "h": 606.1
          }
        },
        {
          "type": "table",
          "rows": [
            [
              "0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1",
              "",
              ""
            ],
            [
              "Length_0-6",
              "A",
              ""
            ]
          ],
          "md": "| 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 |   |   |\n| --------------------------------------------------------------- | - | - |\n| Length\\_0-6                                                     | A |   |",
          "isPerfectTable": true,
          "csv": "\"0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\",\"\",\"\"\n\"Length_0-6\",\"A\",\"\"",
          "bBox": {
            "x": 72.1,
            "y": 60,
            "w": 467.9,
            "h": 694.15
          }
        },
        {
          "type": "text",
          "value": "Length_0-6 (7 bits): Length values range from 0 to 127 (7 bits).\n\nA - Reserved_7 (1 bit): The value MUST be 0.",
          "md": "Length_0-6 (7 bits): Length values range from 0 to 127 (7 bits).\n\nA - Reserved_7 (1 bit): The value MUST be 0.",
          "bBox": {
            "x": 75.65,
            "y": 60,
            "w": 442.2,
            "h": 606.1
          }
        },
        {
          "type": "table",
          "rows": [
            [
              "",
              "",
              "",
              "",
              "0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1",
              "",
              "",
              ""
            ],
            [
              "",
              "Length_0-6",
              "A",
              "Length_8-14",
              "B",
              "",
              "",
              ""
            ]
          ],
          "md": "|   |             |   |              | 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 |   |   |   |\n| - | ----------- | - | ------------ | --------------------------------------------------------------- | - | - | - |\n|   | Length\\_0-6 | A | Length\\_8-14 | B                                                               |   |   |   |",
          "isPerfectTable": true,
          "csv": "\"\",\"\",\"\",\"\",\"0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\",\"\",\"\",\"\"\n\"\",\"Length_0-6\",\"A\",\"Length_8-14\",\"B\",\"\",\"\",\"\"",
          "bBox": {
            "x": 72.1,
            "y": 60,
            "w": 467.9,
            "h": 694.15
          }
        },
        {
          "type": "text",
          "value": "15 / 55\n[MS-NRBF] - v20190313\n.NET Remoting: Binary Format Data Structure\nCopyright © 2019 Microsoft Corporation\nRelease: March 13, 2019",
          "md": "15 / 55\n[MS-NRBF] - v20190313\n.NET Remoting: Binary Format Data Structure\nCopyright © 2019 Microsoft Corporation\nRelease: March 13, 2019",
          "bBox": {
            "x": 72.1,
            "y": 70.9,
            "w": 467.9,
            "h": 683.25
          }
        }
      ],
      "status": "OK",
      "originalOrientationAngle": 0,
      "links": [
      ],
      "width": 612,
      "height": 792,
      "triggeredAutoMode": false,
      "parsingMode": "accurate",
      "structuredData": null,
      "noStructuredContent": false,
      "noTextContent": false,
      "pageHeaderMarkdown": "\nValu\ne     Meaning\n",
      "pageFooterMarkdown": "\n15 / 55\n[MS-NRBF] - v20190313\n.NET Remoting: Binary Format Data Structure\nCopyright © 2019 Microsoft Corporation\nRelease: March 13, 2019\n",
      "confidence": 0.981
    },
    {
      "page": 16,
      "text": " Length_0-6 (7 bits): Length values range from 128 to 16383 (14 bits).\n\n A - Reserved_7 (1 bit): The value MUST be 1.\n\n Length_8-14 (7 bits): Length values range from 128 to 16383 (14 bits).\n\n B - Reserved_15 (1 bit): The value MUST be 0.\n\n                                    1                             2                        3\n 0 1 2 3 4 5           6  7    8 9  0    1 2 3 4    5    6 7 8 9  0    1 2 3 4 5 6 7 8 9   0 1\n\n   Length_0-6             A         Length_8-14     B     Length_16-22     C\n\n Length_0-6 (7 bits): Length values range from 16384 to 2097151 (21 bits).\n\n A - Reserved_7 (1 bit): The value MUST be 1.\n\n Length_8-14 (7 bits): Length values range from 16384 to 2097151 (21 bits).\n\n B - Reserved_15 (1 bit): The value MUST be 1.\n\n Length_16-22 (7 bits): Length values range from 16384 to 2097151 (21 bits).\n\n C - Reserved_23 (1 bit): The value MUST be 0.\n\n                                    1                             2                        3\n 0 1 2 3 4 5           6  7    8 9  0    1 2 3 4    5    6 7 8 9  0    1 2 3 4 5 6  7 8 9  0   1\n\n   Length_0-6             A         Length_8-14     B     Length_16-22     C   Length_24-30    D\n\n Length_0-6 (7 bits): Length values range from 2097152 to 268435445 (28 bits).\n\n A - Reserved_7 (1 bit): The value MUST be 1.\n\n Length_8-14 (7 bits): Length values range from 2097152 to 268435445 (28 bits).\n\n B - Reserved_15 (1 bit): The value MUST be 1.\n\n Length_16-22 (7 bits): Length values range from 2097152 to 268435445 (28 bits).\n\n C - Reserved_23 (1 bit): The value MUST be 1.\n\n Length_24-30 (7 bits): Length values range from 2097152 to 268435445 (28 bits).\n\n D - Reserved_31 (1 bit): The value MUST be 0.\n\n                                    1                             2                        3\n 0 1 2 3 4 5           6  7    8 9  0    1 2 3 4    5    6 7 8 9  0    1 2 3  4 5 6 7 8 9  0   1\n\n   Length_0-6             A         Length_8-14     B     Length_16-22     C   Length_24-30    D\n\n  Length_32-38            E\n\n Length_0-6 (7 bits): Length values range from 268435456 to 2147483647 (31 bits).\n\n A - Reserved_7 (1 bit): The value MUST be 1.\n\n                                                                                             16 / 55\n[MS-NRBF] - v20190313\n.NET Remoting: Binary Format Data Structure\nCopyright © 2019 Microsoft Corporation\nRelease: March 13, 2019",
      "md": "\n# [MS-NRBF] - v20190313\n\n# .NET Remoting: Binary Format Data Structure\n\nCopyright © 2019 Microsoft Corporation\n\nRelease: March 13, 2019\n\nLength_0-6 (7 bits): Length values range from 128 to 16383 (14 bits).\n\nA - Reserved_7 (1 bit): The value MUST be 1.\n\nLength_8-14 (7 bits): Length values range from 128 to 16383 (14 bits).\n\nB - Reserved_15 (1 bit): The value MUST be 0.\n\n|             |   |              |   |               |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |\n| ----------- | - | ------------ | - | ------------- | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - |\n| 0           | 1 | 2            | 3 | 4             | 5 | 6 | 7 | 8 | 9 | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 0 | 1 |\n| Length\\_0-6 | A | Length\\_8-14 | B | Length\\_16-22 | C |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |\n\nLength_0-6 (7 bits): Length values range from 16384 to 2097151 (21 bits).\n\nA - Reserved_7 (1 bit): The value MUST be 1.\n\nLength_8-14 (7 bits): Length values range from 16384 to 2097151 (21 bits).\n\nB - Reserved_15 (1 bit): The value MUST be 1.\n\nLength_16-22 (7 bits): Length values range from 16384 to 2097151 (21 bits).\n\nC - Reserved_23 (1 bit): The value MUST be 0.\n\n|             |   |              |   |               |   |               |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |\n| ----------- | - | ------------ | - | ------------- | - | ------------- | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - |\n| 0           | 1 | 2            | 3 | 4             | 5 | 6             | 7 | 8 | 9 | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 0 | 1 |\n| Length\\_0-6 | A | Length\\_8-14 | B | Length\\_16-22 | C | Length\\_24-30 | D |   |   |   |   |   |   |   |   |   |   |   |   |   |   |\n\nLength_0-6 (7 bits): Length values range from 2097152 to 268435445 (28 bits).\n\nA - Reserved_7 (1 bit): The value MUST be 1.\n\nLength_8-14 (7 bits): Length values range from 2097152 to 268435445 (28 bits).\n\nB - Reserved_15 (1 bit): The value MUST be 1.\n\nLength_16-22 (7 bits): Length values range from 2097152 to 268435445 (28 bits).\n\nC - Reserved_23 (1 bit): The value MUST be 1.\n\nLength_24-30 (7 bits): Length values range from 2097152 to 268435445 (28 bits).\n\nD - Reserved_31 (1 bit): The value MUST be 0.\n\n|             |   |              |   |               |   |               |   |               |   |   |   |   |   |   |   |   |   |   |   |   |   |\n| ----------- | - | ------------ | - | ------------- | - | ------------- | - | ------------- | - | - | - | - | - | - | - | - | - | - | - | - | - |\n| 0           | 1 | 2            | 3 | 4             | 5 | 6             | 7 | 8             | 9 | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 0 | 1 |\n| Length\\_0-6 | A | Length\\_8-14 | B | Length\\_16-22 | C | Length\\_24-30 | D | Length\\_32-38 | E |   |   |   |   |   |   |   |   |   |   |   |   |\n\nLength_0-6 (7 bits): Length values range from 268435456 to 2147483647 (31 bits).\n\nA - Reserved_7 (1 bit): The value MUST be 1.",
      "images": [
      ],
      "charts": [
      ],
      "items": [
        {
          "type": "heading",
          "lvl": 1,
          "value": "[MS-NRBF] - v20190313",
          "md": "# [MS-NRBF] - v20190313",
          "bBox": {
            "x": 72.1,
            "y": 143.25,
            "w": 445.75,
            "h": 578.2
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": ".NET Remoting: Binary Format Data Structure",
          "md": "# .NET Remoting: Binary Format Data Structure",
          "bBox": {
            "x": 72.1,
            "y": 177.95,
            "w": 446.2,
            "h": 554.4
          }
        },
        {
          "type": "text",
          "value": "Copyright © 2019 Microsoft Corporation\n\nRelease: March 13, 2019\n\nLength_0-6 (7 bits): Length values range from 128 to 16383 (14 bits).\n\nA - Reserved_7 (1 bit): The value MUST be 1.\n\nLength_8-14 (7 bits): Length values range from 128 to 16383 (14 bits).\n\nB - Reserved_15 (1 bit): The value MUST be 0.",
          "md": "Copyright © 2019 Microsoft Corporation\n\nRelease: March 13, 2019\n\nLength_0-6 (7 bits): Length values range from 128 to 16383 (14 bits).\n\nA - Reserved_7 (1 bit): The value MUST be 1.\n\nLength_8-14 (7 bits): Length values range from 128 to 16383 (14 bits).\n\nB - Reserved_15 (1 bit): The value MUST be 0.",
          "bBox": {
            "x": 72.1,
            "y": 55.15,
            "w": 446.2,
            "h": 699
          }
        },
        {
          "type": "table",
          "rows": [
            [
              "0",
              "1",
              "2",
              "3",
              "4",
              "5",
              "6",
              "7",
              "8",
              "9",
              "0",
              "1",
              "2",
              "3",
              "4",
              "5",
              "6",
              "7",
              "8",
              "9",
              "0",
              "1"
            ],
            [
              "Length_0-6",
              "A",
              "Length_8-14",
              "B",
              "Length_16-22",
              "C",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              ""
            ]
          ],
          "md": "|             |   |              |   |               |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |\n| ----------- | - | ------------ | - | ------------- | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - |\n| 0           | 1 | 2            | 3 | 4             | 5 | 6 | 7 | 8 | 9 | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 0 | 1 |\n| Length\\_0-6 | A | Length\\_8-14 | B | Length\\_16-22 | C |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |",
          "isPerfectTable": true,
          "csv": "\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"0\",\"1\"\n\"Length_0-6\",\"A\",\"Length_8-14\",\"B\",\"Length_16-22\",\"C\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\"",
          "bBox": {
            "x": 72.1,
            "y": 55.15,
            "w": 467.9,
            "h": 699
          }
        },
        {
          "type": "text",
          "value": "Length_0-6 (7 bits): Length values range from 16384 to 2097151 (21 bits).\n\nA - Reserved_7 (1 bit): The value MUST be 1.\n\nLength_8-14 (7 bits): Length values range from 16384 to 2097151 (21 bits).\n\nB - Reserved_15 (1 bit): The value MUST be 1.\n\nLength_16-22 (7 bits): Length values range from 16384 to 2097151 (21 bits).\n\nC - Reserved_23 (1 bit): The value MUST be 0.",
          "md": "Length_0-6 (7 bits): Length values range from 16384 to 2097151 (21 bits).\n\nA - Reserved_7 (1 bit): The value MUST be 1.\n\nLength_8-14 (7 bits): Length values range from 16384 to 2097151 (21 bits).\n\nB - Reserved_15 (1 bit): The value MUST be 1.\n\nLength_16-22 (7 bits): Length values range from 16384 to 2097151 (21 bits).\n\nC - Reserved_23 (1 bit): The value MUST be 0.",
          "bBox": {
            "x": 90.1,
            "y": 76.45,
            "w": 428.2,
            "h": 601.4
          }
        },
        {
          "type": "table",
          "rows": [
            [
              "0",
              "1",
              "2",
              "3",
              "4",
              "5",
              "6",
              "7",
              "8",
              "9",
              "0",
              "1",
              "2",
              "3",
              "4",
              "5",
              "6",
              "7",
              "8",
              "9",
              "0",
              "1"
            ],
            [
              "Length_0-6",
              "A",
              "Length_8-14",
              "B",
              "Length_16-22",
              "C",
              "Length_24-30",
              "D",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              ""
            ]
          ],
          "md": "|             |   |              |   |               |   |               |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |\n| ----------- | - | ------------ | - | ------------- | - | ------------- | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - |\n| 0           | 1 | 2            | 3 | 4             | 5 | 6             | 7 | 8 | 9 | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 0 | 1 |\n| Length\\_0-6 | A | Length\\_8-14 | B | Length\\_16-22 | C | Length\\_24-30 | D |   |   |   |   |   |   |   |   |   |   |   |   |   |   |",
          "isPerfectTable": true,
          "csv": "\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"0\",\"1\"\n\"Length_0-6\",\"A\",\"Length_8-14\",\"B\",\"Length_16-22\",\"C\",\"Length_24-30\",\"D\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\"",
          "bBox": {
            "x": 72.1,
            "y": 55.15,
            "w": 467.9,
            "h": 699
          }
        },
        {
          "type": "text",
          "value": "Length_0-6 (7 bits): Length values range from 2097152 to 268435445 (28 bits).\n\nA - Reserved_7 (1 bit): The value MUST be 1.\n\nLength_8-14 (7 bits): Length values range from 2097152 to 268435445 (28 bits).\n\nB - Reserved_15 (1 bit): The value MUST be 1.\n\nLength_16-22 (7 bits): Length values range from 2097152 to 268435445 (28 bits).\n\nC - Reserved_23 (1 bit): The value MUST be 1.\n\nLength_24-30 (7 bits): Length values range from 2097152 to 268435445 (28 bits).\n\nD - Reserved_31 (1 bit): The value MUST be 0.",
          "md": "Length_0-6 (7 bits): Length values range from 2097152 to 268435445 (28 bits).\n\nA - Reserved_7 (1 bit): The value MUST be 1.\n\nLength_8-14 (7 bits): Length values range from 2097152 to 268435445 (28 bits).\n\nB - Reserved_15 (1 bit): The value MUST be 1.\n\nLength_16-22 (7 bits): Length values range from 2097152 to 268435445 (28 bits).\n\nC - Reserved_23 (1 bit): The value MUST be 1.\n\nLength_24-30 (7 bits): Length values range from 2097152 to 268435445 (28 bits).\n\nD - Reserved_31 (1 bit): The value MUST be 0.",
          "bBox": {
            "x": 90.1,
            "y": 76.45,
            "w": 428.2,
            "h": 601.4
          }
        },
        {
          "type": "table",
          "rows": [
            [
              "0",
              "1",
              "2",
              "3",
              "4",
              "5",
              "6",
              "7",
              "8",
              "9",
              "0",
              "1",
              "2",
              "3",
              "4",
              "5",
              "6",
              "7",
              "8",
              "9",
              "0",
              "1"
            ],
            [
              "Length_0-6",
              "A",
              "Length_8-14",
              "B",
              "Length_16-22",
              "C",
              "Length_24-30",
              "D",
              "Length_32-38",
              "E",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              ""
            ]
          ],
          "md": "|             |   |              |   |               |   |               |   |               |   |   |   |   |   |   |   |   |   |   |   |   |   |\n| ----------- | - | ------------ | - | ------------- | - | ------------- | - | ------------- | - | - | - | - | - | - | - | - | - | - | - | - | - |\n| 0           | 1 | 2            | 3 | 4             | 5 | 6             | 7 | 8             | 9 | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 0 | 1 |\n| Length\\_0-6 | A | Length\\_8-14 | B | Length\\_16-22 | C | Length\\_24-30 | D | Length\\_32-38 | E |   |   |   |   |   |   |   |   |   |   |   |   |",
          "isPerfectTable": true,
          "csv": "\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"0\",\"1\"\n\"Length_0-6\",\"A\",\"Length_8-14\",\"B\",\"Length_16-22\",\"C\",\"Length_24-30\",\"D\",\"Length_32-38\",\"E\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\"",
          "bBox": {
            "x": 72.1,
            "y": 55.15,
            "w": 467.9,
            "h": 699
          }
        },
        {
          "type": "text",
          "value": "Length_0-6 (7 bits): Length values range from 268435456 to 2147483647 (31 bits).\n\nA - Reserved_7 (1 bit): The value MUST be 1.",
          "md": "Length_0-6 (7 bits): Length values range from 268435456 to 2147483647 (31 bits).\n\nA - Reserved_7 (1 bit): The value MUST be 1.",
          "bBox": {
            "x": 90.1,
            "y": 76.45,
            "w": 428.2,
            "h": 601.4
          }
        }
      ],
      "status": "OK",
      "originalOrientationAngle": 0,
      "links": [
      ],
      "width": 612,
      "height": 792,
      "triggeredAutoMode": false,
      "parsingMode": "accurate",
      "structuredData": null,
      "noStructuredContent": false,
      "noTextContent": false,
      "pageHeaderMarkdown": "\n# [MS-NRBF] - v20190313\n\n# .NET Remoting: Binary Format Data Structure\n\nCopyright © 2019 Microsoft Corporation\n\nRelease: March 13, 2019\n\n",
      "pageFooterMarkdown": "",
      "confidence": 0.941
    },
    {
      "page": 17,
      "text": "      Length_8-14 (7 bits): Length values range from 268435456 to 2147483647 (31 bits).\n\n      B - Reserved_15 (1 bit): The value MUST be 1.\n\n      Length_16-22 (7 bits): Length values range from 268435456 to 2147483647 (31 bits).\n\n      C - Reserved_23 (1 bit): The value MUST be 1.\n\n      Length_24-30 (7 bits): Length values range from 268435456 to 2147483647 (31 bits).\n\n      D - Reserved_31 (1 bit): The value MUST be 1.\n\n      Length_32-38 (7 bits): Length values range from 268435456 to 2147483647 (31 bits).\n\n      E - Reserved_39 (1 bit): The value MUST be 0.\n\nString (variable): A UTF-8 encoded string value. The number of bytes of the encoded string MUST be\n      equal to the value specified in the Length field.\n\n2.1.1.7 Decimal\n\nThe Decimal represents a decimal value. It has the following format.\n\n                                   1                         2                             3\n0    1 2 3      4 5      6 7 8  9  0    1 2 3 4 5 6   7 8 9  0    1       2 3 4 5 6 7 8 9  0 1\n\n                                            Value (variable)\n\n                                                  ...\n\nValue (variable): A LengthPrefixedString value that is the string representation of the decimal value.\n      The string MUST be of the following format.\n\n       Formats for decimal value\n\n       Value               =    0*1(MINUS)IntegralPart 0*1(FractionalPart)\n\n       IntegralPart        =    1*(DIGIT)\n\n       FractionalPart      =    DECIMALPOINT 1*(DIGIT)\n\n       MINUS               =   '-'\n\n       DECIMALPOINT        =   '.'\n\nThe decimal value ranges from positive 79,228,162,514,264,337,593,543,950,335 to negative\n79,228,162,514,264,337,593,543,950,335 inclusive.\n\nWhen reading this value, if all of the following are true:\n\n§     The string has more than 29 digits, including both the IntegralPart and the FractionalPart.\n\n§     The net value is within the decimal value range.\n\n§     The number of digits in the Integral part is less than or equal to 29.\n\n                                                                                                 17 / 55\n[MS-NRBF] - v20190313\n.NET Remoting: Binary Format Data Structure\nCopyright © 2019 Microsoft Corporation\nRelease: March 13, 2019",
      "md": "\n# 2.1.1.7 Decimal\n\nThe Decimal represents a decimal value. It has the following format.\n\n1                         2                             3\n0    1 2 3      4 5      6 7 8  9  0    1 2 3 4 5 6   7 8 9  0    1       2 3 4 5 6 7 8 9  0 1\n\nValue (variable)\n\n...\n\nValue (variable): A LengthPrefixedString value that is the string representation of the decimal value. The string MUST be of the following format.\n\n# Formats for decimal value\n\nValue               =    0*1(MINUS)IntegralPart 0*1(FractionalPart)\n\nIntegralPart        =    1*(DIGIT)\n\nFractionalPart      =    DECIMALPOINT 1*(DIGIT)\n\nMINUS               =   '-'\n\nDECIMALPOINT        =   '.'\n\nThe decimal value ranges from positive 79,228,162,514,264,337,593,543,950,335 to negative 79,228,162,514,264,337,593,543,950,335 inclusive.\n\nWhen reading this value, if all of the following are true:\n\n- The string has more than 29 digits, including both the IntegralPart and the FractionalPart.\n- The net value is within the decimal value range.\n- The number of digits in the Integral part is less than or equal to 29.\n\n",
      "images": [
      ],
      "charts": [
      ],
      "items": [
        {
          "type": "heading",
          "lvl": 1,
          "value": "2.1.1.7 Decimal",
          "md": "# 2.1.1.7 Decimal",
          "bBox": {
            "x": 72.1,
            "y": 266.3,
            "w": 427.05,
            "h": 66.6
          }
        },
        {
          "type": "text",
          "value": "The Decimal represents a decimal value. It has the following format.\n\n1                         2                             3\n0    1 2 3      4 5      6 7 8  9  0    1 2 3 4 5 6   7 8 9  0    1       2 3 4 5 6 7 8 9  0 1\n\nValue (variable)\n\n...\n\nValue (variable): A LengthPrefixedString value that is the string representation of the decimal value. The string MUST be of the following format.",
          "md": "The Decimal represents a decimal value. It has the following format.\n\n1                         2                             3\n0    1 2 3      4 5      6 7 8  9  0    1 2 3 4 5 6   7 8 9  0    1       2 3 4 5 6 7 8 9  0 1\n\nValue (variable)\n\n...\n\nValue (variable): A LengthPrefixedString value that is the string representation of the decimal value. The string MUST be of the following format.",
          "bBox": {
            "x": 72.1,
            "y": 288.8,
            "w": 463.16,
            "h": 174.05
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "Formats for decimal value",
          "md": "# Formats for decimal value",
          "bBox": {
            "x": 98.35,
            "y": 434.55,
            "w": 117.8,
            "h": 28.3
          }
        },
        {
          "type": "text",
          "value": "Value               =    0*1(MINUS)IntegralPart 0*1(FractionalPart)\n\nIntegralPart        =    1*(DIGIT)\n\nFractionalPart      =    DECIMALPOINT 1*(DIGIT)\n\nMINUS               =   '-'\n\nDECIMALPOINT        =   '.'\n\nThe decimal value ranges from positive 79,228,162,514,264,337,593,543,950,335 to negative 79,228,162,514,264,337,593,543,950,335 inclusive.\n\nWhen reading this value, if all of the following are true:\n\n- The string has more than 29 digits, including both the IntegralPart and the FractionalPart.\n- The net value is within the decimal value range.\n- The number of digits in the Integral part is less than or equal to 29.",
          "md": "Value               =    0*1(MINUS)IntegralPart 0*1(FractionalPart)\n\nIntegralPart        =    1*(DIGIT)\n\nFractionalPart      =    DECIMALPOINT 1*(DIGIT)\n\nMINUS               =   '-'\n\nDECIMALPOINT        =   '.'\n\nThe decimal value ranges from positive 79,228,162,514,264,337,593,543,950,335 to negative 79,228,162,514,264,337,593,543,950,335 inclusive.\n\nWhen reading this value, if all of the following are true:\n\n- The string has more than 29 digits, including both the IntegralPart and the FractionalPart.\n- The net value is within the decimal value range.\n- The number of digits in the Integral part is less than or equal to 29.",
          "bBox": {
            "x": 72.1,
            "y": 313,
            "w": 427.05,
            "h": 354.5
          }
        }
      ],
      "status": "OK",
      "originalOrientationAngle": 0,
      "links": [
      ],
      "width": 612,
      "height": 792,
      "triggeredAutoMode": false,
      "parsingMode": "accurate",
      "structuredData": null,
      "noStructuredContent": false,
      "noTextContent": false,
      "pageHeaderMarkdown": "",
      "pageFooterMarkdown": "",
      "confidence": 0.541
    },
    {
      "page": 18,
      "text": "then the decimal value MUST be rounded to the nearest value such that the total number of digits is\n29.\n\n2.1.1.8 ClassTypeInfo\n\nThe ClassTypeInfo identifies a Class (2) by its name and reference to BinaryLibrary record.\n\n                                1                           2                                3\n0  1  2 3       4 5    6 7 8 9  0    1 2 3 4 5    6 7 8 9   0          1 2 3    4 5 6 7 8 9  0 1\n\n                                         TypeName (variable)\n\n                                               ...\n\n                                             LibraryId\n\nTypeName (variable): A LengthPrefixedString value that contains the name of the Class (2). The\n   format of the string is specified in [MS-NRTP] section 2.2.1.2.\n\nLibraryId (4 bytes): An INT32 (as specified in [MS-DTYP] section 2.2.22) value that represents the ID\n   that identifies the Library name. The record that contains this field in a serialization stream\n   MUST be preceded by a BinaryLibrary record that defines the Library name for the ID.\n\n2.1.2   Enumerations\n\n2.1.2.1 RecordTypeEnumeration\n\nThis enumeration identifies the type of the record. Each record (except for MemberPrimitiveUnTyped)\nstarts with a record type enumeration. The size of the enumeration is one BYTE.\n\n Constant/value                        Description\n\n SerializedStreamHeader                Identifies the SerializationHeaderRecord.\n 0\n\n ClassWithId                           Identifies a ClassWithId record.\n 1\n\n SystemClassWithMembers                Identifies a SystemClassWithMembers record.\n 2\n\n ClassWithMembers                      Identifies a ClassWithMembers record.\n 3\n\n SystemClassWithMembersAndType         Identifies a SystemClassWithMembersAndTypes record.\n s\n 4\n\n ClassWithMembersAndTypes              Identifies a ClassWithMembersAndTypes record.\n 5\n\n BinaryObjectString                    Identifies a BinaryObjectString record.\n\n                                                                                                18 / 55\n[MS-NRBF] - v20190313\n.NET Remoting: Binary Format Data Structure\nCopyright © 2019 Microsoft Corporation\nRelease: March 13, 2019",
      "md": "\nthen the decimal value MUST be rounded to the nearest value such that the total number of digits is 29.\n\n# 2.1.1.8 ClassTypeInfo\n\nThe ClassTypeInfo identifies a Class (2) by its name and reference to BinaryLibrary record.\n\n| 0 | 1 | 2 | 3                   | 4   | 5 | 6 | 7 | 8 | 9 | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 0 |\n| - | - | - | ------------------- | --- | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - |\n|   |   |   | TypeName (variable) | ... |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |\n|   |   |   | LibraryId           |     |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |\n\nTypeName (variable): A LengthPrefixedString value that contains the name of the Class (2). The format of the string is specified in [MS-NRTP] section 2.2.1.2.\n\nLibraryId (4 bytes): An INT32 (as specified in [MS-DTYP] section 2.2.22) value that represents the ID that identifies the Library name. The record that contains this field in a serialization stream MUST be preceded by a BinaryLibrary record that defines the Library name for the ID.\n\n# 2.1.2 Enumerations\n\n# 2.1.2.1 RecordTypeEnumeration\n\nThis enumeration identifies the type of the record. Each record (except for MemberPrimitiveUnTyped) starts with a record type enumeration. The size of the enumeration is one BYTE.\n\n| Constant/value                | Description                                         |\n| ----------------------------- | --------------------------------------------------- |\n| SerializedStreamHeader        | Identifies the SerializationHeaderRecord.           |\n| ClassWithId                   | Identifies a ClassWithId record.                    |\n| SystemClassWithMembers        | Identifies a SystemClassWithMembers record.         |\n| ClassWithMembers              | Identifies a ClassWithMembers record.               |\n| SystemClassWithMembersAndType | Identifies a SystemClassWithMembersAndTypes record. |\n| ClassWithMembersAndTypes      | Identifies a ClassWithMembersAndTypes record.       |\n| BinaryObjectString            | Identifies a BinaryObjectString record.             |\n\n",
      "images": [
      ],
      "charts": [
      ],
      "items": [
        {
          "type": "text",
          "value": "then the decimal value MUST be rounded to the nearest value such that the total number of digits is 29.",
          "md": "then the decimal value MUST be rounded to the nearest value such that the total number of digits is 29.",
          "bBox": {
            "x": 72.1,
            "y": 55.15,
            "w": 453.5,
            "h": 548.3
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "2.1.1.8 ClassTypeInfo",
          "md": "# 2.1.1.8 ClassTypeInfo",
          "bBox": {
            "x": 72.1,
            "y": 95.9,
            "w": 427.05,
            "h": 507.55
          }
        },
        {
          "type": "text",
          "value": "The ClassTypeInfo identifies a Class (2) by its name and reference to BinaryLibrary record.",
          "md": "The ClassTypeInfo identifies a Class (2) by its name and reference to BinaryLibrary record.",
          "bBox": {
            "x": 72.1,
            "y": 118.4,
            "w": 413.7,
            "h": 485.05
          }
        },
        {
          "type": "table",
          "rows": [
            [
              "0",
              "1",
              "2",
              "3",
              "4",
              "5",
              "6",
              "7",
              "8",
              "9",
              "0",
              "1",
              "2",
              "3",
              "4",
              "5",
              "6",
              "7",
              "8",
              "9",
              "0",
              "1",
              "2",
              "3",
              "4",
              "5",
              "6",
              "7",
              "8",
              "9",
              "0"
            ],
            [
              "",
              "",
              "",
              "TypeName (variable)",
              "...",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              ""
            ],
            [
              "",
              "",
              "",
              "LibraryId",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              ""
            ]
          ],
          "md": "| 0 | 1 | 2 | 3                   | 4   | 5 | 6 | 7 | 8 | 9 | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 0 |\n| - | - | - | ------------------- | --- | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - |\n|   |   |   | TypeName (variable) | ... |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |\n|   |   |   | LibraryId           |     |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |",
          "isPerfectTable": true,
          "csv": "\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"0\"\n\"\",\"\",\"\",\"TypeName (variable)\",\"...\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\"\n\"\",\"\",\"\",\"LibraryId\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\"",
          "bBox": {
            "x": 72.1,
            "y": 55.15,
            "w": 467.9,
            "h": 699
          }
        },
        {
          "type": "text",
          "value": "TypeName (variable): A LengthPrefixedString value that contains the name of the Class (2). The format of the string is specified in [MS-NRTP] section 2.2.1.2.\n\nLibraryId (4 bytes): An INT32 (as specified in [MS-DTYP] section 2.2.22) value that represents the ID that identifies the Library name. The record that contains this field in a serialization stream MUST be preceded by a BinaryLibrary record that defines the Library name for the ID.",
          "md": "TypeName (variable): A LengthPrefixedString value that contains the name of the Class (2). The format of the string is specified in [MS-NRTP] section 2.2.1.2.\n\nLibraryId (4 bytes): An INT32 (as specified in [MS-DTYP] section 2.2.22) value that represents the ID that identifies the Library name. The record that contains this field in a serialization stream MUST be preceded by a BinaryLibrary record that defines the Library name for the ID.",
          "bBox": {
            "x": 72.1,
            "y": 142.6,
            "w": 463.54,
            "h": 474.75
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "2.1.2 Enumerations",
          "md": "# 2.1.2 Enumerations",
          "bBox": {
            "x": 72.1,
            "y": 142.6,
            "w": 427.05,
            "h": 460.85
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "2.1.2.1 RecordTypeEnumeration",
          "md": "# 2.1.2.1 RecordTypeEnumeration",
          "bBox": {
            "x": 72.1,
            "y": 142.6,
            "w": 427.05,
            "h": 395.45
          }
        },
        {
          "type": "text",
          "value": "This enumeration identifies the type of the record. Each record (except for MemberPrimitiveUnTyped) starts with a record type enumeration. The size of the enumeration is one BYTE.",
          "md": "This enumeration identifies the type of the record. Each record (except for MemberPrimitiveUnTyped) starts with a record type enumeration. The size of the enumeration is one BYTE.",
          "bBox": {
            "x": 72.1,
            "y": 389,
            "w": 464.15,
            "h": 214.45
          }
        },
        {
          "type": "table",
          "rows": [
            [
              "Constant/value",
              "Description"
            ],
            [
              "SerializedStreamHeader",
              "Identifies the SerializationHeaderRecord."
            ],
            [
              "ClassWithId",
              "Identifies a ClassWithId record."
            ],
            [
              "SystemClassWithMembers",
              "Identifies a SystemClassWithMembers record."
            ],
            [
              "ClassWithMembers",
              "Identifies a ClassWithMembers record."
            ],
            [
              "SystemClassWithMembersAndType",
              "Identifies a SystemClassWithMembersAndTypes record."
            ],
            [
              "ClassWithMembersAndTypes",
              "Identifies a ClassWithMembersAndTypes record."
            ],
            [
              "BinaryObjectString",
              "Identifies a BinaryObjectString record."
            ]
          ],
          "md": "| Constant/value                | Description                                         |\n| ----------------------------- | --------------------------------------------------- |\n| SerializedStreamHeader        | Identifies the SerializationHeaderRecord.           |\n| ClassWithId                   | Identifies a ClassWithId record.                    |\n| SystemClassWithMembers        | Identifies a SystemClassWithMembers record.         |\n| ClassWithMembers              | Identifies a ClassWithMembers record.               |\n| SystemClassWithMembersAndType | Identifies a SystemClassWithMembersAndTypes record. |\n| ClassWithMembersAndTypes      | Identifies a ClassWithMembersAndTypes record.       |\n| BinaryObjectString            | Identifies a BinaryObjectString record.             |",
          "isPerfectTable": true,
          "csv": "\"Constant/value\",\"Description\"\n\"SerializedStreamHeader\",\"Identifies the SerializationHeaderRecord.\"\n\"ClassWithId\",\"Identifies a ClassWithId record.\"\n\"SystemClassWithMembers\",\"Identifies a SystemClassWithMembers record.\"\n\"ClassWithMembers\",\"Identifies a ClassWithMembers record.\"\n\"SystemClassWithMembersAndType\",\"Identifies a SystemClassWithMembersAndTypes record.\"\n\"ClassWithMembersAndTypes\",\"Identifies a ClassWithMembersAndTypes record.\"\n\"BinaryObjectString\",\"Identifies a BinaryObjectString record.\"",
          "bBox": {
            "x": 77.85,
            "y": 427.45,
            "w": 379.6,
            "h": 244.4
          }
        }
      ],
      "status": "OK",
      "originalOrientationAngle": 0,
      "links": [
        {
          "unsafeUrl": "../../../../../../../upload/%5BMS-DTYP%5D.pdf#Section_cca2742956894a16b2b49325d93e4ba2",
          "text": "[MS-DTYP]"
        },
        {
          "unsafeUrl": "../../../../../../../upload/%5BMS-NRTP%5D.pdf#Section_3acb31b0b8734aaf85039727ec40fbec",
          "text": "[MS-NRTP]"
        }
      ],
      "width": 612,
      "height": 792,
      "triggeredAutoMode": false,
      "parsingMode": "accurate",
      "structuredData": null,
      "noStructuredContent": false,
      "noTextContent": false,
      "pageHeaderMarkdown": "",
      "pageFooterMarkdown": "",
      "confidence": 0.899
    },
    {
      "page": 19,
      "text": "Constant/value            Description\n\n6\n\nBinaryArray               Identifies a BinaryArray record.\n7\n\nMemberPrimitiveTyped      Identifies a MemberPrimitiveTyped record.\n8\n\nMemberReference           Identifies a MemberReference record.\n9\n\nObjectNull                Identifies an ObjectNull record.\n10\n\nMessageEnd                Identifies a MessageEnd record.\n11\n\nBinaryLibrary             Identifies a BinaryLibrary record.\n12\n\nObjectNullMultiple256     Identifies an ObjectNullMultiple256 record.\n13\n\nObjectNullMultiple        Identifies an ObjectNullMultiple record\n14\n\nArraySinglePrimitive      Identifies an ArraySinglePrimitive.\n15\n\nArraySingleObject         Identifies an ArraySingleObject record.\n16\n\nArraySingleString         Identifies an ArraySingleString record.\n17\n\nMethodCall                Identifies a BinaryMethodCall record.\n21\n\nMethodReturn              Identifies a BinaryMethodReturn record.\n22\n\n\n2.1.2.2 BinaryTypeEnumeration\n\nThe BinaryTypeEnumeration identifies the Remoting Type of a Class (2) Member or an Array item.\nThe size of the enumeration is a BYTE.\n\n Constant/value     Description\n\n Primitive          The Remoting Type is defined in PrimitiveTypeEnumeration and the Remoting Type is not a\n                    string.\n\n                                           19 / 55\n\n[MS-NRBF] - v20190313\n.NET Remoting: Binary Format Data Structure\nCopyright © 2019 Microsoft Corporation\nRelease: March 13, 2019",
      "md": "\n# Constant/value\n\n# Description\n\n| 6  | BinaryArray           | Identifies a BinaryArray record.            |\n| -- | --------------------- | ------------------------------------------- |\n| 7  | MemberPrimitiveTyped  | Identifies a MemberPrimitiveTyped record.   |\n| 8  | MemberReference       | Identifies a MemberReference record.        |\n| 9  | ObjectNull            | Identifies an ObjectNull record.            |\n| 10 | MessageEnd            | Identifies a MessageEnd record.             |\n| 11 | BinaryLibrary         | Identifies a BinaryLibrary record.          |\n| 12 | ObjectNullMultiple256 | Identifies an ObjectNullMultiple256 record. |\n| 13 | ObjectNullMultiple    | Identifies an ObjectNullMultiple record     |\n| 14 | ArraySinglePrimitive  | Identifies an ArraySinglePrimitive.         |\n| 15 | ArraySingleObject     | Identifies an ArraySingleObject record.     |\n| 16 | ArraySingleString     | Identifies an ArraySingleString record.     |\n| 17 | MethodCall            | Identifies a BinaryMethodCall record.       |\n| 21 | MethodReturn          | Identifies a BinaryMethodReturn record.     |\n| 22 |                       |                                             |\n\n# 2.1.2.2 BinaryTypeEnumeration\n\nThe BinaryTypeEnumeration identifies the Remoting Type of a Class (2) Member or an Array item. The size of the enumeration is a BYTE.\n\n# Constant/value\n\n# Description\n\n| Primitive | The Remoting Type is defined in PrimitiveTypeEnumeration and the Remoting Type is not a string. |\n| --------- | ----------------------------------------------------------------------------------------------- |\n\n",
      "images": [
      ],
      "charts": [
      ],
      "items": [
        {
          "type": "heading",
          "lvl": 1,
          "value": "Constant/value",
          "md": "# Constant/value",
          "bBox": {
            "x": 77.85,
            "y": 60,
            "w": 68,
            "h": 587.25
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "Description",
          "md": "# Description",
          "bBox": {
            "x": 159.2,
            "y": 60,
            "w": 127.15,
            "h": 587.25
          }
        },
        {
          "type": "table",
          "rows": [
            [
              "6",
              "BinaryArray",
              "Identifies a BinaryArray record."
            ],
            [
              "7",
              "MemberPrimitiveTyped",
              "Identifies a MemberPrimitiveTyped record."
            ],
            [
              "8",
              "MemberReference",
              "Identifies a MemberReference record."
            ],
            [
              "9",
              "ObjectNull",
              "Identifies an ObjectNull record."
            ],
            [
              "10",
              "MessageEnd",
              "Identifies a MessageEnd record."
            ],
            [
              "11",
              "BinaryLibrary",
              "Identifies a BinaryLibrary record."
            ],
            [
              "12",
              "ObjectNullMultiple256",
              "Identifies an ObjectNullMultiple256 record."
            ],
            [
              "13",
              "ObjectNullMultiple",
              "Identifies an ObjectNullMultiple record"
            ],
            [
              "14",
              "ArraySinglePrimitive",
              "Identifies an ArraySinglePrimitive."
            ],
            [
              "15",
              "ArraySingleObject",
              "Identifies an ArraySingleObject record."
            ],
            [
              "16",
              "ArraySingleString",
              "Identifies an ArraySingleString record."
            ],
            [
              "17",
              "MethodCall",
              "Identifies a BinaryMethodCall record."
            ],
            [
              "21",
              "MethodReturn",
              "Identifies a BinaryMethodReturn record."
            ],
            [
              "22",
              "",
              ""
            ]
          ],
          "md": "| 6  | BinaryArray           | Identifies a BinaryArray record.            |\n| -- | --------------------- | ------------------------------------------- |\n| 7  | MemberPrimitiveTyped  | Identifies a MemberPrimitiveTyped record.   |\n| 8  | MemberReference       | Identifies a MemberReference record.        |\n| 9  | ObjectNull            | Identifies an ObjectNull record.            |\n| 10 | MessageEnd            | Identifies a MessageEnd record.             |\n| 11 | BinaryLibrary         | Identifies a BinaryLibrary record.          |\n| 12 | ObjectNullMultiple256 | Identifies an ObjectNullMultiple256 record. |\n| 13 | ObjectNullMultiple    | Identifies an ObjectNullMultiple record     |\n| 14 | ArraySinglePrimitive  | Identifies an ArraySinglePrimitive.         |\n| 15 | ArraySingleObject     | Identifies an ArraySingleObject record.     |\n| 16 | ArraySingleString     | Identifies an ArraySingleString record.     |\n| 17 | MethodCall            | Identifies a BinaryMethodCall record.       |\n| 21 | MethodReturn          | Identifies a BinaryMethodReturn record.     |\n| 22 |                       |                                             |",
          "isPerfectTable": true,
          "csv": "\"6\",\"BinaryArray\",\"Identifies a BinaryArray record.\"\n\"7\",\"MemberPrimitiveTyped\",\"Identifies a MemberPrimitiveTyped record.\"\n\"8\",\"MemberReference\",\"Identifies a MemberReference record.\"\n\"9\",\"ObjectNull\",\"Identifies an ObjectNull record.\"\n\"10\",\"MessageEnd\",\"Identifies a MessageEnd record.\"\n\"11\",\"BinaryLibrary\",\"Identifies a BinaryLibrary record.\"\n\"12\",\"ObjectNullMultiple256\",\"Identifies an ObjectNullMultiple256 record.\"\n\"13\",\"ObjectNullMultiple\",\"Identifies an ObjectNullMultiple record\"\n\"14\",\"ArraySinglePrimitive\",\"Identifies an ArraySinglePrimitive.\"\n\"15\",\"ArraySingleObject\",\"Identifies an ArraySingleObject record.\"\n\"16\",\"ArraySingleString\",\"Identifies an ArraySingleString record.\"\n\"17\",\"MethodCall\",\"Identifies a BinaryMethodCall record.\"\n\"21\",\"MethodReturn\",\"Identifies a BinaryMethodReturn record.\"\n\"22\",\"\",\"\"",
          "bBox": {
            "x": 72.1,
            "y": 60,
            "w": 467.9,
            "h": 694.15
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "2.1.2.2 BinaryTypeEnumeration",
          "md": "# 2.1.2.2 BinaryTypeEnumeration",
          "bBox": {
            "x": 72.1,
            "y": 578.3,
            "w": 174.2,
            "h": 10
          }
        },
        {
          "type": "text",
          "value": "The BinaryTypeEnumeration identifies the Remoting Type of a Class (2) Member or an Array item. The size of the enumeration is a BYTE.",
          "md": "The BinaryTypeEnumeration identifies the Remoting Type of a Class (2) Member or an Array item. The size of the enumeration is a BYTE.",
          "bBox": {
            "x": 72.1,
            "y": 600.8,
            "w": 463.3,
            "h": 21.3
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "Constant/value",
          "md": "# Constant/value",
          "bBox": {
            "x": 77.85,
            "y": 60,
            "w": 68,
            "h": 587.25
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "Description",
          "md": "# Description",
          "bBox": {
            "x": 159.2,
            "y": 60,
            "w": 127.15,
            "h": 587.25
          }
        },
        {
          "type": "table",
          "rows": [
            [
              "Primitive",
              "The Remoting Type is defined in PrimitiveTypeEnumeration and the Remoting Type is not a string."
            ]
          ],
          "md": "| Primitive | The Remoting Type is defined in PrimitiveTypeEnumeration and the Remoting Type is not a string. |\n| --------- | ----------------------------------------------------------------------------------------------- |",
          "isPerfectTable": true,
          "csv": "\"Primitive\",\"The Remoting Type is defined in PrimitiveTypeEnumeration and the Remoting Type is not a string.\"",
          "bBox": {
            "x": 77.85,
            "y": 134.8,
            "w": 448.57,
            "h": 532.75
          }
        }
      ],
      "status": "OK",
      "originalOrientationAngle": 0,
      "links": [
      ],
      "width": 612,
      "height": 792,
      "triggeredAutoMode": false,
      "parsingMode": "accurate",
      "structuredData": null,
      "noStructuredContent": false,
      "noTextContent": false,
      "pageHeaderMarkdown": "",
      "pageFooterMarkdown": "",
      "confidence": 0.884
    },
    {
      "page": 20,
      "text": "Constant/value     Description\n\n0\n\nString             The Remoting Type is a LengthPrefixedString.\n1\n\nObject             The Remoting Type is System.Object.\n2\n\nSystemClass        The Remoting Type is one of the following:\n3                  §     A Class (2) in the System Library\n\n                   §     An Array whose Ultimate Array Item Type is a Class (2) in the System Library\n\n                   §     An Array whose Ultimate Array Item Type is System.Object, String, or a Primitive Type\n                         but does not meet the definition of ObjectArray, StringArray, or PrimitiveArray.\n\nClass              The Remoting Type is a Class (2) or an Array whose Ultimate Array Item Type is a Class (2)\n4                  that is not in the System Library.\n\nObjectArray        The Remoting Type is a single-dimensional Array of System.Object with a lower bound of 0.\n5\n\nStringArray        The Remoting Type is a single-dimensional Array of String with a lower bound of 0.\n6\n\nPrimitiveArray     The Remoting Type is a single-dimensional Array of a Primitive Type with a lower bound of 0.\n7\n\n\n2.1.2.3 PrimitiveTypeEnumeration\n\nThe PrimitiveTypeEnumeration identifies a Primitive Type value. The size of the enumeration is a\nBYTE.\n\n Constant/value     Description\n\n Boolean            Identifies a BOOLEAN as specified in [MS-DTYP] section 2.2.4.\n 1\n\n Byte               Identifies a BYTE as specified in [MS-DTYP] section 2.2.6.\n 2\n\n Char               Identifies a Char (section 2.1.1.1) type.\n 3\n\n                    The value is not used in the protocol.\n 4\n\n Decimal            Identifies a Decimal (section 2.1.1.7).\n 5\n\n                                                                                 20 / 55\n\n[MS-NRBF] - v20190313\n.NET Remoting: Binary Format Data Structure\nCopyright © 2019 Microsoft Corporation\nRelease: March 13, 2019",
      "md": "\n# .NET Remoting: Binary Format Data Structure\n\n# 2.1.2.3 PrimitiveTypeEnumeration\n\nThe PrimitiveTypeEnumeration identifies a Primitive Type value. The size of the enumeration is a BYTE.\n\n| Constant/value | Description                                                                                                                                                              |\n| -------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n| 0              | String - The Remoting Type is a LengthPrefixedString.                                                                                                                    |\n| 1              | Object - The Remoting Type is System.Object.                                                                                                                             |\n| 2              | SystemClass - The Remoting Type is one of the following:                                                                                                                 |\n|                | § A Class (2) in the System Library                                                                                                                                      |\n|                | § An Array whose Ultimate Array Item Type is a Class (2) in the System Library                                                                                           |\n|                | § An Array whose Ultimate Array Item Type is System.Object, String, or a Primitive Type but does not meet the definition of ObjectArray, StringArray, or PrimitiveArray. |\n| 3              | Class - The Remoting Type is a Class (2) or an Array whose Ultimate Array Item Type is a Class (2) that is not in the System Library.                                    |\n| 4              | ObjectArray - The Remoting Type is a single-dimensional Array of System.Object with a lower bound of 0.                                                                  |\n| 5              | StringArray - The Remoting Type is a single-dimensional Array of String with a lower bound of 0.                                                                         |\n| 6              | PrimitiveArray - The Remoting Type is a single-dimensional Array of a Primitive Type with a lower bound of 0.                                                            |\n\nCopyright © 2019 Microsoft Corporation\n\nRelease: March 13, 2019\n\n20 / 55\n\n",
      "images": [
      ],
      "charts": [
      ],
      "items": [
        {
          "type": "heading",
          "lvl": 1,
          "value": ".NET Remoting: Binary Format Data Structure",
          "md": "# .NET Remoting: Binary Format Data Structure",
          "bBox": {
            "x": 72.1,
            "y": 724.35,
            "w": 182.82,
            "h": 8
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "2.1.2.3 PrimitiveTypeEnumeration",
          "md": "# 2.1.2.3 PrimitiveTypeEnumeration",
          "bBox": {
            "x": 72.1,
            "y": 114.5,
            "w": 188.2,
            "h": 492.85
          }
        },
        {
          "type": "text",
          "value": "The PrimitiveTypeEnumeration identifies a Primitive Type value. The size of the enumeration is a BYTE.",
          "md": "The PrimitiveTypeEnumeration identifies a Primitive Type value. The size of the enumeration is a BYTE.",
          "bBox": {
            "x": 72.1,
            "y": 458.3,
            "w": 447.07,
            "h": 100.95
          }
        },
        {
          "type": "table",
          "rows": [
            [
              "Constant/value",
              "Description"
            ],
            [
              "0",
              "String - The Remoting Type is a LengthPrefixedString."
            ],
            [
              "1",
              "Object - The Remoting Type is System.Object."
            ],
            [
              "2",
              "SystemClass - The Remoting Type is one of the following:"
            ],
            [
              "",
              "§ A Class (2) in the System Library"
            ],
            [
              "",
              "§ An Array whose Ultimate Array Item Type is a Class (2) in the System Library"
            ],
            [
              "",
              "§ An Array whose Ultimate Array Item Type is System.Object, String, or a Primitive Type but does not meet the definition of ObjectArray, StringArray, or PrimitiveArray."
            ],
            [
              "3",
              "Class - The Remoting Type is a Class (2) or an Array whose Ultimate Array Item Type is a Class (2) that is not in the System Library."
            ],
            [
              "4",
              "ObjectArray - The Remoting Type is a single-dimensional Array of System.Object with a lower bound of 0."
            ],
            [
              "5",
              "StringArray - The Remoting Type is a single-dimensional Array of String with a lower bound of 0."
            ],
            [
              "6",
              "PrimitiveArray - The Remoting Type is a single-dimensional Array of a Primitive Type with a lower bound of 0."
            ]
          ],
          "md": "| Constant/value | Description                                                                                                                                                              |\n| -------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n| 0              | String - The Remoting Type is a LengthPrefixedString.                                                                                                                    |\n| 1              | Object - The Remoting Type is System.Object.                                                                                                                             |\n| 2              | SystemClass - The Remoting Type is one of the following:                                                                                                                 |\n|                | § A Class (2) in the System Library                                                                                                                                      |\n|                | § An Array whose Ultimate Array Item Type is a Class (2) in the System Library                                                                                           |\n|                | § An Array whose Ultimate Array Item Type is System.Object, String, or a Primitive Type but does not meet the definition of ObjectArray, StringArray, or PrimitiveArray. |\n| 3              | Class - The Remoting Type is a Class (2) or an Array whose Ultimate Array Item Type is a Class (2) that is not in the System Library.                                    |\n| 4              | ObjectArray - The Remoting Type is a single-dimensional Array of System.Object with a lower bound of 0.                                                                  |\n| 5              | StringArray - The Remoting Type is a single-dimensional Array of String with a lower bound of 0.                                                                         |\n| 6              | PrimitiveArray - The Remoting Type is a single-dimensional Array of a Primitive Type with a lower bound of 0.                                                            |",
          "isPerfectTable": true,
          "csv": "\"Constant/value\",\"Description\"\n\"0\",\"String - The Remoting Type is a LengthPrefixedString.\"\n\"1\",\"Object - The Remoting Type is System.Object.\"\n\"2\",\"SystemClass - The Remoting Type is one of the following:\"\n\"\",\"§ A Class (2) in the System Library\"\n\"\",\"§ An Array whose Ultimate Array Item Type is a Class (2) in the System Library\"\n\"\",\"§ An Array whose Ultimate Array Item Type is System.Object, String, or a Primitive Type but does not meet the definition of ObjectArray, StringArray, or PrimitiveArray.\"\n\"3\",\"Class - The Remoting Type is a Class (2) or an Array whose Ultimate Array Item Type is a Class (2) that is not in the System Library.\"\n\"4\",\"ObjectArray - The Remoting Type is a single-dimensional Array of System.Object with a lower bound of 0.\"\n\"5\",\"StringArray - The Remoting Type is a single-dimensional Array of String with a lower bound of 0.\"\n\"6\",\"PrimitiveArray - The Remoting Type is a single-dimensional Array of a Primitive Type with a lower bound of 0.\"",
          "bBox": {
            "x": 72.1,
            "y": 60,
            "w": 467.9,
            "h": 694.15
          }
        },
        {
          "type": "text",
          "value": "Copyright © 2019 Microsoft Corporation\n\nRelease: March 13, 2019\n\n20 / 55",
          "md": "Copyright © 2019 Microsoft Corporation\n\nRelease: March 13, 2019\n\n20 / 55",
          "bBox": {
            "x": 72.1,
            "y": 80.3,
            "w": 467.9,
            "h": 673.85
          }
        }
      ],
      "status": "OK",
      "originalOrientationAngle": 0,
      "links": [
      ],
      "width": 612,
      "height": 792,
      "triggeredAutoMode": false,
      "parsingMode": "accurate",
      "structuredData": null,
      "noStructuredContent": false,
      "noTextContent": false,
      "pageHeaderMarkdown": "\n# .NET Remoting: Binary Format Data Structure\n\n",
      "pageFooterMarkdown": "\n20 / 55\n\n",
      "confidence": 0.776
    },
    {
      "page": 21,
      "text": "Constant/value     Description\n\nDouble             Identifies a Double (section 2.1.1.2).\n6\n\nInt16              Identifies an INT16 as specified in [MS-DTYP] section 2.2.21.\n7\n\nInt32              Identifies an INT32 as specified in [MS-DTYP] section 2.2.22.\n8\n\nInt64              Identifies an INT64 as specified in [MS-DTYP] section 2.2.23.\n9\n\nSByte              Identifies an INT8 as specified in [MS-DTYP] section 2.2.20.\n10\n\nSingle             Identifies a Single (section 2.1.1.3).\n11\n\nTimeSpan           Identifies a TimeSpan (section 2.1.1.4).\n12\n\nDateTime           Identifies a DateTime (section 2.1.1.5).\n13\n\nUInt16             Identifies a UINT16 as specified in [MS-DTYP] section 2.2.48.\n14\n\nUInt32             Identifies a UINT32 as specified in [MS-DTYP] section 2.2.49.\n15\n\nUInt64             Identifies a UINT64 as specified in [MS-DTYP] section 2.2.50.\n16\n\nNull               Identifies a Null Object.\n17\n\nString             Identifies a LengthPrefixedString (section 2.1.1.6) value.\n18\n\n\n2.2  Method Invocation Records\n\nThis section specifies records that define the format for information required for a Remote Method\ninvocation. [MS-NRTP] sections 3.1.5.1.1 and 3.1.5.1.2 describe the mechanism to map a method\ninvocation to the records defined in this section.\n\n\n                                           21 / 55\n\n[MS-NRBF] - v20190313\n.NET Remoting: Binary Format Data Structure\nCopyright © 2019 Microsoft Corporation\nRelease: March 13, 2019",
      "md": "\n# Constant/value\n\n| Constant/value | Description                                                    |\n| -------------- | -------------------------------------------------------------- |\n| Double         | Identifies a Double (section 2.1.1.2).                         |\n| Int16          | Identifies an INT16 as specified in \\[MS-DTYP] section 2.2.21. |\n| Int32          | Identifies an INT32 as specified in \\[MS-DTYP] section 2.2.22. |\n| Int64          | Identifies an INT64 as specified in \\[MS-DTYP] section 2.2.23. |\n| SByte          | Identifies an INT8 as specified in \\[MS-DTYP] section 2.2.20.  |\n| Single         | Identifies a Single (section 2.1.1.3).                         |\n| TimeSpan       | Identifies a TimeSpan (section 2.1.1.4).                       |\n| DateTime       | Identifies a DateTime (section 2.1.1.5).                       |\n| UInt16         | Identifies a UINT16 as specified in \\[MS-DTYP] section 2.2.48. |\n| UInt32         | Identifies a UINT32 as specified in \\[MS-DTYP] section 2.2.49. |\n| UInt64         | Identifies a UINT64 as specified in \\[MS-DTYP] section 2.2.50. |\n| Null           | Identifies a Null Object.                                      |\n| String         | Identifies a LengthPrefixedString (section 2.1.1.6) value.     |\n\n# 2.2  Method Invocation Records\n\nThis section specifies records that define the format for information required for a Remote Method invocation. [MS-NRTP] sections 3.1.5.1.1 and 3.1.5.1.2 describe the mechanism to map a method invocation to the records defined in this section.\n\n",
      "images": [
      ],
      "charts": [
      ],
      "items": [
        {
          "type": "heading",
          "lvl": 1,
          "value": "Constant/value",
          "md": "# Constant/value",
          "bBox": {
            "x": 77.85,
            "y": 60,
            "w": 68,
            "h": 8
          }
        },
        {
          "type": "table",
          "rows": [
            [
              "Constant/value",
              "Description"
            ],
            [
              "Double",
              "Identifies a Double (section 2.1.1.2)."
            ],
            [
              "Int16",
              "Identifies an INT16 as specified in [MS-DTYP] section 2.2.21."
            ],
            [
              "Int32",
              "Identifies an INT32 as specified in [MS-DTYP] section 2.2.22."
            ],
            [
              "Int64",
              "Identifies an INT64 as specified in [MS-DTYP] section 2.2.23."
            ],
            [
              "SByte",
              "Identifies an INT8 as specified in [MS-DTYP] section 2.2.20."
            ],
            [
              "Single",
              "Identifies a Single (section 2.1.1.3)."
            ],
            [
              "TimeSpan",
              "Identifies a TimeSpan (section 2.1.1.4)."
            ],
            [
              "DateTime",
              "Identifies a DateTime (section 2.1.1.5)."
            ],
            [
              "UInt16",
              "Identifies a UINT16 as specified in [MS-DTYP] section 2.2.48."
            ],
            [
              "UInt32",
              "Identifies a UINT32 as specified in [MS-DTYP] section 2.2.49."
            ],
            [
              "UInt64",
              "Identifies a UINT64 as specified in [MS-DTYP] section 2.2.50."
            ],
            [
              "Null",
              "Identifies a Null Object."
            ],
            [
              "String",
              "Identifies a LengthPrefixedString (section 2.1.1.6) value."
            ]
          ],
          "md": "| Constant/value | Description                                                    |\n| -------------- | -------------------------------------------------------------- |\n| Double         | Identifies a Double (section 2.1.1.2).                         |\n| Int16          | Identifies an INT16 as specified in \\[MS-DTYP] section 2.2.21. |\n| Int32          | Identifies an INT32 as specified in \\[MS-DTYP] section 2.2.22. |\n| Int64          | Identifies an INT64 as specified in \\[MS-DTYP] section 2.2.23. |\n| SByte          | Identifies an INT8 as specified in \\[MS-DTYP] section 2.2.20.  |\n| Single         | Identifies a Single (section 2.1.1.3).                         |\n| TimeSpan       | Identifies a TimeSpan (section 2.1.1.4).                       |\n| DateTime       | Identifies a DateTime (section 2.1.1.5).                       |\n| UInt16         | Identifies a UINT16 as specified in \\[MS-DTYP] section 2.2.48. |\n| UInt32         | Identifies a UINT32 as specified in \\[MS-DTYP] section 2.2.49. |\n| UInt64         | Identifies a UINT64 as specified in \\[MS-DTYP] section 2.2.50. |\n| Null           | Identifies a Null Object.                                      |\n| String         | Identifies a LengthPrefixedString (section 2.1.1.6) value.     |",
          "isPerfectTable": true,
          "csv": "\"Constant/value\",\"Description\"\n\"Double\",\"Identifies a Double (section 2.1.1.2).\"\n\"Int16\",\"Identifies an INT16 as specified in [MS-DTYP] section 2.2.21.\"\n\"Int32\",\"Identifies an INT32 as specified in [MS-DTYP] section 2.2.22.\"\n\"Int64\",\"Identifies an INT64 as specified in [MS-DTYP] section 2.2.23.\"\n\"SByte\",\"Identifies an INT8 as specified in [MS-DTYP] section 2.2.20.\"\n\"Single\",\"Identifies a Single (section 2.1.1.3).\"\n\"TimeSpan\",\"Identifies a TimeSpan (section 2.1.1.4).\"\n\"DateTime\",\"Identifies a DateTime (section 2.1.1.5).\"\n\"UInt16\",\"Identifies a UINT16 as specified in [MS-DTYP] section 2.2.48.\"\n\"UInt32\",\"Identifies a UINT32 as specified in [MS-DTYP] section 2.2.49.\"\n\"UInt64\",\"Identifies a UINT64 as specified in [MS-DTYP] section 2.2.50.\"\n\"Null\",\"Identifies a Null Object.\"\n\"String\",\"Identifies a LengthPrefixedString (section 2.1.1.6) value.\"",
          "bBox": {
            "x": 77.85,
            "y": 60,
            "w": 323.44,
            "h": 438.7
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "2.2  Method Invocation Records",
          "md": "# 2.2  Method Invocation Records",
          "bBox": {
            "x": 72.1,
            "y": 558,
            "w": 177,
            "h": 10
          }
        },
        {
          "type": "text",
          "value": "This section specifies records that define the format for information required for a Remote Method invocation. [MS-NRTP] sections 3.1.5.1.1 and 3.1.5.1.2 describe the mechanism to map a method invocation to the records defined in this section.",
          "md": "This section specifies records that define the format for information required for a Remote Method invocation. [MS-NRTP] sections 3.1.5.1.1 and 3.1.5.1.2 describe the mechanism to map a method invocation to the records defined in this section.",
          "bBox": {
            "x": 72.1,
            "y": 580.5,
            "w": 457.42,
            "h": 33.6
          }
        }
      ],
      "status": "OK",
      "originalOrientationAngle": 0,
      "links": [
        {
          "unsafeUrl": "../../../../../../../upload/%5BMS-NRTP%5D.pdf#Section_3acb31b0b8734aaf85039727ec40fbec",
          "text": "[MS-NRTP]"
        }
      ],
      "width": 612,
      "height": 792,
      "triggeredAutoMode": false,
      "parsingMode": "accurate",
      "structuredData": null,
      "noStructuredContent": false,
      "noTextContent": false,
      "pageHeaderMarkdown": "",
      "pageFooterMarkdown": "",
      "confidence": 0.868
    },
    {
      "page": 22,
      "text": "2.2.1      Enumerations\n\n2.2.1.1 MessageFlags\n\nThe MessageFlags enumeration is used by the BinaryMethodCall (section        2.2.3.1) or\nBinaryMethodReturn     (section 2.2.3.3) records to provide information about the structure of the\nrecord. The type of the enumeration is INT32, as specified in [MS-DTYP] section 2.2.22.\n\nThe following table is common for both the BinaryMethodCall and BinaryMethodReturn records. The\nterm \"Method record\" is used in the description when it is applicable to both the records. The term\n\"Call Array record\" is used in the description when it is applicable to both\nMethodCallArray       (section 2.2.3.2) and MethodReturnCallArray (section   2.2.3.4).\n\n Constant/value             Description\n\n NoArgs                     The record contains no arguments. It is in the Arg category.\n 0x00000001\n\n ArgsInline                 The Arguments Array is in the Args field of the Method record. It is in the Arg\n 0x00000002                 category.\n\n ArgsIsArray                Each argument is an item in a separate Call Array record. It is in the Arg category.\n 0x00000004\n\n ArgsInArray                The Arguments Array is an item in a separate Call Array record. It is in the Arg\n 0x00000008                 category.\n\n NoContext                  The record does not contain a Call Context value. It is in the Context category.\n 0x00000010\n\n ContextInline              Call Context contains only a Logical Call ID value and is in the CallContext field of\n 0x00000020                 the Method record. It is in the Context category.\n\n ContextInArray             CallContext values are contained in an array that is contained in the Call Array record.\n 0x00000040                 It is in the Context category.\n\n MethodSignatureInArray     The Method Signature is contained in the Call Array record. It is in the Signature\n 0x00000080                 category.\n\n PropertiesInArray          Message Properties is contained in the Call Array record. It is in the Property\n 0x00000100                 category.\n\n NoReturnValue              The Return Value is a Null object. It is in the Return category.\n 0x00000200\n\n ReturnValueVoid            The method has no Return Value. It is in the Return category.\n 0x00000400\n\n ReturnValueInline          The Return Value is in the ReturnValue field of the MethodReturnCallArray record. It\n 0x00000800                 is in the Return category.\n\n ReturnValueInArray         The Return Value is contained in the MethodReturnCallArray record. It is in the Return\n 0x00001000                 category.\n\n                                                                                                            22 / 55\n\n[MS-NRBF] - v20190313\n.NET Remoting: Binary Format Data Structure\nCopyright © 2019 Microsoft Corporation\nRelease: March 13, 2019",
      "md": "\n# 2.2.1 Enumerations\n\n# 2.2.1.1 MessageFlags\n\nThe MessageFlags enumeration is used by the BinaryMethodCall (section 2.2.3.1) or BinaryMethodReturn (section 2.2.3.3) records to provide information about the structure of the record. The type of the enumeration is INT32, as specified in [MS-DTYP] section 2.2.22.\n\nThe following table is common for both the BinaryMethodCall and BinaryMethodReturn records. The term \"Method record\" is used in the description when it is applicable to both the records. The term \"Call Array record\" is used in the description when it is applicable to both MethodCallArray (section 2.2.3.2) and MethodReturnCallArray (section 2.2.3.4).\n\n| Constant/value         | Description                                                                                                                             |\n| ---------------------- | --------------------------------------------------------------------------------------------------------------------------------------- |\n| NoArgs                 | The record contains no arguments. It is in the Arg category.                                                                            |\n| 0x00000001             |                                                                                                                                         |\n| ArgsInline             | The Arguments Array is in the Args field of the Method record. It is in the Arg category.                                               |\n| 0x00000002             |                                                                                                                                         |\n| ArgsIsArray            | Each argument is an item in a separate Call Array record. It is in the Arg category.                                                    |\n| 0x00000004             |                                                                                                                                         |\n| ArgsInArray            | The Arguments Array is an item in a separate Call Array record. It is in the Arg category.                                              |\n| 0x00000008             |                                                                                                                                         |\n| NoContext              | The record does not contain a Call Context value. It is in the Context category.                                                        |\n| 0x00000010             |                                                                                                                                         |\n| ContextInline          | Call Context contains only a Logical Call ID value and is in the CallContext field of the Method record. It is in the Context category. |\n| 0x00000020             |                                                                                                                                         |\n| ContextInArray         | CallContext values are contained in an array that is contained in the Call Array record. It is in the Context category.                 |\n| 0x00000040             |                                                                                                                                         |\n| MethodSignatureInArray | The Method Signature is contained in the Call Array record. It is in the Signature category.                                            |\n| 0x00000080             |                                                                                                                                         |\n| PropertiesInArray      | Message Properties is contained in the Call Array record. It is in the Property category.                                               |\n| 0x00000100             |                                                                                                                                         |\n| NoReturnValue          | The Return Value is a Null object. It is in the Return category.                                                                        |\n| 0x00000200             |                                                                                                                                         |\n| ReturnValueVoid        | The method has no Return Value. It is in the Return category.                                                                           |\n| 0x00000400             |                                                                                                                                         |\n| ReturnValueInline      | The Return Value is in the ReturnValue field of the MethodReturnCallArray record. It is in the Return category.                         |\n| 0x00000800             |                                                                                                                                         |\n| ReturnValueInArray     | The Return Value is contained in the MethodReturnCallArray record. It is in the Return category.                                        |\n| 0x00001000             |                                                                                                                                         |\n\n",
      "images": [
      ],
      "charts": [
      ],
      "items": [
        {
          "type": "heading",
          "lvl": 1,
          "value": "2.2.1 Enumerations",
          "md": "# 2.2.1 Enumerations",
          "bBox": {
            "x": 72.1,
            "y": 55.3,
            "w": 111,
            "h": 10
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "2.2.1.1 MessageFlags",
          "md": "# 2.2.1.1 MessageFlags",
          "bBox": {
            "x": 72.1,
            "y": 55.3,
            "w": 120.2,
            "h": 39.65
          }
        },
        {
          "type": "text",
          "value": "The MessageFlags enumeration is used by the BinaryMethodCall (section 2.2.3.1) or BinaryMethodReturn (section 2.2.3.3) records to provide information about the structure of the record. The type of the enumeration is INT32, as specified in [MS-DTYP] section 2.2.22.\n\nThe following table is common for both the BinaryMethodCall and BinaryMethodReturn records. The term \"Method record\" is used in the description when it is applicable to both the records. The term \"Call Array record\" is used in the description when it is applicable to both MethodCallArray (section 2.2.3.2) and MethodReturnCallArray (section 2.2.3.4).",
          "md": "The MessageFlags enumeration is used by the BinaryMethodCall (section 2.2.3.1) or BinaryMethodReturn (section 2.2.3.3) records to provide information about the structure of the record. The type of the enumeration is INT32, as specified in [MS-DTYP] section 2.2.22.\n\nThe following table is common for both the BinaryMethodCall and BinaryMethodReturn records. The term \"Method record\" is used in the description when it is applicable to both the records. The term \"Call Array record\" is used in the description when it is applicable to both MethodCallArray (section 2.2.3.2) and MethodReturnCallArray (section 2.2.3.4).",
          "bBox": {
            "x": 72.1,
            "y": 107.45,
            "w": 451.13,
            "h": 116.95
          }
        },
        {
          "type": "table",
          "rows": [
            [
              "Constant/value",
              "Description"
            ],
            [
              "NoArgs",
              "The record contains no arguments. It is in the Arg category."
            ],
            [
              "0x00000001",
              ""
            ],
            [
              "ArgsInline",
              "The Arguments Array is in the Args field of the Method record. It is in the Arg category."
            ],
            [
              "0x00000002",
              ""
            ],
            [
              "ArgsIsArray",
              "Each argument is an item in a separate Call Array record. It is in the Arg category."
            ],
            [
              "0x00000004",
              ""
            ],
            [
              "ArgsInArray",
              "The Arguments Array is an item in a separate Call Array record. It is in the Arg category."
            ],
            [
              "0x00000008",
              ""
            ],
            [
              "NoContext",
              "The record does not contain a Call Context value. It is in the Context category."
            ],
            [
              "0x00000010",
              ""
            ],
            [
              "ContextInline",
              "Call Context contains only a Logical Call ID value and is in the CallContext field of the Method record. It is in the Context category."
            ],
            [
              "0x00000020",
              ""
            ],
            [
              "ContextInArray",
              "CallContext values are contained in an array that is contained in the Call Array record. It is in the Context category."
            ],
            [
              "0x00000040",
              ""
            ],
            [
              "MethodSignatureInArray",
              "The Method Signature is contained in the Call Array record. It is in the Signature category."
            ],
            [
              "0x00000080",
              ""
            ],
            [
              "PropertiesInArray",
              "Message Properties is contained in the Call Array record. It is in the Property category."
            ],
            [
              "0x00000100",
              ""
            ],
            [
              "NoReturnValue",
              "The Return Value is a Null object. It is in the Return category."
            ],
            [
              "0x00000200",
              ""
            ],
            [
              "ReturnValueVoid",
              "The method has no Return Value. It is in the Return category."
            ],
            [
              "0x00000400",
              ""
            ],
            [
              "ReturnValueInline",
              "The Return Value is in the ReturnValue field of the MethodReturnCallArray record. It is in the Return category."
            ],
            [
              "0x00000800",
              ""
            ],
            [
              "ReturnValueInArray",
              "The Return Value is contained in the MethodReturnCallArray record. It is in the Return category."
            ],
            [
              "0x00001000",
              ""
            ]
          ],
          "md": "| Constant/value         | Description                                                                                                                             |\n| ---------------------- | --------------------------------------------------------------------------------------------------------------------------------------- |\n| NoArgs                 | The record contains no arguments. It is in the Arg category.                                                                            |\n| 0x00000001             |                                                                                                                                         |\n| ArgsInline             | The Arguments Array is in the Args field of the Method record. It is in the Arg category.                                               |\n| 0x00000002             |                                                                                                                                         |\n| ArgsIsArray            | Each argument is an item in a separate Call Array record. It is in the Arg category.                                                    |\n| 0x00000004             |                                                                                                                                         |\n| ArgsInArray            | The Arguments Array is an item in a separate Call Array record. It is in the Arg category.                                              |\n| 0x00000008             |                                                                                                                                         |\n| NoContext              | The record does not contain a Call Context value. It is in the Context category.                                                        |\n| 0x00000010             |                                                                                                                                         |\n| ContextInline          | Call Context contains only a Logical Call ID value and is in the CallContext field of the Method record. It is in the Context category. |\n| 0x00000020             |                                                                                                                                         |\n| ContextInArray         | CallContext values are contained in an array that is contained in the Call Array record. It is in the Context category.                 |\n| 0x00000040             |                                                                                                                                         |\n| MethodSignatureInArray | The Method Signature is contained in the Call Array record. It is in the Signature category.                                            |\n| 0x00000080             |                                                                                                                                         |\n| PropertiesInArray      | Message Properties is contained in the Call Array record. It is in the Property category.                                               |\n| 0x00000100             |                                                                                                                                         |\n| NoReturnValue          | The Return Value is a Null object. It is in the Return category.                                                                        |\n| 0x00000200             |                                                                                                                                         |\n| ReturnValueVoid        | The method has no Return Value. It is in the Return category.                                                                           |\n| 0x00000400             |                                                                                                                                         |\n| ReturnValueInline      | The Return Value is in the ReturnValue field of the MethodReturnCallArray record. It is in the Return category.                         |\n| 0x00000800             |                                                                                                                                         |\n| ReturnValueInArray     | The Return Value is contained in the MethodReturnCallArray record. It is in the Return category.                                        |\n| 0x00001000             |                                                                                                                                         |",
          "isPerfectTable": true,
          "csv": "\"Constant/value\",\"Description\"\n\"NoArgs\",\"The record contains no arguments. It is in the Arg category.\"\n\"0x00000001\",\"\"\n\"ArgsInline\",\"The Arguments Array is in the Args field of the Method record. It is in the Arg category.\"\n\"0x00000002\",\"\"\n\"ArgsIsArray\",\"Each argument is an item in a separate Call Array record. It is in the Arg category.\"\n\"0x00000004\",\"\"\n\"ArgsInArray\",\"The Arguments Array is an item in a separate Call Array record. It is in the Arg category.\"\n\"0x00000008\",\"\"\n\"NoContext\",\"The record does not contain a Call Context value. It is in the Context category.\"\n\"0x00000010\",\"\"\n\"ContextInline\",\"Call Context contains only a Logical Call ID value and is in the CallContext field of the Method record. It is in the Context category.\"\n\"0x00000020\",\"\"\n\"ContextInArray\",\"CallContext values are contained in an array that is contained in the Call Array record. It is in the Context category.\"\n\"0x00000040\",\"\"\n\"MethodSignatureInArray\",\"The Method Signature is contained in the Call Array record. It is in the Signature category.\"\n\"0x00000080\",\"\"\n\"PropertiesInArray\",\"Message Properties is contained in the Call Array record. It is in the Property category.\"\n\"0x00000100\",\"\"\n\"NoReturnValue\",\"The Return Value is a Null object. It is in the Return category.\"\n\"0x00000200\",\"\"\n\"ReturnValueVoid\",\"The method has no Return Value. It is in the Return category.\"\n\"0x00000400\",\"\"\n\"ReturnValueInline\",\"The Return Value is in the ReturnValue field of the MethodReturnCallArray record. It is in the Return category.\"\n\"0x00000800\",\"\"\n\"ReturnValueInArray\",\"The Return Value is contained in the MethodReturnCallArray record. It is in the Return category.\"\n\"0x00001000\",\"\"",
          "bBox": {
            "x": 72.1,
            "y": 55.3,
            "w": 467.9,
            "h": 698.85
          }
        }
      ],
      "status": "OK",
      "originalOrientationAngle": 0,
      "links": [
        {
          "unsafeUrl": "../../../../../../../upload/%5BMS-DTYP%5D.pdf#Section_cca2742956894a16b2b49325d93e4ba2",
          "text": "[MS-DTYP]"
        }
      ],
      "width": 612,
      "height": 792,
      "triggeredAutoMode": false,
      "parsingMode": "accurate",
      "structuredData": null,
      "noStructuredContent": false,
      "noTextContent": false,
      "pageHeaderMarkdown": "",
      "pageFooterMarkdown": "",
      "confidence": 0.944
    },
    {
      "page": 23,
      "text": "     Constant/value             Description\n\n     ExceptionInArray           An Exception is contained in the MethodReturnCallArray record. It is in the Exception\n     0x00002000                 category.\n\n     GenericMethod              The Remote Method is generic and the actual Remoting Types for the Generic\n     0x00008000                 Arguments are contained in the Call Array. It is in the Generic category.<2>\n\nThe preceding table lists the possible values of the enumeration. The category designation for each\nvalue provides the grouping of these values. It is a flags enumeration. However, not all combinations\nare valid.\n\nTo be valid, a MessageFlags value is required to conform to the following:\n\n§      For each flags category given in the preceding table (Arg, Context, Signature, Return, Exception,\n       Property, and Generic), the value MUST NOT have more than one flag from the Category set.\n\n§      The Args and Exception flag categories are exclusive: if a flag from the Args category is set, the\n       value MUST NOT have any flag from the Exception category set, and vice versa.\n\n§      The Return and Exception flag categories are exclusive: if a flag from the Return category is set,\n       the value MUST NOT have any flag from the Exception category set, and vice versa.\n\n§      The Return and Signature categories are exclusive: if a flag from the Return category is set, the\n       value MUST NOT have any flag from the Signature category set, and vice versa.\n\n§      The Exception and Signature categories are exclusive: if a flag from the Signature category is set,\n       the value MUST NOT have any flag from the Exception category set, and vice versa.\n\nThe following table summarizes the preceding rules.\n\n                                                                                                Generi\n                      Arg      Context     Signature     Return      Exception     Property     c\n\n      Arg          Invalid     Valid       Valid         Valid       Invalid       Valid        Valid\n\n      Context      Valid       Invalid     Valid         Valid       Valid         Valid        Valid\n\n                   Valid       Valid       N/A           Invalid     Invalid       Valid        Valid\n     Signature\n\n      Return       Valid       Valid       Invalid       Invalid     Invalid       Valid        Valid\n\n                   Invalid     Valid       Invalid       Invalid     N/A           Valid        Valid\n     Exception\n\n      Property     Valid       Valid       Valid         Valid       Valid         N/A          Valid\n\n      Generic      Valid       Valid       Valid         Valid       Valid         Valid        N/A\n\nThe combination of Signature and Signature, Property and Property, Generic and Generic, or Exception\nand Exception is not applicable because there is only one bit in the Enum for each of these categories.\n\n\n                                           23 / 55\n[MS-NRBF] - v20190313\n.NET Remoting: Binary Format Data Structure\nCopyright © 2019 Microsoft Corporation\nRelease: March 13, 2019",
      "md": "\n# .NET Remoting: Binary Format Data Structure\n\n# [MS-NRBF] - v20190313\n\n# Copyright © 2019 Microsoft Corporation\n\n# Release: March 13, 2019\n\n| Constant/value   | Description                                                                                                                                           |\n| ---------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------- |\n| ExceptionInArray | An Exception is contained in the MethodReturnCallArray record. It is in the Exception category.                                                       |\n| 0x00002000       |                                                                                                                                                       |\n| GenericMethod    | The Remote Method is generic and the actual Remoting Types for the Generic Arguments are contained in the Call Array. It is in the Generic category.2 |\n| 0x00008000       |                                                                                                                                                       |\n\nThe preceding table lists the possible values of the enumeration. The category designation for each value provides the grouping of these values. It is a flags enumeration. However, not all combinations are valid.\n\nTo be valid, a MessageFlags value is required to conform to the following:\n\n- For each flags category given in the preceding table (Arg, Context, Signature, Return, Exception, Property, and Generic), the value MUST NOT have more than one flag from the Category set.\n- The Args and Exception flag categories are exclusive: if a flag from the Args category is set, the value MUST NOT have any flag from the Exception category set, and vice versa.\n- The Return and Exception flag categories are exclusive: if a flag from the Return category is set, the value MUST NOT have any flag from the Exception category set, and vice versa.\n- The Return and Signature categories are exclusive: if a flag from the Return category is set, the value MUST NOT have any flag from the Signature category set, and vice versa.\n- The Exception and Signature categories are exclusive: if a flag from the Signature category is set, the value MUST NOT have any flag from the Exception category set, and vice versa.\n\n|           | Arg     | Context | Signature | Return  | Exception | Property | Generic |\n| --------- | ------- | ------- | --------- | ------- | --------- | -------- | ------- |\n| Arg       | Invalid | Valid   | Valid     | Valid   | Invalid   | Valid    | Valid   |\n| Context   | Valid   | Invalid | Valid     | Valid   | Valid     | Valid    | Valid   |\n| Signature | Valid   | Valid   | N/A       | Invalid | Invalid   | Valid    | Valid   |\n| Return    | Valid   | Valid   | Invalid   | Invalid | Invalid   | Valid    | Valid   |\n| Exception | Invalid | Valid   | Invalid   | Invalid | N/A       | Valid    | Valid   |\n| Property  | Valid   | Valid   | Valid     | Valid   | Valid     | N/A      | Valid   |\n| Generic   | Valid   | Valid   | Valid     | Valid   | Valid     | Valid    | N/A     |\n\nThe combination of Signature and Signature, Property and Property, Generic and Generic, or Exception and Exception is not applicable because there is only one bit in the Enum for each of these categories.\n\n23 / 55\n\n",
      "images": [
      ],
      "charts": [
      ],
      "items": [
        {
          "type": "heading",
          "lvl": 1,
          "value": ".NET Remoting: Binary Format Data Structure",
          "md": "# .NET Remoting: Binary Format Data Structure",
          "bBox": {
            "x": 72.1,
            "y": 425.6,
            "w": 371.4,
            "h": 306.75
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "[MS-NRBF] - v20190313",
          "md": "# [MS-NRBF] - v20190313",
          "bBox": {
            "x": 72.1,
            "y": 713.45,
            "w": 95.66,
            "h": 8
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "Copyright © 2019 Microsoft Corporation",
          "md": "# Copyright © 2019 Microsoft Corporation",
          "bBox": {
            "x": 72.1,
            "y": 425.6,
            "w": 371.4,
            "h": 317.65
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "Release: March 13, 2019",
          "md": "# Release: March 13, 2019",
          "bBox": {
            "x": 72.1,
            "y": 425.6,
            "w": 371.4,
            "h": 328.55
          }
        },
        {
          "type": "table",
          "rows": [
            [
              "Constant/value",
              "Description"
            ],
            [
              "ExceptionInArray",
              "An Exception is contained in the MethodReturnCallArray record. It is in the Exception category."
            ],
            [
              "0x00002000",
              ""
            ],
            [
              "GenericMethod",
              "The Remote Method is generic and the actual Remoting Types for the Generic Arguments are contained in the Call Array. It is in the Generic category.2"
            ],
            [
              "0x00008000",
              ""
            ]
          ],
          "md": "| Constant/value   | Description                                                                                                                                           |\n| ---------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------- |\n| ExceptionInArray | An Exception is contained in the MethodReturnCallArray record. It is in the Exception category.                                                       |\n| 0x00002000       |                                                                                                                                                       |\n| GenericMethod    | The Remote Method is generic and the actual Remoting Types for the Generic Arguments are contained in the Call Array. It is in the Generic category.2 |\n| 0x00008000       |                                                                                                                                                       |",
          "isPerfectTable": true,
          "csv": "\"Constant/value\",\"Description\"\n\"ExceptionInArray\",\"An Exception is contained in the MethodReturnCallArray record. It is in the Exception category.\"\n\"0x00002000\",\"\"\n\"GenericMethod\",\"The Remote Method is generic and the actual Remoting Types for the Generic Arguments are contained in the Call Array. It is in the Generic category.2\"\n\"0x00008000\",\"\"",
          "bBox": {
            "x": 72.1,
            "y": 60,
            "w": 467.9,
            "h": 694.15
          }
        },
        {
          "type": "text",
          "value": "The preceding table lists the possible values of the enumeration. The category designation for each value provides the grouping of these values. It is a flags enumeration. However, not all combinations are valid.\n\nTo be valid, a MessageFlags value is required to conform to the following:\n\n- For each flags category given in the preceding table (Arg, Context, Signature, Return, Exception, Property, and Generic), the value MUST NOT have more than one flag from the Category set.\n- The Args and Exception flag categories are exclusive: if a flag from the Args category is set, the value MUST NOT have any flag from the Exception category set, and vice versa.\n- The Return and Exception flag categories are exclusive: if a flag from the Return category is set, the value MUST NOT have any flag from the Exception category set, and vice versa.\n- The Return and Signature categories are exclusive: if a flag from the Return category is set, the value MUST NOT have any flag from the Signature category set, and vice versa.\n- The Exception and Signature categories are exclusive: if a flag from the Signature category is set, the value MUST NOT have any flag from the Exception category set, and vice versa.",
          "md": "The preceding table lists the possible values of the enumeration. The category designation for each value provides the grouping of these values. It is a flags enumeration. However, not all combinations are valid.\n\nTo be valid, a MessageFlags value is required to conform to the following:\n\n- For each flags category given in the preceding table (Arg, Context, Signature, Return, Exception, Property, and Generic), the value MUST NOT have more than one flag from the Category set.\n- The Args and Exception flag categories are exclusive: if a flag from the Args category is set, the value MUST NOT have any flag from the Exception category set, and vice versa.\n- The Return and Exception flag categories are exclusive: if a flag from the Return category is set, the value MUST NOT have any flag from the Exception category set, and vice versa.\n- The Return and Signature categories are exclusive: if a flag from the Return category is set, the value MUST NOT have any flag from the Signature category set, and vice versa.\n- The Exception and Signature categories are exclusive: if a flag from the Signature category is set, the value MUST NOT have any flag from the Exception category set, and vice versa.",
          "bBox": {
            "x": 72.1,
            "y": 153.35,
            "w": 460.86,
            "h": 444.15
          }
        },
        {
          "type": "table",
          "rows": [
            [
              "",
              "Arg",
              "Context",
              "Signature",
              "Return",
              "Exception",
              "Property",
              "Generic"
            ],
            [
              "Arg",
              "Invalid",
              "Valid",
              "Valid",
              "Valid",
              "Invalid",
              "Valid",
              "Valid"
            ],
            [
              "Context",
              "Valid",
              "Invalid",
              "Valid",
              "Valid",
              "Valid",
              "Valid",
              "Valid"
            ],
            [
              "Signature",
              "Valid",
              "Valid",
              "N/A",
              "Invalid",
              "Invalid",
              "Valid",
              "Valid"
            ],
            [
              "Return",
              "Valid",
              "Valid",
              "Invalid",
              "Invalid",
              "Invalid",
              "Valid",
              "Valid"
            ],
            [
              "Exception",
              "Invalid",
              "Valid",
              "Invalid",
              "Invalid",
              "N/A",
              "Valid",
              "Valid"
            ],
            [
              "Property",
              "Valid",
              "Valid",
              "Valid",
              "Valid",
              "Valid",
              "N/A",
              "Valid"
            ],
            [
              "Generic",
              "Valid",
              "Valid",
              "Valid",
              "Valid",
              "Valid",
              "Valid",
              "N/A"
            ]
          ],
          "md": "|           | Arg     | Context | Signature | Return  | Exception | Property | Generic |\n| --------- | ------- | ------- | --------- | ------- | --------- | -------- | ------- |\n| Arg       | Invalid | Valid   | Valid     | Valid   | Invalid   | Valid    | Valid   |\n| Context   | Valid   | Invalid | Valid     | Valid   | Valid     | Valid    | Valid   |\n| Signature | Valid   | Valid   | N/A       | Invalid | Invalid   | Valid    | Valid   |\n| Return    | Valid   | Valid   | Invalid   | Invalid | Invalid   | Valid    | Valid   |\n| Exception | Invalid | Valid   | Invalid   | Invalid | N/A       | Valid    | Valid   |\n| Property  | Valid   | Valid   | Valid     | Valid   | Valid     | N/A      | Valid   |\n| Generic   | Valid   | Valid   | Valid     | Valid   | Valid     | Valid    | N/A     |",
          "isPerfectTable": true,
          "csv": "\"\",\"Arg\",\"Context\",\"Signature\",\"Return\",\"Exception\",\"Property\",\"Generic\"\n\"Arg\",\"Invalid\",\"Valid\",\"Valid\",\"Valid\",\"Invalid\",\"Valid\",\"Valid\"\n\"Context\",\"Valid\",\"Invalid\",\"Valid\",\"Valid\",\"Valid\",\"Valid\",\"Valid\"\n\"Signature\",\"Valid\",\"Valid\",\"N/A\",\"Invalid\",\"Invalid\",\"Valid\",\"Valid\"\n\"Return\",\"Valid\",\"Valid\",\"Invalid\",\"Invalid\",\"Invalid\",\"Valid\",\"Valid\"\n\"Exception\",\"Invalid\",\"Valid\",\"Invalid\",\"Invalid\",\"N/A\",\"Valid\",\"Valid\"\n\"Property\",\"Valid\",\"Valid\",\"Valid\",\"Valid\",\"Valid\",\"N/A\",\"Valid\"\n\"Generic\",\"Valid\",\"Valid\",\"Valid\",\"Valid\",\"Valid\",\"Valid\",\"N/A\"",
          "bBox": {
            "x": 72.1,
            "y": 60,
            "w": 467.9,
            "h": 694.15
          }
        },
        {
          "type": "text",
          "value": "The combination of Signature and Signature, Property and Property, Generic and Generic, or Exception and Exception is not applicable because there is only one bit in the Enum for each of these categories.\n\n23 / 55",
          "md": "The combination of Signature and Signature, Property and Property, Generic and Generic, or Exception and Exception is not applicable because there is only one bit in the Enum for each of these categories.\n\n23 / 55",
          "bBox": {
            "x": 72.1,
            "y": 414.7,
            "w": 467.9,
            "h": 289.85
          }
        }
      ],
      "status": "OK",
      "originalOrientationAngle": 0,
      "links": [
      ],
      "width": 612,
      "height": 792,
      "triggeredAutoMode": false,
      "parsingMode": "accurate",
      "structuredData": null,
      "noStructuredContent": false,
      "noTextContent": false,
      "pageHeaderMarkdown": "\n# .NET Remoting: Binary Format Data Structure\n\n# [MS-NRBF] - v20190313\n\n# Copyright © 2019 Microsoft Corporation\n\n# Release: March 13, 2019\n\n",
      "pageFooterMarkdown": "\n23 / 55\n\n",
      "confidence": 0.974
    },
    {
      "page": 24,
      "text": "2.2.2 Common Structures\n\n2.2.2.1 ValueWithCode\n\nThe ValueWithCode structure is used to associate a Primitive Value with an Enum that identifies the\nPrimitive Type of the Primitive Value.\n\n                              1                            2                             3\n0 1   2 3 4 5 6        7 8 9  0    1  2 3  4 5 6 7 8 9     0     1 2      3 4 5 6 7 8 9  0 1\n\n  PrimitiveTypeEnum                              Value (variable)\n\n                                               ...\n\nPrimitiveTypeEnum (1 byte): A PrimitiveTypeEnumeration value that specifies the type of the data.\n\nValue (variable): A Primitive Value whose Primitive Type is identified by the PrimitiveTypeEnum\n  field. For example, if the value of the PrimitiveTypeEnum field is the PrimitiveTypeEnumeration\n  value INT32, the Value field MUST contain a valid INT32 (as specified in [MS-DTYP] section 2.2.22)\n  instance. The length of the field is determined by the Primitive Type of the Value. This field MUST\n  NOT be present if the value of PrimitiveTypeEnum is Null (17).\n\n2.2.2.2 StringValueWithCode\n\nThe StringValueWithCode structure is a ValueWithCode where PrimitiveTypeEnumeration is String (18).\n\n                              1                            2                             3\n0 1   2 3 4 5 6        7 8 9  0    1  2 3  4 5    6 7 8 9  0     1 2      3 4 5 6 7 8 9  0 1\n\n  PrimitiveTypeEnum                                 StringValue (variable)\n\n                                               ...\n\nPrimitiveTypeEnum (1 byte): A PrimitiveTypeEnumeration value that specifies the Primitive Type\n  of the data. The value MUST be 18 (String).\n\nStringValue (variable): A LengthPrefixedString that contains the string value.\n\n2.2.2.3 ArrayOfValueWithCode\n\nThe ArrayOfValueWithCode structure contains a list of ValueWithCode records. The list is prefixed with\nthe length of the Array.\n\n                              1                            2                             3\n0 1   2 3 4 5 6        7 8 9  0    1  2 3  4 5    6 7 8 9  0     1 2      3 4 5 6 7 8 9  0 1\n\n                                             Length\n\n                                   ListOfValueWithCode (variable)\n\n                                               ...\n\n                                                                                            24 / 55\n[MS-NRBF] - v20190313\n.NET Remoting: Binary Format Data Structure\nCopyright © 2019 Microsoft Corporation\nRelease: March 13, 2019",
      "md": "\n# 2.2.2 Common Structures\n\n# 2.2.2.1 ValueWithCode\n\nThe ValueWithCode structure is used to associate a Primitive Value with an Enum that identifies the Primitive Type of the Primitive Value.\n\n|                   |                           |                         |\n| ----------------- | ------------------------- | ----------------------- |\n| 0 1 2 3 4 5 6     | 7 8 9 0 1 2 3 4 5 6 7 8 9 | 0 1 2 3 4 5 6 7 8 9 0 1 |\n| PrimitiveTypeEnum | Value (variable)          |                         |\n\nPrimitiveTypeEnum (1 byte): A PrimitiveTypeEnumeration value that specifies the type of the data.\n\nValue (variable): A Primitive Value whose Primitive Type is identified by the PrimitiveTypeEnum field. For example, if the value of the PrimitiveTypeEnum field is the PrimitiveTypeEnumeration value INT32, the Value field MUST contain a valid INT32 (as specified in [MS-DTYP] section 2.2.22) instance. The length of the field is determined by the Primitive Type of the Value. This field MUST NOT be present if the value of PrimitiveTypeEnum is Null (17).\n\n# 2.2.2.2 StringValueWithCode\n\nThe StringValueWithCode structure is a ValueWithCode where PrimitiveTypeEnumeration is String (18).\n\n|                   |                           |                         |\n| ----------------- | ------------------------- | ----------------------- |\n| 0 1 2 3 4 5 6     | 7 8 9 0 1 2 3 4 5 6 7 8 9 | 0 1 2 3 4 5 6 7 8 9 0 1 |\n| PrimitiveTypeEnum | StringValue (variable)    |                         |\n\nPrimitiveTypeEnum (1 byte): A PrimitiveTypeEnumeration value that specifies the Primitive Type of the data. The value MUST be 18 (String).\n\nStringValue (variable): A LengthPrefixedString that contains the string value.\n\n# 2.2.2.3 ArrayOfValueWithCode\n\nThe ArrayOfValueWithCode structure contains a list of ValueWithCode records. The list is prefixed with the length of the Array.\n\n|               |                                |                         |\n| ------------- | ------------------------------ | ----------------------- |\n| 0 1 2 3 4 5 6 | 7 8 9 0 1 2 3 4 5 6 7 8 9      | 0 1 2 3 4 5 6 7 8 9 0 1 |\n|               | Length                         |                         |\n|               | ListOfValueWithCode (variable) |                         |\n\n",
      "images": [
      ],
      "charts": [
      ],
      "items": [
        {
          "type": "heading",
          "lvl": 1,
          "value": "2.2.2 Common Structures",
          "md": "# 2.2.2 Common Structures",
          "bBox": {
            "x": 72.1,
            "y": 55.3,
            "w": 305.55,
            "h": 541.45
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "2.2.2.1 ValueWithCode",
          "md": "# 2.2.2.1 ValueWithCode",
          "bBox": {
            "x": 72.1,
            "y": 55.3,
            "w": 427.05,
            "h": 541.45
          }
        },
        {
          "type": "text",
          "value": "The ValueWithCode structure is used to associate a Primitive Value with an Enum that identifies the Primitive Type of the Primitive Value.",
          "md": "The ValueWithCode structure is used to associate a Primitive Value with an Enum that identifies the Primitive Type of the Primitive Value.",
          "bBox": {
            "x": 72.1,
            "y": 107.45,
            "w": 463.55,
            "h": 21.3
          }
        },
        {
          "type": "table",
          "rows": [
            [
              "0 1 2 3 4 5 6",
              "7 8 9 0 1 2 3 4 5 6 7 8 9",
              "0 1 2 3 4 5 6 7 8 9 0 1"
            ],
            [
              "PrimitiveTypeEnum",
              "Value (variable)",
              ""
            ]
          ],
          "md": "|                   |                           |                         |\n| ----------------- | ------------------------- | ----------------------- |\n| 0 1 2 3 4 5 6     | 7 8 9 0 1 2 3 4 5 6 7 8 9 | 0 1 2 3 4 5 6 7 8 9 0 1 |\n| PrimitiveTypeEnum | Value (variable)          |                         |",
          "isPerfectTable": true,
          "csv": "\"0 1 2 3 4 5 6\",\"7 8 9 0 1 2 3 4 5 6 7 8 9\",\"0 1 2 3 4 5 6 7 8 9 0 1\"\n\"PrimitiveTypeEnum\",\"Value (variable)\",\"\"",
          "bBox": {
            "x": 72.1,
            "y": 55.3,
            "w": 467.9,
            "h": 698.85
          }
        },
        {
          "type": "text",
          "value": "PrimitiveTypeEnum (1 byte): A PrimitiveTypeEnumeration value that specifies the type of the data.\n\nValue (variable): A Primitive Value whose Primitive Type is identified by the PrimitiveTypeEnum field. For example, if the value of the PrimitiveTypeEnum field is the PrimitiveTypeEnumeration value INT32, the Value field MUST contain a valid INT32 (as specified in [MS-DTYP] section 2.2.22) instance. The length of the field is determined by the Primitive Type of the Value. This field MUST NOT be present if the value of PrimitiveTypeEnum is Null (17).",
          "md": "PrimitiveTypeEnum (1 byte): A PrimitiveTypeEnumeration value that specifies the type of the data.\n\nValue (variable): A Primitive Value whose Primitive Type is identified by the PrimitiveTypeEnum field. For example, if the value of the PrimitiveTypeEnum field is the PrimitiveTypeEnumeration value INT32, the Value field MUST contain a valid INT32 (as specified in [MS-DTYP] section 2.2.22) instance. The length of the field is determined by the Primitive Type of the Value. This field MUST NOT be present if the value of PrimitiveTypeEnum is Null (17).",
          "bBox": {
            "x": 72.1,
            "y": 55.3,
            "w": 463.88,
            "h": 564.25
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "2.2.2.2 StringValueWithCode",
          "md": "# 2.2.2.2 StringValueWithCode",
          "bBox": {
            "x": 72.1,
            "y": 55.3,
            "w": 305.55,
            "h": 541.45
          }
        },
        {
          "type": "text",
          "value": "The StringValueWithCode structure is a ValueWithCode where PrimitiveTypeEnumeration is String (18).",
          "md": "The StringValueWithCode structure is a ValueWithCode where PrimitiveTypeEnumeration is String (18).",
          "bBox": {
            "x": 72.1,
            "y": 143.95,
            "w": 466.56,
            "h": 452.8
          }
        },
        {
          "type": "table",
          "rows": [
            [
              "0 1 2 3 4 5 6",
              "7 8 9 0 1 2 3 4 5 6 7 8 9",
              "0 1 2 3 4 5 6 7 8 9 0 1"
            ],
            [
              "PrimitiveTypeEnum",
              "StringValue (variable)",
              ""
            ]
          ],
          "md": "|                   |                           |                         |\n| ----------------- | ------------------------- | ----------------------- |\n| 0 1 2 3 4 5 6     | 7 8 9 0 1 2 3 4 5 6 7 8 9 | 0 1 2 3 4 5 6 7 8 9 0 1 |\n| PrimitiveTypeEnum | StringValue (variable)    |                         |",
          "isPerfectTable": true,
          "csv": "\"0 1 2 3 4 5 6\",\"7 8 9 0 1 2 3 4 5 6 7 8 9\",\"0 1 2 3 4 5 6 7 8 9 0 1\"\n\"PrimitiveTypeEnum\",\"StringValue (variable)\",\"\"",
          "bBox": {
            "x": 72.1,
            "y": 55.3,
            "w": 467.9,
            "h": 698.85
          }
        },
        {
          "type": "text",
          "value": "PrimitiveTypeEnum (1 byte): A PrimitiveTypeEnumeration value that specifies the Primitive Type of the data. The value MUST be 18 (String).\n\nStringValue (variable): A LengthPrefixedString that contains the string value.",
          "md": "PrimitiveTypeEnum (1 byte): A PrimitiveTypeEnumeration value that specifies the Primitive Type of the data. The value MUST be 18 (String).\n\nStringValue (variable): A LengthPrefixedString that contains the string value.",
          "bBox": {
            "x": 72.1,
            "y": 143.95,
            "w": 462.95,
            "h": 475.6
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "2.2.2.3 ArrayOfValueWithCode",
          "md": "# 2.2.2.3 ArrayOfValueWithCode",
          "bBox": {
            "x": 72.1,
            "y": 55.3,
            "w": 413.55,
            "h": 541.45
          }
        },
        {
          "type": "text",
          "value": "The ArrayOfValueWithCode structure contains a list of ValueWithCode records. The list is prefixed with the length of the Array.",
          "md": "The ArrayOfValueWithCode structure contains a list of ValueWithCode records. The list is prefixed with the length of the Array.",
          "bBox": {
            "x": 72.1,
            "y": 540.35,
            "w": 463.08,
            "h": 79.2
          }
        },
        {
          "type": "table",
          "rows": [
            [
              "0 1 2 3 4 5 6",
              "7 8 9 0 1 2 3 4 5 6 7 8 9",
              "0 1 2 3 4 5 6 7 8 9 0 1"
            ],
            [
              "",
              "Length",
              ""
            ],
            [
              "",
              "ListOfValueWithCode (variable)",
              ""
            ]
          ],
          "md": "|               |                                |                         |\n| ------------- | ------------------------------ | ----------------------- |\n| 0 1 2 3 4 5 6 | 7 8 9 0 1 2 3 4 5 6 7 8 9      | 0 1 2 3 4 5 6 7 8 9 0 1 |\n|               | Length                         |                         |\n|               | ListOfValueWithCode (variable) |                         |",
          "isPerfectTable": true,
          "csv": "\"0 1 2 3 4 5 6\",\"7 8 9 0 1 2 3 4 5 6 7 8 9\",\"0 1 2 3 4 5 6 7 8 9 0 1\"\n\"\",\"Length\",\"\"\n\"\",\"ListOfValueWithCode (variable)\",\"\"",
          "bBox": {
            "x": 72.1,
            "y": 55.3,
            "w": 467.9,
            "h": 698.85
          }
        }
      ],
      "status": "OK",
      "originalOrientationAngle": 0,
      "links": [
      ],
      "width": 612,
      "height": 792,
      "triggeredAutoMode": false,
      "parsingMode": "accurate",
      "structuredData": null,
      "noStructuredContent": false,
      "noTextContent": false,
      "pageHeaderMarkdown": "",
      "pageFooterMarkdown": "",
      "confidence": 0.911
    },
    {
      "page": 25,
      "text": "Length (4 bytes): An INT32 value (as specified in [MS-DTYP] section 2.2.22) that indicates the\n  number of items in the Array. The value can range from 0 to 2147483647 (2^31) inclusive.\n\nListOfValueWithCode (variable): A sequence of ValueWithCode records. The number of items in\n  the sequence MUST be equal to the value specified in the Length field.\n\n2.2.3 Record Definitions\n\n2.2.3.1 BinaryMethodCall\n\nThe BinaryMethodCall record contains information that is required to perform a Remote Method\ninvocation.\n\n                            1                                 2                       3\n0 1   2 3  4 5 6     7 8 9  0    1    2 3  4 5 6 7 8 9        0    1 2 3 4 5 6 7 8 9  0   1\n\n  RecordTypeEnum                 MessageEnum\n\n          ...               MethodName (variable)\n\n                                               ...\n\n                                        TypeName (variable)\n\n                                               ...\n\n                                        CallContext (variable)\n\n                                               ...\n\n                                           Args (variable)\n\n                                               ...\n\nRecordTypeEnum (1 byte): A RecordTypeEnumeration value that identifies the record type. The\n  value MUST be 21.\n\nMessageEnum (4 bytes): A MessageFlags value that indicates whether the arguments and Call\n  Context, Message Properties, Generic Arguments, and Method Signature are present. It\n  also specifies whether the arguments and Call Context are present in this record or in the following\n  MethodCallArray record. For this record type, the field MUST NOT contain the values from the\n  Return and the Exception categories.\n\nMethodName (variable): A StringValueWithCode that represents the Remote Method name. The\n  format of the string is as specified in [MS-NRTP] section 2.2.1.1.\n\nTypeName (variable): A StringValueWithCode that represents the Server Type name. The format of\n  the string is specified as QualifiedTypeName, as specified in [MS-NRTP] section 2.2.1.2.\n\nCallContext (variable): A StringValueWithCode that represents the Logical Call ID. This field is\n  conditional. If the MessageEnum field has the ContextInline bit set, the field MUST be present;\n  otherwise, the field MUST NOT be present. The presence of this field indicates that the Call Context\n\n                                                                                              25 / 55\n[MS-NRBF] - v20190313\n.NET Remoting: Binary Format Data Structure\nCopyright © 2019 Microsoft Corporation\nRelease: March 13, 2019",
      "md": "\nLength (4 bytes): An INT32 value (as specified in [MS-DTYP] section 2.2.22) that indicates the number of items in the Array. The value can range from 0 to 2147483647 (231) inclusive.\n\nListOfValueWithCode (variable): A sequence of ValueWithCode records. The number of items in the sequence MUST be equal to the value specified in the Length field.\n\n# 2.2.3 Record Definitions\n\n# 2.2.3.1 BinaryMethodCall\n\nThe BinaryMethodCall record contains information that is required to perform a Remote Method invocation.\n\n| 1                     | 2                                                               | 3                   |\n| --------------------- | --------------------------------------------------------------- | ------------------- |\n|                       | 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 |                     |\n| RecordTypeEnum        | MessageEnum                                                     | ...                 |\n| MethodName (variable) | ...                                                             | TypeName (variable) |\n| ...                   | CallContext (variable)                                          | ...                 |\n| Args (variable)       | ...                                                             |                     |\n\nRecordTypeEnum (1 byte): A RecordTypeEnumeration value that identifies the record type. The value MUST be 21.\n\nMessageEnum (4 bytes): A MessageFlags value that indicates whether the arguments and Call Context, Message Properties, Generic Arguments, and Method Signature are present. It also specifies whether the arguments and Call Context are present in this record or in the following MethodCallArray record. For this record type, the field MUST NOT contain the values from the Return and the Exception categories.\n\nMethodName (variable): A StringValueWithCode that represents the Remote Method name. The format of the string is as specified in [MS-NRTP] section 2.2.1.1.\n\nTypeName (variable): A StringValueWithCode that represents the Server Type name. The format of the string is specified as QualifiedTypeName, as specified in [MS-NRTP] section 2.2.1.2.\n\nCallContext (variable): A StringValueWithCode that represents the Logical Call ID. This field is conditional. If the MessageEnum field has the ContextInline bit set, the field MUST be present; otherwise, the field MUST NOT be present. The presence of this field indicates that the Call Context\n\n",
      "images": [
      ],
      "charts": [
      ],
      "items": [
        {
          "type": "text",
          "value": "Length (4 bytes): An INT32 value (as specified in [MS-DTYP] section 2.2.22) that indicates the number of items in the Array. The value can range from 0 to 2147483647 (231) inclusive.\n\nListOfValueWithCode (variable): A sequence of ValueWithCode records. The number of items in the sequence MUST be equal to the value specified in the Length field.",
          "md": "Length (4 bytes): An INT32 value (as specified in [MS-DTYP] section 2.2.22) that indicates the number of items in the Array. The value can range from 0 to 2147483647 (231) inclusive.\n\nListOfValueWithCode (variable): A sequence of ValueWithCode records. The number of items in the sequence MUST be equal to the value specified in the Length field.",
          "bBox": {
            "x": 72.1,
            "y": 55.15,
            "w": 450,
            "h": 182.9
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "2.2.3 Record Definitions",
          "md": "# 2.2.3 Record Definitions",
          "bBox": {
            "x": 72.1,
            "y": 129.5,
            "w": 413.55,
            "h": 108.55
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "2.2.3.1 BinaryMethodCall",
          "md": "# 2.2.3.1 BinaryMethodCall",
          "bBox": {
            "x": 72.1,
            "y": 129.5,
            "w": 427.05,
            "h": 108.55
          }
        },
        {
          "type": "text",
          "value": "The BinaryMethodCall record contains information that is required to perform a Remote Method invocation.",
          "md": "The BinaryMethodCall record contains information that is required to perform a Remote Method invocation.",
          "bBox": {
            "x": 72.1,
            "y": 181.65,
            "w": 441.23,
            "h": 21.3
          }
        },
        {
          "type": "table",
          "rows": [
            [
              "1",
              "2",
              "3"
            ],
            [
              "",
              "0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1",
              ""
            ],
            [
              "RecordTypeEnum",
              "MessageEnum",
              "..."
            ],
            [
              "MethodName (variable)",
              "...",
              "TypeName (variable)"
            ],
            [
              "...",
              "CallContext (variable)",
              "..."
            ],
            [
              "Args (variable)",
              "...",
              ""
            ]
          ],
          "md": "| 1                     | 2                                                               | 3                   |\n| --------------------- | --------------------------------------------------------------- | ------------------- |\n|                       | 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 |                     |\n| RecordTypeEnum        | MessageEnum                                                     | ...                 |\n| MethodName (variable) | ...                                                             | TypeName (variable) |\n| ...                   | CallContext (variable)                                          | ...                 |\n| Args (variable)       | ...                                                             |                     |",
          "isPerfectTable": true,
          "csv": "\"1\",\"2\",\"3\"\n\"\",\"0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\",\"\"\n\"RecordTypeEnum\",\"MessageEnum\",\"...\"\n\"MethodName (variable)\",\"...\",\"TypeName (variable)\"\n\"...\",\"CallContext (variable)\",\"...\"\n\"Args (variable)\",\"...\",\"\"",
          "bBox": {
            "x": 72.1,
            "y": 55.15,
            "w": 467.9,
            "h": 699
          }
        },
        {
          "type": "text",
          "value": "RecordTypeEnum (1 byte): A RecordTypeEnumeration value that identifies the record type. The value MUST be 21.\n\nMessageEnum (4 bytes): A MessageFlags value that indicates whether the arguments and Call Context, Message Properties, Generic Arguments, and Method Signature are present. It also specifies whether the arguments and Call Context are present in this record or in the following MethodCallArray record. For this record type, the field MUST NOT contain the values from the Return and the Exception categories.\n\nMethodName (variable): A StringValueWithCode that represents the Remote Method name. The format of the string is as specified in [MS-NRTP] section 2.2.1.1.\n\nTypeName (variable): A StringValueWithCode that represents the Server Type name. The format of the string is specified as QualifiedTypeName, as specified in [MS-NRTP] section 2.2.1.2.\n\nCallContext (variable): A StringValueWithCode that represents the Logical Call ID. This field is conditional. If the MessageEnum field has the ContextInline bit set, the field MUST be present; otherwise, the field MUST NOT be present. The presence of this field indicates that the Call Context",
          "md": "RecordTypeEnum (1 byte): A RecordTypeEnumeration value that identifies the record type. The value MUST be 21.\n\nMessageEnum (4 bytes): A MessageFlags value that indicates whether the arguments and Call Context, Message Properties, Generic Arguments, and Method Signature are present. It also specifies whether the arguments and Call Context are present in this record or in the following MethodCallArray record. For this record type, the field MUST NOT contain the values from the Return and the Exception categories.\n\nMethodName (variable): A StringValueWithCode that represents the Remote Method name. The format of the string is as specified in [MS-NRTP] section 2.2.1.1.\n\nTypeName (variable): A StringValueWithCode that represents the Server Type name. The format of the string is specified as QualifiedTypeName, as specified in [MS-NRTP] section 2.2.1.2.\n\nCallContext (variable): A StringValueWithCode that represents the Logical Call ID. This field is conditional. If the MessageEnum field has the ContextInline bit set, the field MUST be present; otherwise, the field MUST NOT be present. The presence of this field indicates that the Call Context",
          "bBox": {
            "x": 72.1,
            "y": 218.15,
            "w": 467.39,
            "h": 459.5
          }
        }
      ],
      "status": "OK",
      "originalOrientationAngle": 0,
      "links": [
        {
          "unsafeUrl": "../../../../../../../upload/%5BMS-NRTP%5D.pdf#Section_3acb31b0b8734aaf85039727ec40fbec",
          "text": "[MS-NRTP]"
        }
      ],
      "width": 612,
      "height": 792,
      "triggeredAutoMode": false,
      "parsingMode": "accurate",
      "structuredData": null,
      "noStructuredContent": false,
      "noTextContent": false,
      "pageHeaderMarkdown": "",
      "pageFooterMarkdown": "",
      "confidence": 0.93
    },
    {
      "page": 26,
      "text": "    contains a single entry with the Name as \"__RemotingData\" and the value is an instance of the\n    Remoting Type CallContextRemotingData, as specified in [MS-NRTP] section 2.2.2.16. The value\n    of this field MUST be interpreted as the value of the logicalCallID field in the\n    CallContextRemotingData Class (2).\n\nArgs (variable): An ArrayOfValueWithCode where each item of the Array corresponds to an input\n    argument of the method. The items of the Array MUST be in the same order as the input\n    arguments. This field is conditional. If the MessageEnum field has the ArgsInline bit set, the field\n    MUST be present; otherwise, the field MUST NOT be present.\n\n2.2.3.2 MethodCallArray\n\nThe MethodCallArray is a special use of the ArraySingleObject record. The record represents a\nserialized Array that can contain instances of any Remoting Type. The items of the Array include\nInput Arguments, Generic Type Arguments, Method Signature, Call Context, and Message\nProperties. Each item is conditional. The conditions for presence of the item are given with the\ndefinition of each item. The items, if present, MUST be in the following order:\n\n1.  Input Arguments: An Array that contains the Input Arguments for the method. This item is\n    conditional. If the MessageEnum field of the preceding BinaryMethodCall record has the\n    ArgsInArray bit set, the item MUST be present; otherwise, the item MUST NOT be present.\n\n2.  Generic Type Arguments: An Array of UnitySerializationHolder classes (1), as specified in [MS-\n    NRTP] section 2.2.2.12. The presence of this field indicates that the method represented by the\n    BinaryMethodCall record is a Generic Method. Each item of the array contains a Remoting Type\n    that MUST be used as Generic Argument for the Generic Method. This field is conditional. If the\n    MessageEnum field of the preceding BinaryMethodCall record has the GenericMethod bit set, the\n    field MUST be present; otherwise, the field MUST NOT be present.<3>\n\n3.  Method Signature: An Array of UnitySerializationHolder classes (1) as specified in [MS-NRTP]\n    section 2.2.2.12. Each item of the Array contains the Remoting Type of an argument of the\n    Remote Method. If the MessageEnum field of the preceding BinaryMethodCall record has the\n    MethodSignatureInArray bit set, the field MUST be present; otherwise, the field MUST NOT be\n    present. If present, the number of items in the Array MUST match the number of items in the Input\n    Argument item.\n\n4.  Call Context: An instance of the Class (2)\n    \"System.Runtime.Remoting.Messaging.LogicalCallContext\". The Library name of the Class (2) is\n    \"mscorlib\". Each name-value pair of the Call Context MUST be mapped to a Member name and\n    Member value of the Class (2). If the MessageEnum field of the preceding BinaryMethodCall\n    record has the ContextInArray bit set, the field MUST be present; otherwise, the field MUST NOT be\n    present.\n\n5.  Message Properties: An Array that can contain instances of any Remoting Type. Each instance is\n    a DictionaryEntry, as specified in [MS-NRTP] section 2.2.2.6. If the MessageEnum field of the\n    preceding BinaryMethodCall record has the PropertiesInArray bit set, the field MUST be present;\n    otherwise, the field MUST NOT be present.\n\n2.2.3.3 BinaryMethodReturn\n\nThe BinaryMethodReturn record contains the information returned by a Remote Method.\n\n                                                                                                26 / 55\n[MS-NRBF] - v20190313\n.NET Remoting: Binary Format Data Structure\nCopyright © 2019 Microsoft Corporation\nRelease: March 13, 2019",
      "md": "\n# 2.2.3.2 MethodCallArray\n\nThe MethodCallArray is a special use of the ArraySingleObject record. The record represents a serialized Array that can contain instances of any Remoting Type. The items of the Array include Input Arguments, Generic Type Arguments, Method Signature, Call Context, and Message Properties. Each item is conditional. The conditions for presence of the item are given with the definition of each item. The items, if present, MUST be in the following order:\n\n1. Input Arguments: An Array that contains the Input Arguments for the method. This item is conditional. If the MessageEnum field of the preceding BinaryMethodCall record has the ArgsInArray bit set, the item MUST be present; otherwise, the item MUST NOT be present.\n2. Generic Type Arguments: An Array of UnitySerializationHolder classes (1), as specified in [MS-NRTP] section 2.2.2.12. The presence of this field indicates that the method represented by the BinaryMethodCall record is a Generic Method. Each item of the array contains a Remoting Type that MUST be used as Generic Argument for the Generic Method. This field is conditional. If the MessageEnum field of the preceding BinaryMethodCall record has the GenericMethod bit set, the field MUST be present; otherwise, the field MUST NOT be present.3\n3. Method Signature: An Array of UnitySerializationHolder classes (1) as specified in [MS-NRTP] section 2.2.2.12. Each item of the Array contains the Remoting Type of an argument of the Remote Method. If the MessageEnum field of the preceding BinaryMethodCall record has the MethodSignatureInArray bit set, the field MUST be present; otherwise, the field MUST NOT be present. If present, the number of items in the Array MUST match the number of items in the Input Argument item.\n4. Call Context: An instance of the Class (2) \"System.Runtime.Remoting.Messaging.LogicalCallContext\". The Library name of the Class (2) is \"mscorlib\". Each name-value pair of the Call Context MUST be mapped to a Member name and Member value of the Class (2). If the MessageEnum field of the preceding BinaryMethodCall record has the ContextInArray bit set, the field MUST be present; otherwise, the field MUST NOT be present.\n5. Message Properties: An Array that can contain instances of any Remoting Type. Each instance is a DictionaryEntry, as specified in [MS-NRTP] section 2.2.2.6. If the MessageEnum field of the preceding BinaryMethodCall record has the PropertiesInArray bit set, the field MUST be present; otherwise, the field MUST NOT be present.\n\n# 2.2.3.3 BinaryMethodReturn\n\nThe BinaryMethodReturn record contains the information returned by a Remote Method.\n\n",
      "images": [
      ],
      "charts": [
      ],
      "items": [
        {
          "type": "heading",
          "lvl": 1,
          "value": "2.2.3.2 MethodCallArray",
          "md": "# 2.2.3.2 MethodCallArray",
          "bBox": {
            "x": 72.1,
            "y": 178.7,
            "w": 134.2,
            "h": 230.7
          }
        },
        {
          "type": "text",
          "value": "The MethodCallArray is a special use of the ArraySingleObject record. The record represents a serialized Array that can contain instances of any Remoting Type. The items of the Array include Input Arguments, Generic Type Arguments, Method Signature, Call Context, and Message Properties. Each item is conditional. The conditions for presence of the item are given with the definition of each item. The items, if present, MUST be in the following order:\n\n1. Input Arguments: An Array that contains the Input Arguments for the method. This item is conditional. If the MessageEnum field of the preceding BinaryMethodCall record has the ArgsInArray bit set, the item MUST be present; otherwise, the item MUST NOT be present.\n2. Generic Type Arguments: An Array of UnitySerializationHolder classes (1), as specified in [MS-NRTP] section 2.2.2.12. The presence of this field indicates that the method represented by the BinaryMethodCall record is a Generic Method. Each item of the array contains a Remoting Type that MUST be used as Generic Argument for the Generic Method. This field is conditional. If the MessageEnum field of the preceding BinaryMethodCall record has the GenericMethod bit set, the field MUST be present; otherwise, the field MUST NOT be present.3\n3. Method Signature: An Array of UnitySerializationHolder classes (1) as specified in [MS-NRTP] section 2.2.2.12. Each item of the Array contains the Remoting Type of an argument of the Remote Method. If the MessageEnum field of the preceding BinaryMethodCall record has the MethodSignatureInArray bit set, the field MUST be present; otherwise, the field MUST NOT be present. If present, the number of items in the Array MUST match the number of items in the Input Argument item.\n4. Call Context: An instance of the Class (2) \"System.Runtime.Remoting.Messaging.LogicalCallContext\". The Library name of the Class (2) is \"mscorlib\". Each name-value pair of the Call Context MUST be mapped to a Member name and Member value of the Class (2). If the MessageEnum field of the preceding BinaryMethodCall record has the ContextInArray bit set, the field MUST be present; otherwise, the field MUST NOT be present.\n5. Message Properties: An Array that can contain instances of any Remoting Type. Each instance is a DictionaryEntry, as specified in [MS-NRTP] section 2.2.2.6. If the MessageEnum field of the preceding BinaryMethodCall record has the PropertiesInArray bit set, the field MUST be present; otherwise, the field MUST NOT be present.",
          "md": "The MethodCallArray is a special use of the ArraySingleObject record. The record represents a serialized Array that can contain instances of any Remoting Type. The items of the Array include Input Arguments, Generic Type Arguments, Method Signature, Call Context, and Message Properties. Each item is conditional. The conditions for presence of the item are given with the definition of each item. The items, if present, MUST be in the following order:\n\n1. Input Arguments: An Array that contains the Input Arguments for the method. This item is conditional. If the MessageEnum field of the preceding BinaryMethodCall record has the ArgsInArray bit set, the item MUST be present; otherwise, the item MUST NOT be present.\n2. Generic Type Arguments: An Array of UnitySerializationHolder classes (1), as specified in [MS-NRTP] section 2.2.2.12. The presence of this field indicates that the method represented by the BinaryMethodCall record is a Generic Method. Each item of the array contains a Remoting Type that MUST be used as Generic Argument for the Generic Method. This field is conditional. If the MessageEnum field of the preceding BinaryMethodCall record has the GenericMethod bit set, the field MUST be present; otherwise, the field MUST NOT be present.3\n3. Method Signature: An Array of UnitySerializationHolder classes (1) as specified in [MS-NRTP] section 2.2.2.12. Each item of the Array contains the Remoting Type of an argument of the Remote Method. If the MessageEnum field of the preceding BinaryMethodCall record has the MethodSignatureInArray bit set, the field MUST be present; otherwise, the field MUST NOT be present. If present, the number of items in the Array MUST match the number of items in the Input Argument item.\n4. Call Context: An instance of the Class (2) \"System.Runtime.Remoting.Messaging.LogicalCallContext\". The Library name of the Class (2) is \"mscorlib\". Each name-value pair of the Call Context MUST be mapped to a Member name and Member value of the Class (2). If the MessageEnum field of the preceding BinaryMethodCall record has the ContextInArray bit set, the field MUST be present; otherwise, the field MUST NOT be present.\n5. Message Properties: An Array that can contain instances of any Remoting Type. Each instance is a DictionaryEntry, as specified in [MS-NRTP] section 2.2.2.6. If the MessageEnum field of the preceding BinaryMethodCall record has the PropertiesInArray bit set, the field MUST be present; otherwise, the field MUST NOT be present.",
          "bBox": {
            "x": 72.1,
            "y": 150.25,
            "w": 465.99,
            "h": 461.65
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "2.2.3.3 BinaryMethodReturn",
          "md": "# 2.2.3.3 BinaryMethodReturn",
          "bBox": {
            "x": 72.1,
            "y": 317.6,
            "w": 156.2,
            "h": 323.75
          }
        },
        {
          "type": "text",
          "value": "The BinaryMethodReturn record contains the information returned by a Remote Method.",
          "md": "The BinaryMethodReturn record contains the information returned by a Remote Method.",
          "bBox": {
            "x": 72.1,
            "y": 653.85,
            "w": 408.8,
            "h": 9
          }
        }
      ],
      "status": "OK",
      "originalOrientationAngle": 0,
      "links": [
        {
          "unsafeUrl": "../../../../../../../upload/%5BMS-NRTP%5D.pdf#Section_3acb31b0b8734aaf85039727ec40fbec",
          "text": "NRTP]"
        },
        {
          "unsafeUrl": "../../../../../../../upload/%5BMS-NRTP%5D.pdf#Section_3acb31b0b8734aaf85039727ec40fbec",
          "text": "[MS-"
        }
      ],
      "width": 612,
      "height": 792,
      "triggeredAutoMode": false,
      "parsingMode": "accurate",
      "structuredData": null,
      "noStructuredContent": false,
      "noTextContent": false,
      "pageHeaderMarkdown": "",
      "pageFooterMarkdown": "",
      "confidence": 0.772
    },
    {
      "page": 27,
      "text": "                            1                                 2                       3\n0  1 2 3 4 5 6       7 8 9  0    1    2 3  4 5 6 7 8  9       0    1 2 3 4 5 6 7 8 9  0 1\n\n    RecordTypeEnum               MessageEnum\n\n         ...                ReturnValue (variable)\n\n                                               ...\n\n                                        CallContext (variable)\n\n                                               ...\n\n                                           Args (variable)\n\n                                               ...\n\nRecordTypeEnum (1 byte): A RecordTypeEnumeration value that identifies the record type. The\n    value MUST be 22.\n\nMessageEnum (4 bytes): A MessageFlags value that indicates whether the Return Value,\n    Arguments, Message Properties, and Call Context are present. The value also specifies\n    whether the Return Value, Arguments, and Call Context are present in this record or the following\n    MethodReturnCallArray record. For this record, the field MUST NOT have the\n    MethodSignatureInArray or GenericMethod bits set.\n\nReturnValue (variable): A ValueWithCode that contains the Return Value of a Remote Method. If the\n    MessageEnum field has the ReturnValueInline bit set, this field MUST be present; otherwise, this\n    field MUST NOT be present.\n\nCallContext (variable): A StringValueWithCode that represents the Logical Call ID. This field is\n    conditional. If the MessageEnum field has the ContextInline bit set, the field MUST be present;\n    otherwise, the field MUST NOT be present.\n\nArgs (variable): An ArrayOfValueWithCode that contains the Output Arguments of the method.\n    This field is conditional. If the MessageEnum field has the ArgsInline bit set, the field MUST be\n    present; otherwise, the field MUST NOT be present.\n\n2.2.3.4 MethodReturnCallArray\n\nThe MethodReturnCallArray is a special use of the ArraySingleObject record. The record represents a\nserialized Array that can contain instances of any Remoting Type. The items of the Array include\nReturn Value, Output Arguments, Exception, Call Context, and Message Properties. Each item\nis conditional. The conditions for presence of the item are given with the definition of the item in the\nfollowing list. The items, if present, MUST be in the following order:\n\n1.  Return Value: The Return Value of the method. This item is conditional. If the MessageEnum\n    field of the preceding BinaryMethodReturn record has the ReturnValueInArray bit set, the item\n    MUST be present; otherwise, the item MUST NOT be present.\n\n2.  Output Arguments: An Array that contains the Output Arguments for the method. This item is\n    conditional. If the MessageEnum field of the preceding BinaryMethodReturn record has the\n    ArgsInArray bit set, the item MUST be present; otherwise, the item MUST NOT be present.\n\n                                                                                            27 / 55\n[MS-NRBF] - v20190313\n.NET Remoting: Binary Format Data Structure\nCopyright © 2019 Microsoft Corporation\nRelease: March 13, 2019",
      "md": "\n\n# 1\n\n# 2\n\n# 3\n\n| 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 |\n| - | - | - | - | - | - | - | - | - | - |\n| 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 |\n\nRecordTypeEnum (1 byte): A RecordTypeEnumeration value that identifies the record type. The value MUST be 22.\n\nMessageEnum (4 bytes): A MessageFlags value that indicates whether the Return Value, Arguments, Message Properties, and Call Context are present. The value also specifies whether the Return Value, Arguments, and Call Context are present in this record or the following MethodReturnCallArray record. For this record, the field MUST NOT have the MethodSignatureInArray or GenericMethod bits set.\n\nReturnValue (variable): A ValueWithCode that contains the Return Value of a Remote Method. If the MessageEnum field has the ReturnValueInline bit set, this field MUST be present; otherwise, this field MUST NOT be present.\n\nCallContext (variable): A StringValueWithCode that represents the Logical Call ID. This field is conditional. If the MessageEnum field has the ContextInline bit set, the field MUST be present; otherwise, the field MUST NOT be present.\n\nArgs (variable): An ArrayOfValueWithCode that contains the Output Arguments of the method. This field is conditional. If the MessageEnum field has the ArgsInline bit set, the field MUST be present; otherwise, the field MUST NOT be present.\n\n# 2.2.3.4 MethodReturnCallArray\n\nThe MethodReturnCallArray is a special use of the ArraySingleObject record. The record represents a serialized Array that can contain instances of any Remoting Type. The items of the Array include Return Value, Output Arguments, Exception, Call Context, and Message Properties. Each item is conditional. The conditions for presence of the item are given with the definition of the item in the following list. The items, if present, MUST be in the following order:\n\n1. Return Value: The Return Value of the method. This item is conditional. If the MessageEnum field of the preceding BinaryMethodReturn record has the ReturnValueInArray bit set, the item MUST be present; otherwise, the item MUST NOT be present.\n2. Output Arguments: An Array that contains the Output Arguments for the method. This item is conditional. If the MessageEnum field of the preceding BinaryMethodReturn record has the ArgsInArray bit set, the item MUST be present; otherwise, the item MUST NOT be present.\n\n",
      "images": [
      ],
      "charts": [
      ],
      "items": [
        {
          "type": "heading",
          "lvl": 1,
          "value": "1",
          "md": "# 1",
          "bBox": {
            "x": 89.15,
            "y": 58.05,
            "w": 410,
            "h": 19.9
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "2",
          "md": "# 2",
          "bBox": {
            "x": 102.65,
            "y": 58.05,
            "w": 275,
            "h": 19.9
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "3",
          "md": "# 3",
          "bBox": {
            "x": 116.15,
            "y": 58.05,
            "w": 369.5,
            "h": 19.9
          }
        },
        {
          "type": "table",
          "rows": [
            [
              "0",
              "1",
              "2",
              "3",
              "4",
              "5",
              "6",
              "7",
              "8",
              "9"
            ],
            [
              "0",
              "1",
              "2",
              "3",
              "4",
              "5",
              "6",
              "7",
              "8",
              "9"
            ]
          ],
          "md": "| 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 |\n| - | - | - | - | - | - | - | - | - | - |\n| 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 |",
          "isPerfectTable": true,
          "csv": "\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\"\n\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\"",
          "bBox": {
            "x": 72.1,
            "y": 58.05,
            "w": 467.9,
            "h": 696.1
          }
        },
        {
          "type": "text",
          "value": "RecordTypeEnum (1 byte): A RecordTypeEnumeration value that identifies the record type. The value MUST be 22.\n\nMessageEnum (4 bytes): A MessageFlags value that indicates whether the Return Value, Arguments, Message Properties, and Call Context are present. The value also specifies whether the Return Value, Arguments, and Call Context are present in this record or the following MethodReturnCallArray record. For this record, the field MUST NOT have the MethodSignatureInArray or GenericMethod bits set.\n\nReturnValue (variable): A ValueWithCode that contains the Return Value of a Remote Method. If the MessageEnum field has the ReturnValueInline bit set, this field MUST be present; otherwise, this field MUST NOT be present.\n\nCallContext (variable): A StringValueWithCode that represents the Logical Call ID. This field is conditional. If the MessageEnum field has the ContextInline bit set, the field MUST be present; otherwise, the field MUST NOT be present.\n\nArgs (variable): An ArrayOfValueWithCode that contains the Output Arguments of the method. This field is conditional. If the MessageEnum field has the ArgsInline bit set, the field MUST be present; otherwise, the field MUST NOT be present.",
          "md": "RecordTypeEnum (1 byte): A RecordTypeEnumeration value that identifies the record type. The value MUST be 22.\n\nMessageEnum (4 bytes): A MessageFlags value that indicates whether the Return Value, Arguments, Message Properties, and Call Context are present. The value also specifies whether the Return Value, Arguments, and Call Context are present in this record or the following MethodReturnCallArray record. For this record, the field MUST NOT have the MethodSignatureInArray or GenericMethod bits set.\n\nReturnValue (variable): A ValueWithCode that contains the Return Value of a Remote Method. If the MessageEnum field has the ReturnValueInline bit set, this field MUST be present; otherwise, this field MUST NOT be present.\n\nCallContext (variable): A StringValueWithCode that represents the Logical Call ID. This field is conditional. If the MessageEnum field has the ContextInline bit set, the field MUST be present; otherwise, the field MUST NOT be present.\n\nArgs (variable): An ArrayOfValueWithCode that contains the Output Arguments of the method. This field is conditional. If the MessageEnum field has the ArgsInline bit set, the field MUST be present; otherwise, the field MUST NOT be present.",
          "bBox": {
            "x": 72.1,
            "y": 58.05,
            "w": 465.55,
            "h": 602.45
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "2.2.3.4 MethodReturnCallArray",
          "md": "# 2.2.3.4 MethodReturnCallArray",
          "bBox": {
            "x": 72.1,
            "y": 58.05,
            "w": 413.55,
            "h": 602.45
          }
        },
        {
          "type": "text",
          "value": "The MethodReturnCallArray is a special use of the ArraySingleObject record. The record represents a serialized Array that can contain instances of any Remoting Type. The items of the Array include Return Value, Output Arguments, Exception, Call Context, and Message Properties. Each item is conditional. The conditions for presence of the item are given with the definition of the item in the following list. The items, if present, MUST be in the following order:\n\n1. Return Value: The Return Value of the method. This item is conditional. If the MessageEnum field of the preceding BinaryMethodReturn record has the ReturnValueInArray bit set, the item MUST be present; otherwise, the item MUST NOT be present.\n2. Output Arguments: An Array that contains the Output Arguments for the method. This item is conditional. If the MessageEnum field of the preceding BinaryMethodReturn record has the ArgsInArray bit set, the item MUST be present; otherwise, the item MUST NOT be present.",
          "md": "The MethodReturnCallArray is a special use of the ArraySingleObject record. The record represents a serialized Array that can contain instances of any Remoting Type. The items of the Array include Return Value, Output Arguments, Exception, Call Context, and Message Properties. Each item is conditional. The conditions for presence of the item are given with the definition of the item in the following list. The items, if present, MUST be in the following order:\n\n1. Return Value: The Return Value of the method. This item is conditional. If the MessageEnum field of the preceding BinaryMethodReturn record has the ReturnValueInArray bit set, the item MUST be present; otherwise, the item MUST NOT be present.\n2. Output Arguments: An Array that contains the Output Arguments for the method. This item is conditional. If the MessageEnum field of the preceding BinaryMethodReturn record has the ArgsInArray bit set, the item MUST be present; otherwise, the item MUST NOT be present.",
          "bBox": {
            "x": 72.1,
            "y": 58.05,
            "w": 465.73,
            "h": 627.05
          }
        }
      ],
      "status": "OK",
      "originalOrientationAngle": 0,
      "links": [
      ],
      "width": 612,
      "height": 792,
      "triggeredAutoMode": false,
      "parsingMode": "accurate",
      "structuredData": null,
      "noStructuredContent": false,
      "noTextContent": false,
      "pageHeaderMarkdown": "\n",
      "pageFooterMarkdown": "\n",
      "confidence": 0.902
    },
    {
      "page": 28,
      "text": "3.   Exception: A Data Value assignable to System.Exception Class (2) as specified in [MS-NRTP]\n     section 2.2.2.7. This item is conditional. If the MessageEnum field of the preceding\n     BinaryMethodReturn record has the ExceptionInArray bit set, the item MUST be present; otherwise,\n     the item MUST NOT be present.\n\n4.   Call Context: An instance of the Class (2) called\n     \"System.Runtime.Remoting.Messaging.LogicalCallContext\". The Library name of the Class (2) is\n     \"mscorlib\". Each name-value pair of the Call Context MUST be mapped to a Member name and a\n     Member value of the Class (2). If the MessageEnum field of the preceding BinaryMethodReturn\n     record has the ContextInArray bit set, the field MUST be present; otherwise, the field MUST NOT be\n     present.\n\n5.   Message Properties: An Array that can contain instances of any Remoting Type. Each instance is\n     a DictionaryEntry, as specified in [MS-NRTP] section 2.2.2.6. If the MessageEnum field of the\n     preceding BinaryMethodReturn record has the PropertiesInArray bit set, the field MUST be present;\n     otherwise, the field MUST NOT be present.\n\n2.3   Class Records\n\nThis section defines Class (1) records. A Class (1) record represents an instance of a Class (1). [MS-\nNRTP] section 3.1.5.1.6 describes the mechanism to map a Class (1) instance to a record defined in\nthis section. [MS-NRTP] section 3.1.5.1.9 describes the mechanism to map an Enum value to a record\ndefined in this section.\n\nThe values of the Members of the Class (1) MUST be serialized as records that follow this record, as\nspecified in section 2.7. The order of the records MUST match the order of MemberNames as specified\nin the ClassInfo (section 2.3.1.1) structure.\n\n2.3.1         Common Structures\n\n2.3.1.1 ClassInfo\n\nClassInfo is a common structure used by all the Class (2) records. It has the following structure.\n\n                              1                             2                            3\n0  1  2 3    4   5 6 7    8 9 0    1  2 3  4 5    6 7 8 9   0    1 2 3 4 5 6 7 8 9       0 1\n\n                                   ObjectId\n\n                               Name (variable)\n\n                                   ...\n\n                               MemberCount\n\n                                      MemberNames (variable)\n\n                                               ...\n\nObjectId (4 bytes): An INT32 value (as specified in [MS-DTYP] section 2.2.22) that uniquely identifies\n        the object in the serialization stream. An implementation MAY use any algorithm to generate the\n\n                                                                                                28 / 55\n[MS-NRBF] - v20190313\n.NET Remoting: Binary Format Data Structure\nCopyright © 2019 Microsoft Corporation\nRelease: March 13, 2019",
      "md": "\n# 3. Exception\n\nA Data Value assignable to System.Exception Class (2) as specified in [MS-NRTP] section 2.2.2.7. This item is conditional. If the MessageEnum field of the preceding BinaryMethodReturn record has the ExceptionInArray bit set, the item MUST be present; otherwise, the item MUST NOT be present.\n\n# 4. Call Context\n\nAn instance of the Class (2) called \"System.Runtime.Remoting.Messaging.LogicalCallContext\". The Library name of the Class (2) is \"mscorlib\". Each name-value pair of the Call Context MUST be mapped to a Member name and a Member value of the Class (2). If the MessageEnum field of the preceding BinaryMethodReturn record has the ContextInArray bit set, the field MUST be present; otherwise, the field MUST NOT be present.\n\n# 5. Message Properties\n\nAn Array that can contain instances of any Remoting Type. Each instance is a DictionaryEntry, as specified in [MS-NRTP] section 2.2.2.6. If the MessageEnum field of the preceding BinaryMethodReturn record has the PropertiesInArray bit set, the field MUST be present; otherwise, the field MUST NOT be present.\n\n# 2.3 Class Records\n\nThis section defines Class (1) records. A Class (1) record represents an instance of a Class (1). [MS-NRTP] section 3.1.5.1.6 describes the mechanism to map a Class (1) instance to a record defined in this section. [MS-NRTP] section 3.1.5.1.9 describes the mechanism to map an Enum value to a record defined in this section.\n\nThe values of the Members of the Class (1) MUST be serialized as records that follow this record, as specified in section 2.7. The order of the records MUST match the order of MemberNames as specified in the ClassInfo (section 2.3.1.1) structure.\n\n# 2.3.1 Common Structures\n\n# 2.3.1.1 ClassInfo\n\nClassInfo is a common structure used by all the Class (2) records. It has the following structure.\n\n| 1                                                           | 2   | 3 |\n| ----------------------------------------------------------- | --- | - |\n| 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 | 0 1 |   |\n| ObjectId                                                    |     |   |\n| Name (variable)                                             |     |   |\n| ...                                                         |     |   |\n| MemberCount                                                 |     |   |\n| MemberNames (variable)                                      |     |   |\n| ...                                                         |     |   |\n\nObjectId (4 bytes): An INT32 value (as specified in [MS-DTYP] section 2.2.22) that uniquely identifies the object in the serialization stream. An implementation MAY use any algorithm to generate the\n\n",
      "images": [
      ],
      "charts": [
      ],
      "items": [
        {
          "type": "heading",
          "lvl": 1,
          "value": "3. Exception",
          "md": "# 3. Exception",
          "bBox": {
            "x": 72.1,
            "y": 55.15,
            "w": 413.55,
            "h": 436.35
          }
        },
        {
          "type": "text",
          "value": "A Data Value assignable to System.Exception Class (2) as specified in [MS-NRTP] section 2.2.2.7. This item is conditional. If the MessageEnum field of the preceding BinaryMethodReturn record has the ExceptionInArray bit set, the item MUST be present; otherwise, the item MUST NOT be present.",
          "md": "A Data Value assignable to System.Exception Class (2) as specified in [MS-NRTP] section 2.2.2.7. This item is conditional. If the MessageEnum field of the preceding BinaryMethodReturn record has the ExceptionInArray bit set, the item MUST be present; otherwise, the item MUST NOT be present.",
          "bBox": {
            "x": 90.1,
            "y": 67.45,
            "w": 448.76,
            "h": 424.05
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "4. Call Context",
          "md": "# 4. Call Context",
          "bBox": {
            "x": 72.1,
            "y": 113.35,
            "w": 332.55,
            "h": 378.15
          }
        },
        {
          "type": "text",
          "value": "An instance of the Class (2) called \"System.Runtime.Remoting.Messaging.LogicalCallContext\". The Library name of the Class (2) is \"mscorlib\". Each name-value pair of the Call Context MUST be mapped to a Member name and a Member value of the Class (2). If the MessageEnum field of the preceding BinaryMethodReturn record has the ContextInArray bit set, the field MUST be present; otherwise, the field MUST NOT be present.",
          "md": "An instance of the Class (2) called \"System.Runtime.Remoting.Messaging.LogicalCallContext\". The Library name of the Class (2) is \"mscorlib\". Each name-value pair of the Call Context MUST be mapped to a Member name and a Member value of the Class (2). If the MessageEnum field of the preceding BinaryMethodReturn record has the ContextInArray bit set, the field MUST be present; otherwise, the field MUST NOT be present.",
          "bBox": {
            "x": 90.1,
            "y": 125.65,
            "w": 447.15,
            "h": 365.85
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "5. Message Properties",
          "md": "# 5. Message Properties",
          "bBox": {
            "x": 72.1,
            "y": 196.15,
            "w": 346.05,
            "h": 295.35
          }
        },
        {
          "type": "text",
          "value": "An Array that can contain instances of any Remoting Type. Each instance is a DictionaryEntry, as specified in [MS-NRTP] section 2.2.2.6. If the MessageEnum field of the preceding BinaryMethodReturn record has the PropertiesInArray bit set, the field MUST be present; otherwise, the field MUST NOT be present.",
          "md": "An Array that can contain instances of any Remoting Type. Each instance is a DictionaryEntry, as specified in [MS-NRTP] section 2.2.2.6. If the MessageEnum field of the preceding BinaryMethodReturn record has the PropertiesInArray bit set, the field MUST be present; otherwise, the field MUST NOT be present.",
          "bBox": {
            "x": 90.1,
            "y": 174.85,
            "w": 446.84,
            "h": 316.65
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "2.3 Class Records",
          "md": "# 2.3 Class Records",
          "bBox": {
            "x": 72.1,
            "y": 261.5,
            "w": 413.55,
            "h": 230
          }
        },
        {
          "type": "text",
          "value": "This section defines Class (1) records. A Class (1) record represents an instance of a Class (1). [MS-NRTP] section 3.1.5.1.6 describes the mechanism to map a Class (1) instance to a record defined in this section. [MS-NRTP] section 3.1.5.1.9 describes the mechanism to map an Enum value to a record defined in this section.\n\nThe values of the Members of the Class (1) MUST be serialized as records that follow this record, as specified in section 2.7. The order of the records MUST match the order of MemberNames as specified in the ClassInfo (section 2.3.1.1) structure.",
          "md": "This section defines Class (1) records. A Class (1) record represents an instance of a Class (1). [MS-NRTP] section 3.1.5.1.6 describes the mechanism to map a Class (1) instance to a record defined in this section. [MS-NRTP] section 3.1.5.1.9 describes the mechanism to map an Enum value to a record defined in this section.\n\nThe values of the Members of the Class (1) MUST be serialized as records that follow this record, as specified in section 2.7. The order of the records MUST match the order of MemberNames as specified in the ClassInfo (section 2.3.1.1) structure.",
          "bBox": {
            "x": 72.1,
            "y": 55.15,
            "w": 461.83,
            "h": 436.35
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "2.3.1 Common Structures",
          "md": "# 2.3.1 Common Structures",
          "bBox": {
            "x": 72.1,
            "y": 55.15,
            "w": 427.05,
            "h": 436.35
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "2.3.1.1 ClassInfo",
          "md": "# 2.3.1.1 ClassInfo",
          "bBox": {
            "x": 72.1,
            "y": 55.15,
            "w": 427.05,
            "h": 436.35
          }
        },
        {
          "type": "text",
          "value": "ClassInfo is a common structure used by all the Class (2) records. It has the following structure.",
          "md": "ClassInfo is a common structure used by all the Class (2) records. It has the following structure.",
          "bBox": {
            "x": 72.1,
            "y": 447.4,
            "w": 436.4,
            "h": 44.1
          }
        },
        {
          "type": "table",
          "rows": [
            [
              "1",
              "2",
              "3"
            ],
            [
              "0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9",
              "0 1",
              ""
            ],
            [
              "ObjectId",
              "",
              ""
            ],
            [
              "Name (variable)",
              "",
              ""
            ],
            [
              "...",
              "",
              ""
            ],
            [
              "MemberCount",
              "",
              ""
            ],
            [
              "MemberNames (variable)",
              "",
              ""
            ],
            [
              "...",
              "",
              ""
            ]
          ],
          "md": "| 1                                                           | 2   | 3 |\n| ----------------------------------------------------------- | --- | - |\n| 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 | 0 1 |   |\n| ObjectId                                                    |     |   |\n| Name (variable)                                             |     |   |\n| ...                                                         |     |   |\n| MemberCount                                                 |     |   |\n| MemberNames (variable)                                      |     |   |\n| ...                                                         |     |   |",
          "isPerfectTable": true,
          "csv": "\"1\",\"2\",\"3\"\n\"0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9\",\"0 1\",\"\"\n\"ObjectId\",\"\",\"\"\n\"Name (variable)\",\"\",\"\"\n\"...\",\"\",\"\"\n\"MemberCount\",\"\",\"\"\n\"MemberNames (variable)\",\"\",\"\"\n\"...\",\"\",\"\"",
          "bBox": {
            "x": 72.1,
            "y": 55.15,
            "w": 467.93,
            "h": 699
          }
        },
        {
          "type": "text",
          "value": "ObjectId (4 bytes): An INT32 value (as specified in [MS-DTYP] section 2.2.22) that uniquely identifies the object in the serialization stream. An implementation MAY use any algorithm to generate the",
          "md": "ObjectId (4 bytes): An INT32 value (as specified in [MS-DTYP] section 2.2.22) that uniquely identifies the object in the serialization stream. An implementation MAY use any algorithm to generate the",
          "bBox": {
            "x": 72.1,
            "y": 471.6,
            "w": 467.93,
            "h": 202.4
          }
        }
      ],
      "status": "OK",
      "originalOrientationAngle": 0,
      "links": [
        {
          "unsafeUrl": "../../../../../../../upload/%5BMS-DTYP%5D.pdf#Section_cca2742956894a16b2b49325d93e4ba2",
          "text": "[MS-DTYP]"
        },
        {
          "unsafeUrl": "../../../../../../../upload/%5BMS-NRTP%5D.pdf#Section_3acb31b0b8734aaf85039727ec40fbec",
          "text": "NRTP]"
        },
        {
          "unsafeUrl": "../../../../../../../upload/%5BMS-NRTP%5D.pdf#Section_3acb31b0b8734aaf85039727ec40fbec",
          "text": "[MS-"
        },
        {
          "unsafeUrl": "../../../../../../../upload/%5BMS-NRTP%5D.pdf#Section_3acb31b0b8734aaf85039727ec40fbec",
          "text": "[MS-NRTP]"
        }
      ],
      "width": 612,
      "height": 792,
      "triggeredAutoMode": false,
      "parsingMode": "accurate",
      "structuredData": null,
      "noStructuredContent": false,
      "noTextContent": false,
      "pageHeaderMarkdown": "",
      "pageFooterMarkdown": "",
      "confidence": 0.943
    },
    {
      "page": 29,
      "text": "  unique IDs. If the ObjectId is referenced by a MemberReference record elsewhere in the\n  serialization stream, the ObjectId MUST be positive. If the ObjectId is not referenced by any\n  MemberReference in the serialization stream, then the ObjectId SHOULD be positive, but MAY be\n  negative.<4>\n\nName (variable): A LengthPrefixedString value that contains the name of the Class (1). The format of\n  the string MUST be as specified in the RemotingTypeName, as specified in [MS-NRTP] section\n  2.2.1.2.\n\nMemberCount (4 bytes): An INT32 value (as specified in [MS-DTYP] section 2.2.22) that contains the\n  number of Members in the Class (2). The value MUST be 0 or a positive integer.\n\nMemberNames (variable): A sequence of LengthPrefixedString values that represents the names of\n  the Members in the class (2). The number of items in the sequence MUST be equal to the value\n  specified in the MemberCount field.\n\n  The MemberNames MAY be in any order.<5>\n\n2.3.1.2 MemberTypeInfo\n\nThe MemberTypeInfo is a common structure that contains type information for Class (2) Members. It\nhas the following structure.\n\n                               1                                2                       3\n0 1    2 3 4 5 6 7 8        9  0    1 2 3 4 5 6 7 8   9         0    1 2 3 4 5 6 7 8 9  0    1\n\n                                      BinaryTypeEnums (variable)\n\n                                              ...\n\n                                      AdditionalInfos (variable)\n\n                                              ...\n\nBinaryTypeEnums (variable): A sequence of BinaryTypeEnumeration values that represents the\n  Member Types that are being transferred. The Array MUST:\n\n  §      Have the same number of items as the MemberCount field of the ClassInfo structure.\n\n  §      Be ordered such that the BinaryTypeEnumeration corresponds to the Member name in the\n         MemberNames field of the ClassInfo structure.\n\nAdditionalInfos (variable): A sequence of additional information about a Remoting Type. For every\n  value of the BinaryTypeEnum in the BinaryTypeEnums field that is a Primitive, SystemClass,\n  Class (2), or PrimitiveArray, the AdditionalInfos field contains additional information about the\n  Remoting Type. For the BinaryTypeEnum value of Primitive and PrimitiveArray, this field specifies\n  the actual Primitive Type that uses the PrimitiveTypeEnum. For the BinaryTypeEnum value of\n  SystemClass, this field specifies the name of the class (2). For the BinaryTypeEnum value of Class\n  (2), this field specifies the name of the Class (2) and the Library ID. The following table\n  enumerates additional information required for each BinaryType enumeration.\n\n\n                                           29 / 55\n[MS-NRBF] - v20190313\n.NET Remoting: Binary Format Data Structure\nCopyright © 2019 Microsoft Corporation\nRelease: March 13, 2019",
      "md": "\n# 2.3.1.1 ClassInfo\n\nunique IDs. If the ObjectId is referenced by a MemberReference record elsewhere in the serialization stream, the ObjectId MUST be positive. If the ObjectId is not referenced by any MemberReference in the serialization stream, then the ObjectId SHOULD be positive, but MAY be negative.4\n\nName (variable): A LengthPrefixedString value that contains the name of the Class (1). The format of the string MUST be as specified in the RemotingTypeName, as specified in [MS-NRTP] section 2.2.1.2.\n\nMemberCount (4 bytes): An INT32 value (as specified in [MS-DTYP] section 2.2.22) that contains the number of Members in the Class (2). The value MUST be 0 or a positive integer.\n\nMemberNames (variable): A sequence of LengthPrefixedString values that represents the names of the Members in the class (2). The number of items in the sequence MUST be equal to the value specified in the MemberCount field.\n\nThe MemberNames MAY be in any order.5\n\n# 2.3.1.2 MemberTypeInfo\n\nThe MemberTypeInfo is a common structure that contains type information for Class (2) Members. It has the following structure.\n\n1                                2                       3\n0 1    2 3 4 5 6 7 8        9  0    1 2 3 4 5 6 7 8   9         0    1 2 3 4 5 6 7 8 9  0    1\n\nBinaryTypeEnums (variable)\n\n...\n\nAdditionalInfos (variable)\n\n...\n\nBinaryTypeEnums (variable): A sequence of BinaryTypeEnumeration values that represents the Member Types that are being transferred. The Array MUST:\n\n- Have the same number of items as the MemberCount field of the ClassInfo structure.\n- Be ordered such that the BinaryTypeEnumeration corresponds to the Member name in the MemberNames field of the ClassInfo structure.\n\nAdditionalInfos (variable): A sequence of additional information about a Remoting Type. For every value of the BinaryTypeEnum in the BinaryTypeEnums field that is a Primitive, SystemClass, Class (2), or PrimitiveArray, the AdditionalInfos field contains additional information about the Remoting Type. For the BinaryTypeEnum value of Primitive and PrimitiveArray, this field specifies the actual Primitive Type that uses the PrimitiveTypeEnum. For the BinaryTypeEnum value of SystemClass, this field specifies the name of the class (2). For the BinaryTypeEnum value of Class (2), this field specifies the name of the Class (2) and the Library ID. The following table enumerates additional information required for each BinaryType enumeration.\n\n",
      "images": [
      ],
      "charts": [
      ],
      "items": [
        {
          "type": "heading",
          "lvl": 1,
          "value": "2.3.1.1 ClassInfo",
          "md": "# 2.3.1.1 ClassInfo",
          "bBox": {
            "x": 89.15,
            "y": 326.2,
            "w": 410,
            "h": 19.9
          }
        },
        {
          "type": "text",
          "value": "unique IDs. If the ObjectId is referenced by a MemberReference record elsewhere in the serialization stream, the ObjectId MUST be positive. If the ObjectId is not referenced by any MemberReference in the serialization stream, then the ObjectId SHOULD be positive, but MAY be negative.4\n\nName (variable): A LengthPrefixedString value that contains the name of the Class (1). The format of the string MUST be as specified in the RemotingTypeName, as specified in [MS-NRTP] section 2.2.1.2.\n\nMemberCount (4 bytes): An INT32 value (as specified in [MS-DTYP] section 2.2.22) that contains the number of Members in the Class (2). The value MUST be 0 or a positive integer.\n\nMemberNames (variable): A sequence of LengthPrefixedString values that represents the names of the Members in the class (2). The number of items in the sequence MUST be equal to the value specified in the MemberCount field.\n\nThe MemberNames MAY be in any order.5",
          "md": "unique IDs. If the ObjectId is referenced by a MemberReference record elsewhere in the serialization stream, the ObjectId MUST be positive. If the ObjectId is not referenced by any MemberReference in the serialization stream, then the ObjectId SHOULD be positive, but MAY be negative.4\n\nName (variable): A LengthPrefixedString value that contains the name of the Class (1). The format of the string MUST be as specified in the RemotingTypeName, as specified in [MS-NRTP] section 2.2.1.2.\n\nMemberCount (4 bytes): An INT32 value (as specified in [MS-DTYP] section 2.2.22) that contains the number of Members in the Class (2). The value MUST be 0 or a positive integer.\n\nMemberNames (variable): A sequence of LengthPrefixedString values that represents the names of the Members in the class (2). The number of items in the sequence MUST be equal to the value specified in the MemberCount field.\n\nThe MemberNames MAY be in any order.5",
          "bBox": {
            "x": 72.1,
            "y": 55.15,
            "w": 466.26,
            "h": 290.95
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "2.3.1.2 MemberTypeInfo",
          "md": "# 2.3.1.2 MemberTypeInfo",
          "bBox": {
            "x": 72.1,
            "y": 267.2,
            "w": 427.05,
            "h": 78.9
          }
        },
        {
          "type": "text",
          "value": "The MemberTypeInfo is a common structure that contains type information for Class (2) Members. It has the following structure.\n\n1                                2                       3\n0 1    2 3 4 5 6 7 8        9  0    1 2 3 4 5 6 7 8   9         0    1 2 3 4 5 6 7 8 9  0    1\n\nBinaryTypeEnums (variable)\n\n...\n\nAdditionalInfos (variable)\n\n...\n\nBinaryTypeEnums (variable): A sequence of BinaryTypeEnumeration values that represents the Member Types that are being transferred. The Array MUST:\n\n- Have the same number of items as the MemberCount field of the ClassInfo structure.\n- Be ordered such that the BinaryTypeEnumeration corresponds to the Member name in the MemberNames field of the ClassInfo structure.\n\nAdditionalInfos (variable): A sequence of additional information about a Remoting Type. For every value of the BinaryTypeEnum in the BinaryTypeEnums field that is a Primitive, SystemClass, Class (2), or PrimitiveArray, the AdditionalInfos field contains additional information about the Remoting Type. For the BinaryTypeEnum value of Primitive and PrimitiveArray, this field specifies the actual Primitive Type that uses the PrimitiveTypeEnum. For the BinaryTypeEnum value of SystemClass, this field specifies the name of the class (2). For the BinaryTypeEnum value of Class (2), this field specifies the name of the Class (2) and the Library ID. The following table enumerates additional information required for each BinaryType enumeration.",
          "md": "The MemberTypeInfo is a common structure that contains type information for Class (2) Members. It has the following structure.\n\n1                                2                       3\n0 1    2 3 4 5 6 7 8        9  0    1 2 3 4 5 6 7 8   9         0    1 2 3 4 5 6 7 8 9  0    1\n\nBinaryTypeEnums (variable)\n\n...\n\nAdditionalInfos (variable)\n\n...\n\nBinaryTypeEnums (variable): A sequence of BinaryTypeEnumeration values that represents the Member Types that are being transferred. The Array MUST:\n\n- Have the same number of items as the MemberCount field of the ClassInfo structure.\n- Be ordered such that the BinaryTypeEnumeration corresponds to the Member name in the MemberNames field of the ClassInfo structure.\n\nAdditionalInfos (variable): A sequence of additional information about a Remoting Type. For every value of the BinaryTypeEnum in the BinaryTypeEnums field that is a Primitive, SystemClass, Class (2), or PrimitiveArray, the AdditionalInfos field contains additional information about the Remoting Type. For the BinaryTypeEnum value of Primitive and PrimitiveArray, this field specifies the actual Primitive Type that uses the PrimitiveTypeEnum. For the BinaryTypeEnum value of SystemClass, this field specifies the name of the class (2). For the BinaryTypeEnum value of Class (2), this field specifies the name of the Class (2) and the Library ID. The following table enumerates additional information required for each BinaryType enumeration.",
          "bBox": {
            "x": 72.1,
            "y": 289.7,
            "w": 467.45,
            "h": 352.2
          }
        }
      ],
      "status": "OK",
      "originalOrientationAngle": 0,
      "links": [
        {
          "unsafeUrl": "../../../../../../../upload/%5BMS-NRTP%5D.pdf#Section_3acb31b0b8734aaf85039727ec40fbec",
          "text": "[MS-NRTP]"
        }
      ],
      "width": 612,
      "height": 792,
      "triggeredAutoMode": false,
      "parsingMode": "accurate",
      "structuredData": null,
      "noStructuredContent": false,
      "noTextContent": false,
      "pageHeaderMarkdown": "",
      "pageFooterMarkdown": "",
      "confidence": 0.947
    },
    {
      "page": 30,
      "text": "       BinaryTypeEnum          AdditionalInfos\n\n       Primitive             PrimitiveTypeEnumeration\n\n       String                None\n\n       Object                None\n\n       SystemClass           String (Class (1) name as specified in [MS-NRTP] section 2.2.1.2)\n\n       Class                 ClassTypeInfo\n\n       ObjectArray           None\n\n       StringArray           None\n\n       PrimitiveArray        PrimitiveTypeEnumeration\n\n  §      The AdditionalInfos sequence MUST NOT contain any item for the BinaryTypeEnum values of\n         String, Object, ObjectArray, or StringArray.\n\n  §      The AdditionalInfos items MUST be in the same order as the corresponding BinaryTypeEnum\n         items in the BinaryTypeEnums field.\n\n  §      When the BinaryTypeEnum value is Primitive, the PrimitiveTypeEnumeration value in\n         AdditionalInfo MUST NOT be Null (17) or String (18).\n\n2.3.2    Record Definitions\n\n2.3.2.1 ClassWithMembersAndTypes\n\nThe ClassWithMembersAndTypes record is the most verbose of the Class records. It contains metadata\nabout Members, including the names and Remoting Types of the Members. It also contains a\nLibrary ID that references the Library Name of the Class.\n\n                                  1                               2                                3\n0 1    2 3       4    5  6 7 8 9  0    1 2 3  4 5 6  7 8 9        0    1 2 3 4 5 6 7          8 9  0 1\n\n  RecordTypeEnum                                     ClassInfo (variable)\n\n                                                  ...\n\n                                         MemberTypeInfo (variable)\n\n                                                  ...\n\n                                                LibraryId\n\nRecordTypeEnum (1 byte): A RecordTypeEnumeration value that identifies the record type. Its\n  value MUST be 5.\n\nClassInfo (variable): A ClassInfo structure that provides information about the name and Members of\n  the Class.\n\n                                                                                                      30 / 55\n[MS-NRBF] - v20190313\n.NET Remoting: Binary Format Data Structure\nCopyright © 2019 Microsoft Corporation\nRelease: March 13, 2019",
      "md": "\nBinaryTypeEnum AdditionalInfos\n\n| Primitive      | PrimitiveTypeEnumeration                                           |\n| -------------- | ------------------------------------------------------------------ |\n| String         | None                                                               |\n| Object         | None                                                               |\n| SystemClass    | String (Class (1) name as specified in \\[MS-NRTP] section 2.2.1.2) |\n| Class          | ClassTypeInfo                                                      |\n| ObjectArray    | None                                                               |\n| StringArray    | None                                                               |\n| PrimitiveArray | PrimitiveTypeEnumeration                                           |\n\n- The AdditionalInfos sequence MUST NOT contain any item for the BinaryTypeEnum values of String, Object, ObjectArray, or StringArray.\n- The AdditionalInfos items MUST be in the same order as the corresponding BinaryTypeEnum items in the BinaryTypeEnums field.\n- When the BinaryTypeEnum value is Primitive, the PrimitiveTypeEnumeration value in AdditionalInfo MUST NOT be Null (17) or String (18).\n\n# 2.3.2 Record Definitions\n\n# 2.3.2.1 ClassWithMembersAndTypes\n\nThe ClassWithMembersAndTypes record is the most verbose of the Class records. It contains metadata about Members, including the names and Remoting Types of the Members. It also contains a Library ID that references the Library Name of the Class.\n\n| 1 | 2 | 3 |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |\n| - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - |\n| 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 0 | 1 |\n\nRecordTypeEnum (1 byte): A RecordTypeEnumeration value that identifies the record type. Its value MUST be 5.\n\nClassInfo (variable): A ClassInfo structure that provides information about the name and Members of the Class.\n\n30 / 55\n\n",
      "images": [
      ],
      "charts": [
      ],
      "items": [
        {
          "type": "text",
          "value": "BinaryTypeEnum AdditionalInfos",
          "md": "BinaryTypeEnum AdditionalInfos",
          "bBox": {
            "x": 95.85,
            "y": 70.9,
            "w": 161.95,
            "h": 8
          }
        },
        {
          "type": "table",
          "rows": [
            [
              "Primitive",
              "PrimitiveTypeEnumeration"
            ],
            [
              "String",
              "None"
            ],
            [
              "Object",
              "None"
            ],
            [
              "SystemClass",
              "String (Class (1) name as specified in [MS-NRTP] section 2.2.1.2)"
            ],
            [
              "Class",
              "ClassTypeInfo"
            ],
            [
              "ObjectArray",
              "None"
            ],
            [
              "StringArray",
              "None"
            ],
            [
              "PrimitiveArray",
              "PrimitiveTypeEnumeration"
            ]
          ],
          "md": "| Primitive      | PrimitiveTypeEnumeration                                           |\n| -------------- | ------------------------------------------------------------------ |\n| String         | None                                                               |\n| Object         | None                                                               |\n| SystemClass    | String (Class (1) name as specified in \\[MS-NRTP] section 2.2.1.2) |\n| Class          | ClassTypeInfo                                                      |\n| ObjectArray    | None                                                               |\n| StringArray    | None                                                               |\n| PrimitiveArray | PrimitiveTypeEnumeration                                           |",
          "isPerfectTable": true,
          "csv": "\"Primitive\",\"PrimitiveTypeEnumeration\"\n\"String\",\"None\"\n\"Object\",\"None\"\n\"SystemClass\",\"String (Class (1) name as specified in [MS-NRTP] section 2.2.1.2)\"\n\"Class\",\"ClassTypeInfo\"\n\"ObjectArray\",\"None\"\n\"StringArray\",\"None\"\n\"PrimitiveArray\",\"PrimitiveTypeEnumeration\"",
          "bBox": {
            "x": 72.1,
            "y": 91.2,
            "w": 467.63,
            "h": 587.45
          }
        },
        {
          "type": "text",
          "value": "- The AdditionalInfos sequence MUST NOT contain any item for the BinaryTypeEnum values of String, Object, ObjectArray, or StringArray.\n- The AdditionalInfos items MUST be in the same order as the corresponding BinaryTypeEnum items in the BinaryTypeEnums field.\n- When the BinaryTypeEnum value is Primitive, the PrimitiveTypeEnumeration value in AdditionalInfo MUST NOT be Null (17) or String (18).",
          "md": "- The AdditionalInfos sequence MUST NOT contain any item for the BinaryTypeEnum values of String, Object, ObjectArray, or StringArray.\n- The AdditionalInfos items MUST be in the same order as the corresponding BinaryTypeEnum items in the BinaryTypeEnums field.\n- When the BinaryTypeEnum value is Primitive, the PrimitiveTypeEnumeration value in AdditionalInfo MUST NOT be Null (17) or String (18).",
          "bBox": {
            "x": 89.15,
            "y": 70.9,
            "w": 437.48,
            "h": 416.15
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "2.3.2 Record Definitions",
          "md": "# 2.3.2 Record Definitions",
          "bBox": {
            "x": 72.1,
            "y": 366.2,
            "w": 413.55,
            "h": 120.85
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "2.3.2.1 ClassWithMembersAndTypes",
          "md": "# 2.3.2.1 ClassWithMembersAndTypes",
          "bBox": {
            "x": 72.1,
            "y": 172.4,
            "w": 427.05,
            "h": 314.65
          }
        },
        {
          "type": "text",
          "value": "The ClassWithMembersAndTypes record is the most verbose of the Class records. It contains metadata about Members, including the names and Remoting Types of the Members. It also contains a Library ID that references the Library Name of the Class.",
          "md": "The ClassWithMembersAndTypes record is the most verbose of the Class records. It contains metadata about Members, including the names and Remoting Types of the Members. It also contains a Library ID that references the Library Name of the Class.",
          "bBox": {
            "x": 72.1,
            "y": 172.4,
            "w": 465.52,
            "h": 506.25
          }
        },
        {
          "type": "table",
          "rows": [
            [
              "1",
              "2",
              "3",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              ""
            ],
            [
              "0",
              "1",
              "2",
              "3",
              "4",
              "5",
              "6",
              "7",
              "8",
              "9",
              "0",
              "1",
              "2",
              "3",
              "4",
              "5",
              "6",
              "7",
              "8",
              "9",
              "0",
              "1",
              "2",
              "3",
              "4",
              "5",
              "6",
              "7",
              "8",
              "9",
              "0",
              "1"
            ]
          ],
          "md": "| 1 | 2 | 3 |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |\n| - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - |\n| 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 0 | 1 |",
          "isPerfectTable": true,
          "csv": "\"1\",\"2\",\"3\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\"\n\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"0\",\"1\"",
          "bBox": {
            "x": 72.1,
            "y": 70.9,
            "w": 467.9,
            "h": 683.25
          }
        },
        {
          "type": "text",
          "value": "RecordTypeEnum (1 byte): A RecordTypeEnumeration value that identifies the record type. Its value MUST be 5.\n\nClassInfo (variable): A ClassInfo structure that provides information about the name and Members of the Class.\n\n30 / 55",
          "md": "RecordTypeEnum (1 byte): A RecordTypeEnumeration value that identifies the record type. Its value MUST be 5.\n\nClassInfo (variable): A ClassInfo structure that provides information about the name and Members of the Class.\n\n30 / 55",
          "bBox": {
            "x": 72.1,
            "y": 172.4,
            "w": 467.9,
            "h": 532.15
          }
        }
      ],
      "status": "OK",
      "originalOrientationAngle": 0,
      "links": [
        {
          "unsafeUrl": "../../../../../../../upload/%5BMS-NRTP%5D.pdf#Section_3acb31b0b8734aaf85039727ec40fbec",
          "text": "[MS-NRTP]"
        }
      ],
      "width": 612,
      "height": 792,
      "triggeredAutoMode": false,
      "parsingMode": "accurate",
      "structuredData": null,
      "noStructuredContent": false,
      "noTextContent": false,
      "pageHeaderMarkdown": "",
      "pageFooterMarkdown": "",
      "confidence": 0.871
    },
    {
      "page": 31,
      "text": "MemberTypeInfo (variable): A MemberTypeInfo structure that provides information about the\n  Remoting Types of the Members.\n\nLibraryId (4 bytes): An INT32 value (as specified in [MS-DTYP] section 2.2.22) that references a\n  BinaryLibrary record by its Library ID. A BinaryLibrary record with the LibraryId MUST appear\n  earlier in the serialization stream.\n\n2.3.2.2 ClassWithMembers\n\nThe ClassWithMembers record is less verbose than ClassWithMembersAndTypes. It does not contain\ninformation about the Remoting Type information of the Members. This record can be used when\nthe information is deemed unnecessary because it is known out of band or can be inferred from\ncontext.\n\n                            1                                2                         3\n0 1 2   3 4 5 6      7 8 9  0    1    2 3  4 5 6 7 8 9       0    1 2   3 4 5 6 7 8 9  0 1\n\n  RecordTypeEnum                                 ClassInfo (variable)\n\n                                               ...\n\n                                             LibraryId\n\nRecordTypeEnum (1 byte): A RecordTypeEnumeration value that identifies the record type. Its\n  value MUST be 3.\n\nClassInfo (variable): A ClassInfo structure that provides information about the name and Members of\n  the Class.\n\nLibraryId (4 bytes): An INT32 value (as specified in [MS-DTYP] section 2.2.22) that references a\n  BinaryLibrary record by its Library ID. The ID MUST be a positive integer. A BinaryLibrary record\n  with the LibraryId MUST appear earlier in the serialization stream.\n\n2.3.2.3 SystemClassWithMembersAndTypes\n\nThe SystemClassWithMembersAndTypes record is less verbose than ClassWithMembersAndTypes. It\ndoes not contain a LibraryId. This record implicitly specifies that the Class is in the System Library.\n\n                            1                                2                         3\n0 1 2   3 4 5 6      7 8 9  0    1    2 3  4 5    6   7 8 9  0    1 2   3 4 5 6 7 8 9  0 1\n\n  RecordTypeEnum                                    ClassInfo (variable)\n\n                                               ...\n\n                                   MemberTypeInfo (variable)\n\n                                               ...\n\nRecordTypeEnum (1 byte): A RecordTypeEnumeration value that identifies the record type. Its\n  value MUST be 4.\n\n                                                                                               31 / 55\n[MS-NRBF] - v20190313\n.NET Remoting: Binary Format Data Structure\nCopyright © 2019 Microsoft Corporation\nRelease: March 13, 2019",
      "md": "\n# .NET Remoting: Binary Format Data Structure\n\nMemberTypeInfo (variable): A MemberTypeInfo structure that provides information about the Remoting Types of the Members.\n\nLibraryId (4 bytes): An INT32 value (as specified in [MS-DTYP] section 2.2.22) that references a BinaryLibrary record by its Library ID. A BinaryLibrary record with the LibraryId MUST appear earlier in the serialization stream.\n\n# 2.3.2.2 ClassWithMembers\n\nThe ClassWithMembers record is less verbose than ClassWithMembersAndTypes. It does not contain information about the Remoting Type information of the Members. This record can be used when the information is deemed unnecessary because it is known out of band or can be inferred from context.\n\n|                |                           |                         |\n| -------------- | ------------------------- | ----------------------- |\n| 0 1 2 3 4 5 6  | 7 8 9 0 1 2 3 4 5 6 7 8 9 | 0 1 2 3 4 5 6 7 8 9 0 1 |\n| RecordTypeEnum | ClassInfo (variable)      |                         |\n|                | ...                       |                         |\n|                | LibraryId                 |                         |\n\nRecordTypeEnum (1 byte): A RecordTypeEnumeration value that identifies the record type. Its value MUST be 3.\n\nClassInfo (variable): A ClassInfo structure that provides information about the name and Members of the Class.\n\nLibraryId (4 bytes): An INT32 value (as specified in [MS-DTYP] section 2.2.22) that references a BinaryLibrary record by its Library ID. The ID MUST be a positive integer. A BinaryLibrary record with the LibraryId MUST appear earlier in the serialization stream.\n\n# 2.3.2.3 SystemClassWithMembersAndTypes\n\nThe SystemClassWithMembersAndTypes record is less verbose than ClassWithMembersAndTypes. It does not contain a LibraryId. This record implicitly specifies that the Class is in the System Library.\n\n|                |                           |                         |\n| -------------- | ------------------------- | ----------------------- |\n| 0 1 2 3 4 5 6  | 7 8 9 0 1 2 3 4 5 6 7 8 9 | 0 1 2 3 4 5 6 7 8 9 0 1 |\n| RecordTypeEnum | ClassInfo (variable)      |                         |\n|                | ...                       |                         |\n|                | MemberTypeInfo (variable) |                         |\n|                | ...                       |                         |\n\nRecordTypeEnum (1 byte): A RecordTypeEnumeration value that identifies the record type. Its value MUST be 4.\n\n31 / 55\n\nCopyright © 2019 Microsoft Corporation\n\nRelease: March 13, 2019\n\n",
      "images": [
      ],
      "charts": [
      ],
      "items": [
        {
          "type": "heading",
          "lvl": 1,
          "value": ".NET Remoting: Binary Format Data Structure",
          "md": "# .NET Remoting: Binary Format Data Structure",
          "bBox": {
            "x": 72.1,
            "y": 724.35,
            "w": 182.82,
            "h": 8
          }
        },
        {
          "type": "text",
          "value": "MemberTypeInfo (variable): A MemberTypeInfo structure that provides information about the Remoting Types of the Members.\n\nLibraryId (4 bytes): An INT32 value (as specified in [MS-DTYP] section 2.2.22) that references a BinaryLibrary record by its Library ID. A BinaryLibrary record with the LibraryId MUST appear earlier in the serialization stream.",
          "md": "MemberTypeInfo (variable): A MemberTypeInfo structure that provides information about the Remoting Types of the Members.\n\nLibraryId (4 bytes): An INT32 value (as specified in [MS-DTYP] section 2.2.22) that references a BinaryLibrary record by its Library ID. A BinaryLibrary record with the LibraryId MUST appear earlier in the serialization stream.",
          "bBox": {
            "x": 72.1,
            "y": 55.15,
            "w": 441.57,
            "h": 548.8
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "2.3.2.2 ClassWithMembers",
          "md": "# 2.3.2.2 ClassWithMembers",
          "bBox": {
            "x": 72.1,
            "y": 141.8,
            "w": 413.55,
            "h": 390.35
          }
        },
        {
          "type": "text",
          "value": "The ClassWithMembers record is less verbose than ClassWithMembersAndTypes. It does not contain information about the Remoting Type information of the Members. This record can be used when the information is deemed unnecessary because it is known out of band or can be inferred from context.",
          "md": "The ClassWithMembers record is less verbose than ClassWithMembersAndTypes. It does not contain information about the Remoting Type information of the Members. This record can be used when the information is deemed unnecessary because it is known out of band or can be inferred from context.",
          "bBox": {
            "x": 72.1,
            "y": 164.3,
            "w": 452.91,
            "h": 45.9
          }
        },
        {
          "type": "table",
          "rows": [
            [
              "0 1 2 3 4 5 6",
              "7 8 9 0 1 2 3 4 5 6 7 8 9",
              "0 1 2 3 4 5 6 7 8 9 0 1"
            ],
            [
              "RecordTypeEnum",
              "ClassInfo (variable)",
              ""
            ],
            [
              "",
              "...",
              ""
            ],
            [
              "",
              "LibraryId",
              ""
            ]
          ],
          "md": "|                |                           |                         |\n| -------------- | ------------------------- | ----------------------- |\n| 0 1 2 3 4 5 6  | 7 8 9 0 1 2 3 4 5 6 7 8 9 | 0 1 2 3 4 5 6 7 8 9 0 1 |\n| RecordTypeEnum | ClassInfo (variable)      |                         |\n|                | ...                       |                         |\n|                | LibraryId                 |                         |",
          "isPerfectTable": true,
          "csv": "\"0 1 2 3 4 5 6\",\"7 8 9 0 1 2 3 4 5 6 7 8 9\",\"0 1 2 3 4 5 6 7 8 9 0 1\"\n\"RecordTypeEnum\",\"ClassInfo (variable)\",\"\"\n\"\",\"...\",\"\"\n\"\",\"LibraryId\",\"\"",
          "bBox": {
            "x": 72.1,
            "y": 55.15,
            "w": 467.9,
            "h": 699
          }
        },
        {
          "type": "text",
          "value": "RecordTypeEnum (1 byte): A RecordTypeEnumeration value that identifies the record type. Its value MUST be 3.\n\nClassInfo (variable): A ClassInfo structure that provides information about the name and Members of the Class.\n\nLibraryId (4 bytes): An INT32 value (as specified in [MS-DTYP] section 2.2.22) that references a BinaryLibrary record by its Library ID. The ID MUST be a positive integer. A BinaryLibrary record with the LibraryId MUST appear earlier in the serialization stream.",
          "md": "RecordTypeEnum (1 byte): A RecordTypeEnumeration value that identifies the record type. Its value MUST be 3.\n\nClassInfo (variable): A ClassInfo structure that provides information about the name and Members of the Class.\n\nLibraryId (4 bytes): An INT32 value (as specified in [MS-DTYP] section 2.2.22) that references a BinaryLibrary record by its Library ID. The ID MUST be a positive integer. A BinaryLibrary record with the LibraryId MUST appear earlier in the serialization stream.",
          "bBox": {
            "x": 72.1,
            "y": 88.75,
            "w": 467.63,
            "h": 564.6
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "2.3.2.3 SystemClassWithMembersAndTypes",
          "md": "# 2.3.2.3 SystemClassWithMembersAndTypes",
          "bBox": {
            "x": 72.1,
            "y": 225.4,
            "w": 413.55,
            "h": 306.75
          }
        },
        {
          "type": "text",
          "value": "The SystemClassWithMembersAndTypes record is less verbose than ClassWithMembersAndTypes. It does not contain a LibraryId. This record implicitly specifies that the Class is in the System Library.",
          "md": "The SystemClassWithMembersAndTypes record is less verbose than ClassWithMembersAndTypes. It does not contain a LibraryId. This record implicitly specifies that the Class is in the System Library.",
          "bBox": {
            "x": 72.1,
            "y": 309.1,
            "w": 454.85,
            "h": 187.95
          }
        },
        {
          "type": "table",
          "rows": [
            [
              "0 1 2 3 4 5 6",
              "7 8 9 0 1 2 3 4 5 6 7 8 9",
              "0 1 2 3 4 5 6 7 8 9 0 1"
            ],
            [
              "RecordTypeEnum",
              "ClassInfo (variable)",
              ""
            ],
            [
              "",
              "...",
              ""
            ],
            [
              "",
              "MemberTypeInfo (variable)",
              ""
            ],
            [
              "",
              "...",
              ""
            ]
          ],
          "md": "|                |                           |                         |\n| -------------- | ------------------------- | ----------------------- |\n| 0 1 2 3 4 5 6  | 7 8 9 0 1 2 3 4 5 6 7 8 9 | 0 1 2 3 4 5 6 7 8 9 0 1 |\n| RecordTypeEnum | ClassInfo (variable)      |                         |\n|                | ...                       |                         |\n|                | MemberTypeInfo (variable) |                         |\n|                | ...                       |                         |",
          "isPerfectTable": true,
          "csv": "\"0 1 2 3 4 5 6\",\"7 8 9 0 1 2 3 4 5 6 7 8 9\",\"0 1 2 3 4 5 6 7 8 9 0 1\"\n\"RecordTypeEnum\",\"ClassInfo (variable)\",\"\"\n\"\",\"...\",\"\"\n\"\",\"MemberTypeInfo (variable)\",\"\"\n\"\",\"...\",\"\"",
          "bBox": {
            "x": 72.1,
            "y": 55.15,
            "w": 467.9,
            "h": 699
          }
        },
        {
          "type": "text",
          "value": "RecordTypeEnum (1 byte): A RecordTypeEnumeration value that identifies the record type. Its value MUST be 4.\n\n31 / 55\n\nCopyright © 2019 Microsoft Corporation\n\nRelease: March 13, 2019",
          "md": "RecordTypeEnum (1 byte): A RecordTypeEnumeration value that identifies the record type. Its value MUST be 4.\n\n31 / 55\n\nCopyright © 2019 Microsoft Corporation\n\nRelease: March 13, 2019",
          "bBox": {
            "x": 72.1,
            "y": 225.4,
            "w": 467.9,
            "h": 528.75
          }
        }
      ],
      "status": "OK",
      "originalOrientationAngle": 0,
      "links": [
      ],
      "width": 612,
      "height": 792,
      "triggeredAutoMode": false,
      "parsingMode": "accurate",
      "structuredData": null,
      "noStructuredContent": false,
      "noTextContent": false,
      "pageHeaderMarkdown": "\n# .NET Remoting: Binary Format Data Structure\n\n",
      "pageFooterMarkdown": "\n31 / 55\n\nCopyright © 2019 Microsoft Corporation\n\nRelease: March 13, 2019\n\n",
      "confidence": 0.979
    },
    {
      "page": 32,
      "text": "ClassInfo (variable): A ClassInfo structure that provides information about the name and Members\n  of the Class.\n\nMemberTypeInfo (variable): A MemberTypeInfo structure that provides information about the\n  Remoting Type of the Members.\n\n2.3.2.4 SystemClassWithMembers\n\nThe SystemClassWithMembers record is less verbose than ClassWithMembersAndTypes. It does not\ncontain a LibraryId or the information about the Remoting Types of the Members. This record\nimplicitly specifies that the Class is in the System Library. This record can be used when the\ninformation is deemed unnecessary because it is known out of band or can be inferred from context.\n\n                            1                               2                       3\n0 1 2 3      4 5 6   7 8 9  0    1    2 3  4 5 6 7     8 9  0    1 2 3 4 5 6 7 8 9  0 1\n\n  RecordTypeEnum                                 ClassInfo (variable)\n\n                                               ...\n\nRecordTypeEnum (1 byte): A RecordTypeEnumeration value that identifies the record type. Its\n  value MUST be 2.\n\nClassInfo (variable): A ClassInfo structure that provides information about the name and Members of\n  the Class.\n\n2.3.2.5 ClassWithId\n\nThe ClassWithId record is the most compact. It has no metadata. It refers to metadata defined in\nSystemClassWithMembers, SystemClassWithMembersAndTypes, ClassWithMembers, or\nClassWithMembersAndTypes record.\n\n                            1                               2                       3\n0 1 2 3      4 5 6   7 8 9  0    1    2 3  4 5    6 7  8 9  0    1 2 3 4 5 6 7 8 9  0 1\n\n  RecordTypeEnum                                         ObjectId\n\n      ...                                              MetadataId\n\n      ...\n\nRecordTypeEnum (1 byte): A RecordTypeEnumeration value that identifies the record type. The\n  value MUST be 1.\n\nObjectId (4 bytes): An INT32 value (as specified in [MS-DTYP] section 2.2.22) that uniquely identifies\n  the object in the serialization stream.\n\nMetadataId (4 bytes): An INT32 value (as specified in [MS-DTYP] section 2.2.22) that references one\n  of the other Class records by its ObjectId. A SystemClassWithMembers,\n  SystemClassWithMembersAndTypes, ClassWithMembers, or ClassWithMembersAndTypes record\n  with the value of this field in its ObjectId field MUST appear earlier in the serialization stream.\n\n                                                                                                32 / 55\n[MS-NRBF] - v20190313\n.NET Remoting: Binary Format Data Structure\nCopyright © 2019 Microsoft Corporation\nRelease: March 13, 2019",
      "md": "\n# 2.3.2.4 SystemClassWithMembers\n\nThe SystemClassWithMembers record is less verbose than ClassWithMembersAndTypes. It does not contain a LibraryId or the information about the Remoting Types of the Members. This record implicitly specifies that the Class is in the System Library. This record can be used when the information is deemed unnecessary because it is known out of band or can be inferred from context.\n\n|                |                      |                               |\n| -------------- | -------------------- | ----------------------------- |\n| 0 1 2 3        | 4 5 6                | 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 |\n| RecordTypeEnum | ClassInfo (variable) |                               |\n\nRecordTypeEnum (1 byte): A RecordTypeEnumeration value that identifies the record type. Its value MUST be 2.\n\nClassInfo (variable): A ClassInfo structure that provides information about the name and Members of the Class.\n\n# 2.3.2.5 ClassWithId\n\nThe ClassWithId record is the most compact. It has no metadata. It refers to metadata defined in SystemClassWithMembers, SystemClassWithMembersAndTypes, ClassWithMembers, or ClassWithMembersAndTypes record.\n\n|                |          |                               |\n| -------------- | -------- | ----------------------------- |\n| 0 1 2 3        | 4 5 6    | 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 |\n| RecordTypeEnum | ObjectId | MetadataId                    |\n\nRecordTypeEnum (1 byte): A RecordTypeEnumeration value that identifies the record type. The value MUST be 1.\n\nObjectId (4 bytes): An INT32 value (as specified in [MS-DTYP] section 2.2.22) that uniquely identifies the object in the serialization stream.\n\nMetadataId (4 bytes): An INT32 value (as specified in [MS-DTYP] section 2.2.22) that references one of the other Class records by its ObjectId. A SystemClassWithMembers, SystemClassWithMembersAndTypes, ClassWithMembers, or ClassWithMembersAndTypes record with the value of this field in its ObjectId field MUST appear earlier in the serialization stream.\n\n",
      "images": [
      ],
      "charts": [
      ],
      "items": [
        {
          "type": "heading",
          "lvl": 1,
          "value": "2.3.2.4 SystemClassWithMembers",
          "md": "# 2.3.2.4 SystemClassWithMembers",
          "bBox": {
            "x": 72.1,
            "y": 129.5,
            "w": 413.55,
            "h": 332.25
          }
        },
        {
          "type": "text",
          "value": "The SystemClassWithMembers record is less verbose than ClassWithMembersAndTypes. It does not contain a LibraryId or the information about the Remoting Types of the Members. This record implicitly specifies that the Class is in the System Library. This record can be used when the information is deemed unnecessary because it is known out of band or can be inferred from context.",
          "md": "The SystemClassWithMembers record is less verbose than ClassWithMembersAndTypes. It does not contain a LibraryId or the information about the Remoting Types of the Members. This record implicitly specifies that the Class is in the System Library. This record can be used when the information is deemed unnecessary because it is known out of band or can be inferred from context.",
          "bBox": {
            "x": 72.1,
            "y": 152,
            "w": 455.37,
            "h": 45.9
          }
        },
        {
          "type": "table",
          "rows": [
            [
              "0 1 2 3",
              "4 5 6",
              "7 8 9 0 1 2 3 4 5 6 7 8 9 0 1"
            ],
            [
              "RecordTypeEnum",
              "ClassInfo (variable)",
              ""
            ]
          ],
          "md": "|                |                      |                               |\n| -------------- | -------------------- | ----------------------------- |\n| 0 1 2 3        | 4 5 6                | 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 |\n| RecordTypeEnum | ClassInfo (variable) |                               |",
          "isPerfectTable": true,
          "csv": "\"0 1 2 3\",\"4 5 6\",\"7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\"\n\"RecordTypeEnum\",\"ClassInfo (variable)\",\"\"",
          "bBox": {
            "x": 72.1,
            "y": 55.15,
            "w": 467.9,
            "h": 699
          }
        },
        {
          "type": "text",
          "value": "RecordTypeEnum (1 byte): A RecordTypeEnumeration value that identifies the record type. Its value MUST be 2.\n\nClassInfo (variable): A ClassInfo structure that provides information about the name and Members of the Class.",
          "md": "RecordTypeEnum (1 byte): A RecordTypeEnumeration value that identifies the record type. Its value MUST be 2.\n\nClassInfo (variable): A ClassInfo structure that provides information about the name and Members of the Class.",
          "bBox": {
            "x": 72.1,
            "y": 55.15,
            "w": 467.63,
            "h": 429.4
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "2.3.2.5 ClassWithId",
          "md": "# 2.3.2.5 ClassWithId",
          "bBox": {
            "x": 72.1,
            "y": 213.1,
            "w": 413.55,
            "h": 248.65
          }
        },
        {
          "type": "text",
          "value": "The ClassWithId record is the most compact. It has no metadata. It refers to metadata defined in SystemClassWithMembers, SystemClassWithMembersAndTypes, ClassWithMembers, or ClassWithMembersAndTypes record.",
          "md": "The ClassWithId record is the most compact. It has no metadata. It refers to metadata defined in SystemClassWithMembers, SystemClassWithMembersAndTypes, ClassWithMembers, or ClassWithMembersAndTypes record.",
          "bBox": {
            "x": 72.1,
            "y": 393.05,
            "w": 453.26,
            "h": 257.2
          }
        },
        {
          "type": "table",
          "rows": [
            [
              "0 1 2 3",
              "4 5 6",
              "7 8 9 0 1 2 3 4 5 6 7 8 9 0 1"
            ],
            [
              "RecordTypeEnum",
              "ObjectId",
              "MetadataId"
            ]
          ],
          "md": "|                |          |                               |\n| -------------- | -------- | ----------------------------- |\n| 0 1 2 3        | 4 5 6    | 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 |\n| RecordTypeEnum | ObjectId | MetadataId                    |",
          "isPerfectTable": true,
          "csv": "\"0 1 2 3\",\"4 5 6\",\"7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\"\n\"RecordTypeEnum\",\"ObjectId\",\"MetadataId\"",
          "bBox": {
            "x": 72.1,
            "y": 247.8,
            "w": 464.82,
            "h": 414.75
          }
        },
        {
          "type": "text",
          "value": "RecordTypeEnum (1 byte): A RecordTypeEnumeration value that identifies the record type. The value MUST be 1.\n\nObjectId (4 bytes): An INT32 value (as specified in [MS-DTYP] section 2.2.22) that uniquely identifies the object in the serialization stream.\n\nMetadataId (4 bytes): An INT32 value (as specified in [MS-DTYP] section 2.2.22) that references one of the other Class records by its ObjectId. A SystemClassWithMembers, SystemClassWithMembersAndTypes, ClassWithMembers, or ClassWithMembersAndTypes record with the value of this field in its ObjectId field MUST appear earlier in the serialization stream.",
          "md": "RecordTypeEnum (1 byte): A RecordTypeEnumeration value that identifies the record type. The value MUST be 1.\n\nObjectId (4 bytes): An INT32 value (as specified in [MS-DTYP] section 2.2.22) that uniquely identifies the object in the serialization stream.\n\nMetadataId (4 bytes): An INT32 value (as specified in [MS-DTYP] section 2.2.22) that references one of the other Class records by its ObjectId. A SystemClassWithMembers, SystemClassWithMembersAndTypes, ClassWithMembers, or ClassWithMembersAndTypes record with the value of this field in its ObjectId field MUST appear earlier in the serialization stream.",
          "bBox": {
            "x": 72.1,
            "y": 213.1,
            "w": 464.82,
            "h": 449.45
          }
        }
      ],
      "status": "OK",
      "originalOrientationAngle": 0,
      "links": [
      ],
      "width": 612,
      "height": 792,
      "triggeredAutoMode": false,
      "parsingMode": "accurate",
      "structuredData": null,
      "noStructuredContent": false,
      "noTextContent": false,
      "pageHeaderMarkdown": "",
      "pageFooterMarkdown": "",
      "confidence": 0.792
    },
    {
      "page": 33,
      "text": "2.4   Array Records\n\nThis section defines Array records that represent Array instances. [MS-NRTP] section 3.1.5.1.7,\ndescribes the mechanism to map an Array instance to a record defined in this section.\n\nItems of an Array MUST be serialized as records following the Array record, as specified in section 2.7.\nThe number of records that contain the Array items depends on the type of Array record. For the\nArraySingleObject, ArraySinglePrimitive, and ArraySingleString records, the number of records\ncontaining Array items MUST be equal to the value of the Length field of the ArrayInfo field. For\nBinaryArray records, the number of records containing Array items MUST be equal to the product of\nthe values contained in the Lengths field of the BinaryArray record. In the cases where an item of an\nArray can contain a Null Object, multiple ObjectNull records in sequence MAY be represented by a\nsingle ObjectNullMultiple (section   2.5.5) or ObjectNullMultiple256 (section      2.5.6) record. Each of\nthese records contains a NullCount field that states how many ObjectNull records that the record\nrepresents. For the purpose of calculating the number of records, a single ObjectNullMultiple or\nObjectNullMultiple256 record is counted as many times as the value specified in the NullCount\nfield.<6>\n\n2.4.1      Enumerations\n\n2.4.1.1 BinaryArrayTypeEnumeration\n\nThe BinaryArrayTypeEnumeration is used to denote the type of an Array. The size of the enumeration\nis 1 byte. It is used by the Array records.\n\n Constant/value       Description\n\n Single               A single-dimensional Array.\n 0\n\n Jagged               An Array whose elements are Arrays. The elements of a jagged Array can be of different\n 1                    dimensions and sizes.\n\n Rectangular          A multi-dimensional rectangular Array.\n 2\n\n SingleOffset         A single-dimensional offset.\n 3\n\n JaggedOffset         A jagged Array where the lower bound index is greater than 0.\n 4\n\n RectangularOffse     Multi-dimensional Arrays where the lower bound index of at least one of the dimensions is\n t                    greater than 0.\n 5\n\n\n                                           33 / 55\n[MS-NRBF] - v20190313\n.NET Remoting: Binary Format Data Structure\nCopyright © 2019 Microsoft Corporation\nRelease: March 13, 2019",
      "md": "\n# 2.4 Array Records\n\nThis section defines Array records that represent Array instances. [MS-NRTP] section 3.1.5.1.7, describes the mechanism to map an Array instance to a record defined in this section.\n\nItems of an Array MUST be serialized as records following the Array record, as specified in section 2.7. The number of records that contain the Array items depends on the type of Array record. For the ArraySingleObject, ArraySinglePrimitive, and ArraySingleString records, the number of records containing Array items MUST be equal to the value of the Length field of the ArrayInfo field. For BinaryArray records, the number of records containing Array items MUST be equal to the product of the values contained in the Lengths field of the BinaryArray record. In the cases where an item of an Array can contain a Null Object, multiple ObjectNull records in sequence MAY be represented by a single ObjectNullMultiple (section 2.5.5) or ObjectNullMultiple256 (section 2.5.6) record. Each of these records contains a NullCount field that states how many ObjectNull records that the record represents. For the purpose of calculating the number of records, a single ObjectNullMultiple or ObjectNullMultiple256 record is counted as many times as the value specified in the NullCount field.6\n\n# 2.4.1 Enumerations\n\n# 2.4.1.1 BinaryArrayTypeEnumeration\n\nThe BinaryArrayTypeEnumeration is used to denote the type of an Array. The size of the enumeration is 1 byte. It is used by the Array records.\n\n| Constant/value    | Description                                                                                                  |\n| ----------------- | ------------------------------------------------------------------------------------------------------------ |\n| Single            | A single-dimensional Array.                                                                                  |\n| 0                 |                                                                                                              |\n| Jagged            | An Array whose elements are Arrays. The elements of a jagged Array can be of different dimensions and sizes. |\n| 1                 |                                                                                                              |\n| Rectangular       | A multi-dimensional rectangular Array.                                                                       |\n| 2                 |                                                                                                              |\n| SingleOffset      | A single-dimensional offset.                                                                                 |\n| 3                 |                                                                                                              |\n| JaggedOffset      | A jagged Array where the lower bound index is greater than 0.                                                |\n| 4                 |                                                                                                              |\n| RectangularOffset | Multi-dimensional Arrays where the lower bound index of at least one of the dimensions is greater than 0.    |\n| 5                 |                                                                                                              |\n\n",
      "images": [
      ],
      "charts": [
      ],
      "items": [
        {
          "type": "heading",
          "lvl": 1,
          "value": "2.4 Array Records",
          "md": "# 2.4 Array Records",
          "bBox": {
            "x": 72.1,
            "y": 55.3,
            "w": 105.65,
            "h": 489.45
          }
        },
        {
          "type": "text",
          "value": "This section defines Array records that represent Array instances. [MS-NRTP] section 3.1.5.1.7, describes the mechanism to map an Array instance to a record defined in this section.\n\nItems of an Array MUST be serialized as records following the Array record, as specified in section 2.7. The number of records that contain the Array items depends on the type of Array record. For the ArraySingleObject, ArraySinglePrimitive, and ArraySingleString records, the number of records containing Array items MUST be equal to the value of the Length field of the ArrayInfo field. For BinaryArray records, the number of records containing Array items MUST be equal to the product of the values contained in the Lengths field of the BinaryArray record. In the cases where an item of an Array can contain a Null Object, multiple ObjectNull records in sequence MAY be represented by a single ObjectNullMultiple (section 2.5.5) or ObjectNullMultiple256 (section 2.5.6) record. Each of these records contains a NullCount field that states how many ObjectNull records that the record represents. For the purpose of calculating the number of records, a single ObjectNullMultiple or ObjectNullMultiple256 record is counted as many times as the value specified in the NullCount field.6",
          "md": "This section defines Array records that represent Array instances. [MS-NRTP] section 3.1.5.1.7, describes the mechanism to map an Array instance to a record defined in this section.\n\nItems of an Array MUST be serialized as records following the Array record, as specified in section 2.7. The number of records that contain the Array items depends on the type of Array record. For the ArraySingleObject, ArraySinglePrimitive, and ArraySingleString records, the number of records containing Array items MUST be equal to the value of the Length field of the ArrayInfo field. For BinaryArray records, the number of records containing Array items MUST be equal to the product of the values contained in the Lengths field of the BinaryArray record. In the cases where an item of an Array can contain a Null Object, multiple ObjectNull records in sequence MAY be represented by a single ObjectNullMultiple (section 2.5.5) or ObjectNullMultiple256 (section 2.5.6) record. Each of these records contains a NullCount field that states how many ObjectNull records that the record represents. For the purpose of calculating the number of records, a single ObjectNullMultiple or ObjectNullMultiple256 record is counted as many times as the value specified in the NullCount field.6",
          "bBox": {
            "x": 72.1,
            "y": 55.3,
            "w": 467.85,
            "h": 534.55
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "2.4.1 Enumerations",
          "md": "# 2.4.1 Enumerations",
          "bBox": {
            "x": 72.1,
            "y": 55.3,
            "w": 111,
            "h": 520.65
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "2.4.1.1 BinaryArrayTypeEnumeration",
          "md": "# 2.4.1.1 BinaryArrayTypeEnumeration",
          "bBox": {
            "x": 72.1,
            "y": 55.3,
            "w": 203.2,
            "h": 520.65
          }
        },
        {
          "type": "text",
          "value": "The BinaryArrayTypeEnumeration is used to denote the type of an Array. The size of the enumeration is 1 byte. It is used by the Array records.",
          "md": "The BinaryArrayTypeEnumeration is used to denote the type of an Array. The size of the enumeration is 1 byte. It is used by the Array records.",
          "bBox": {
            "x": 72.1,
            "y": 55.3,
            "w": 463.21,
            "h": 520.65
          }
        },
        {
          "type": "table",
          "rows": [
            [
              "Constant/value",
              "Description"
            ],
            [
              "Single",
              "A single-dimensional Array."
            ],
            [
              "0",
              ""
            ],
            [
              "Jagged",
              "An Array whose elements are Arrays. The elements of a jagged Array can be of different dimensions and sizes."
            ],
            [
              "1",
              ""
            ],
            [
              "Rectangular",
              "A multi-dimensional rectangular Array."
            ],
            [
              "2",
              ""
            ],
            [
              "SingleOffset",
              "A single-dimensional offset."
            ],
            [
              "3",
              ""
            ],
            [
              "JaggedOffset",
              "A jagged Array where the lower bound index is greater than 0."
            ],
            [
              "4",
              ""
            ],
            [
              "RectangularOffset",
              "Multi-dimensional Arrays where the lower bound index of at least one of the dimensions is greater than 0."
            ],
            [
              "5",
              ""
            ]
          ],
          "md": "| Constant/value    | Description                                                                                                  |\n| ----------------- | ------------------------------------------------------------------------------------------------------------ |\n| Single            | A single-dimensional Array.                                                                                  |\n| 0                 |                                                                                                              |\n| Jagged            | An Array whose elements are Arrays. The elements of a jagged Array can be of different dimensions and sizes. |\n| 1                 |                                                                                                              |\n| Rectangular       | A multi-dimensional rectangular Array.                                                                       |\n| 2                 |                                                                                                              |\n| SingleOffset      | A single-dimensional offset.                                                                                 |\n| 3                 |                                                                                                              |\n| JaggedOffset      | A jagged Array where the lower bound index is greater than 0.                                                |\n| 4                 |                                                                                                              |\n| RectangularOffset | Multi-dimensional Arrays where the lower bound index of at least one of the dimensions is greater than 0.    |\n| 5                 |                                                                                                              |",
          "isPerfectTable": true,
          "csv": "\"Constant/value\",\"Description\"\n\"Single\",\"A single-dimensional Array.\"\n\"0\",\"\"\n\"Jagged\",\"An Array whose elements are Arrays. The elements of a jagged Array can be of different dimensions and sizes.\"\n\"1\",\"\"\n\"Rectangular\",\"A multi-dimensional rectangular Array.\"\n\"2\",\"\"\n\"SingleOffset\",\"A single-dimensional offset.\"\n\"3\",\"\"\n\"JaggedOffset\",\"A jagged Array where the lower bound index is greater than 0.\"\n\"4\",\"\"\n\"RectangularOffset\",\"Multi-dimensional Arrays where the lower bound index of at least one of the dimensions is greater than 0.\"\n\"5\",\"\"",
          "bBox": {
            "x": 72.1,
            "y": 55.3,
            "w": 467.9,
            "h": 698.85
          }
        }
      ],
      "status": "OK",
      "originalOrientationAngle": 0,
      "links": [
        {
          "unsafeUrl": "../../../../../../../upload/%5BMS-NRTP%5D.pdf#Section_3acb31b0b8734aaf85039727ec40fbec",
          "text": "[MS-NRTP]"
        }
      ],
      "width": 612,
      "height": 792,
      "triggeredAutoMode": false,
      "parsingMode": "accurate",
      "structuredData": null,
      "noStructuredContent": false,
      "noTextContent": false,
      "pageHeaderMarkdown": "",
      "pageFooterMarkdown": "",
      "confidence": 0.936
    },
    {
      "page": 34,
      "text": "2.4.2 Common Definitions\n\n2.4.2.1 ArrayInfo\n\nThe ArrayInfo is a common structure that is used by Array records.\n\n                             1                            2                            3\n0 1   2 3 4   5 6   7 8 9    0    1 2 3 4 5     6 7 8 9   0    1 2 3      4 5 6 7 8 9  0 1\n\n                                          ObjectId\n\n                                          Length\n\nObjectId (4 bytes): An INT32 value (as specified in [MS-DTYP] section 2.2.22) that uniquely identifies\n  the Array instance in the serialization stream. The ID MUST be a positive integer. An\n  implementation MAY use any algorithm to generate the unique IDs.<7>\n\nLength (4 bytes): An INT32 value (as specified in [MS-DTYP] section 2.2.22) that specifies the\n  number of items in the Array. The value MUST be 0 or a positive integer.\n\n2.4.3   Record Definitions\n\n2.4.3.1 BinaryArray\n\nBinaryArray is the most general form of Array records. The record is more verbose than the other\nArray records.\n\n                             1                            2                            3\n0 1   2 3 4   5 6   7 8 9    0    1 2 3 4 5     6 7 8 9   0    1 2 3      4 5 6 7 8 9  0 1\n\n  RecordTypeEnum                                      ObjectId\n\n          ...         BinaryArrayTypeEnum                        Rank\n\n                      ...                                 Lengths (variable)\n\n                                             ...\n\n                                    LowerBounds (variable)\n\n                                             ...\n\n      TypeEnum                               AdditionalTypeInfo (variable)\n\n                                             ...\n\nRecordTypeEnum (1 byte): A RecordTypeEnumeration value that identifies the record type. Its\n  value MUST be 7.\n\n\n                                           34 / 55\n[MS-NRBF] - v20190313\n.NET Remoting: Binary Format Data Structure\nCopyright © 2019 Microsoft Corporation\nRelease: March 13, 2019",
      "md": "\n# 2.4.2 Common Definitions\n\n# 2.4.2.1 ArrayInfo\n\nThe ArrayInfo is a common structure that is used by Array records.\n\n|   | 0 | 1        | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 0 | 1 |\n| - | - | -------- | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - |\n|   |   | ObjectId |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |\n|   |   | Length   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |\n\nObjectId (4 bytes): An INT32 value (as specified in [MS-DTYP] section 2.2.22) that uniquely identifies the Array instance in the serialization stream. The ID MUST be a positive integer. An implementation MAY use any algorithm to generate the unique IDs.7\n\nLength (4 bytes): An INT32 value (as specified in [MS-DTYP] section 2.2.22) that specifies the number of items in the Array. The value MUST be 0 or a positive integer.\n\n# 2.4.3 Record Definitions\n\n# 2.4.3.1 BinaryArray\n\nBinaryArray is the most general form of Array records. The record is more verbose than the other Array records.\n\n|   | 0              | 1                      | 2                             | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 0 | 1 |   |   |\n| - | -------------- | ---------------------- | ----------------------------- | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - |\n|   | RecordTypeEnum |                        | ObjectId                      |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |\n|   | ...            | BinaryArrayTypeEnum    | Rank                          |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |\n|   | ...            |                        | Lengths (variable)            |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |\n|   | ...            | LowerBounds (variable) |                               |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |\n|   | TypeEnum       |                        | AdditionalTypeInfo (variable) |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |\n|   |                |                        | ...                           |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |\n\nRecordTypeEnum (1 byte): A RecordTypeEnumeration value that identifies the record type. Its value MUST be 7.\n\n",
      "images": [
      ],
      "charts": [
      ],
      "items": [
        {
          "type": "heading",
          "lvl": 1,
          "value": "2.4.2 Common Definitions",
          "md": "# 2.4.2 Common Definitions",
          "bBox": {
            "x": 72.1,
            "y": 55.3,
            "w": 332.55,
            "h": 354.65
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "2.4.2.1 ArrayInfo",
          "md": "# 2.4.2.1 ArrayInfo",
          "bBox": {
            "x": 72.1,
            "y": 55.3,
            "w": 427.05,
            "h": 354.65
          }
        },
        {
          "type": "text",
          "value": "The ArrayInfo is a common structure that is used by Array records.",
          "md": "The ArrayInfo is a common structure that is used by Array records.",
          "bBox": {
            "x": 72.1,
            "y": 107.45,
            "w": 305.45,
            "h": 267.4
          }
        },
        {
          "type": "table",
          "rows": [
            [
              "",
              "0",
              "1",
              "2",
              "3",
              "4",
              "5",
              "6",
              "7",
              "8",
              "9",
              "0",
              "1",
              "2",
              "3",
              "4",
              "5",
              "6",
              "7",
              "8",
              "9",
              "0",
              "1",
              "2",
              "3",
              "4",
              "5",
              "6",
              "7",
              "8",
              "9",
              "0",
              "1"
            ],
            [
              "",
              "",
              "ObjectId",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              ""
            ],
            [
              "",
              "",
              "Length",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              ""
            ]
          ],
          "md": "|   | 0 | 1        | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 0 | 1 |\n| - | - | -------- | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - |\n|   |   | ObjectId |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |\n|   |   | Length   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |",
          "isPerfectTable": true,
          "csv": "\"\",\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"0\",\"1\"\n\"\",\"\",\"ObjectId\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\"\n\"\",\"\",\"Length\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\"",
          "bBox": {
            "x": 72.1,
            "y": 55.3,
            "w": 467.9,
            "h": 698.85
          }
        },
        {
          "type": "text",
          "value": "ObjectId (4 bytes): An INT32 value (as specified in [MS-DTYP] section 2.2.22) that uniquely identifies the Array instance in the serialization stream. The ID MUST be a positive integer. An implementation MAY use any algorithm to generate the unique IDs.7\n\nLength (4 bytes): An INT32 value (as specified in [MS-DTYP] section 2.2.22) that specifies the number of items in the Array. The value MUST be 0 or a positive integer.",
          "md": "ObjectId (4 bytes): An INT32 value (as specified in [MS-DTYP] section 2.2.22) that uniquely identifies the Array instance in the serialization stream. The ID MUST be a positive integer. An implementation MAY use any algorithm to generate the unique IDs.7\n\nLength (4 bytes): An INT32 value (as specified in [MS-DTYP] section 2.2.22) that specifies the number of items in the Array. The value MUST be 0 or a positive integer.",
          "bBox": {
            "x": 72.1,
            "y": 131.65,
            "w": 464.03,
            "h": 301.1
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "2.4.3 Record Definitions",
          "md": "# 2.4.3 Record Definitions",
          "bBox": {
            "x": 72.1,
            "y": 131.65,
            "w": 413.55,
            "h": 278.3
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "2.4.3.1 BinaryArray",
          "md": "# 2.4.3.1 BinaryArray",
          "bBox": {
            "x": 72.1,
            "y": 131.65,
            "w": 427.05,
            "h": 278.3
          }
        },
        {
          "type": "text",
          "value": "BinaryArray is the most general form of Array records. The record is more verbose than the other Array records.",
          "md": "BinaryArray is the most general form of Array records. The record is more verbose than the other Array records.",
          "bBox": {
            "x": 72.1,
            "y": 353.55,
            "w": 443.56,
            "h": 21.3
          }
        },
        {
          "type": "table",
          "rows": [
            [
              "",
              "0",
              "1",
              "2",
              "3",
              "4",
              "5",
              "6",
              "7",
              "8",
              "9",
              "0",
              "1",
              "2",
              "3",
              "4",
              "5",
              "6",
              "7",
              "8",
              "9",
              "0",
              "1",
              "2",
              "3",
              "4",
              "5",
              "6",
              "7",
              "8",
              "9",
              "0",
              "1",
              "",
              ""
            ],
            [
              "",
              "RecordTypeEnum",
              "",
              "ObjectId",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              ""
            ],
            [
              "",
              "...",
              "BinaryArrayTypeEnum",
              "Rank",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              ""
            ],
            [
              "",
              "...",
              "",
              "Lengths (variable)",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              ""
            ],
            [
              "",
              "...",
              "LowerBounds (variable)",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              ""
            ],
            [
              "",
              "TypeEnum",
              "",
              "AdditionalTypeInfo (variable)",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              ""
            ],
            [
              "",
              "",
              "",
              "...",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              ""
            ]
          ],
          "md": "|   | 0              | 1                      | 2                             | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 0 | 1 |   |   |\n| - | -------------- | ---------------------- | ----------------------------- | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - |\n|   | RecordTypeEnum |                        | ObjectId                      |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |\n|   | ...            | BinaryArrayTypeEnum    | Rank                          |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |\n|   | ...            |                        | Lengths (variable)            |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |\n|   | ...            | LowerBounds (variable) |                               |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |\n|   | TypeEnum       |                        | AdditionalTypeInfo (variable) |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |\n|   |                |                        | ...                           |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |",
          "isPerfectTable": true,
          "csv": "\"\",\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"0\",\"1\",\"\",\"\"\n\"\",\"RecordTypeEnum\",\"\",\"ObjectId\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\"\n\"\",\"...\",\"BinaryArrayTypeEnum\",\"Rank\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\"\n\"\",\"...\",\"\",\"Lengths (variable)\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\"\n\"\",\"...\",\"LowerBounds (variable)\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\"\n\"\",\"TypeEnum\",\"\",\"AdditionalTypeInfo (variable)\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\"\n\"\",\"\",\"\",\"...\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\"",
          "bBox": {
            "x": 72.1,
            "y": 55.3,
            "w": 467.9,
            "h": 698.85
          }
        },
        {
          "type": "text",
          "value": "RecordTypeEnum (1 byte): A RecordTypeEnumeration value that identifies the record type. Its value MUST be 7.",
          "md": "RecordTypeEnum (1 byte): A RecordTypeEnumeration value that identifies the record type. Its value MUST be 7.",
          "bBox": {
            "x": 72.1,
            "y": 131.65,
            "w": 441.01,
            "h": 509.8
          }
        }
      ],
      "status": "OK",
      "originalOrientationAngle": 0,
      "links": [
      ],
      "width": 612,
      "height": 792,
      "triggeredAutoMode": false,
      "parsingMode": "accurate",
      "structuredData": null,
      "noStructuredContent": false,
      "noTextContent": false,
      "pageHeaderMarkdown": "",
      "pageFooterMarkdown": "",
      "confidence": 0.884
    },
    {
      "page": 35,
      "text": "ObjectId (4 bytes): An INT32 value (as specified in [MS-DTYP] section 2.2.22) that uniquely identifies\n the Array in the serialization stream. The value MUST be a positive integer. An implementation\n MAY use any algorithm to generate the unique IDs.<8>\n\nBinaryArrayTypeEnum (1 byte): A BinaryArrayTypeEnumeration value that identifies the type of\n the Array.\n\nRank (4 bytes): An INT32 value (as specified in [MS-DTYP] section 2.2.22) that specifies the rank\n (number of dimensions) of the Array. The value MUST be 0 or a positive integer.\n\nLengths (variable): A sequence of INT32 values (as specified in [MS-DTYP] section 2.2.22) that\n specifies the length of each of the dimensions of the Array. The number of values MUST be equal\n to the value specified in the Rank field. Each value of the sequence MUST be 0 or a positive\n integer.\n\nLowerBounds (variable): A sequence of INT32 values (as specified in [MS-DTYP] section 2.2.22) that\n specifies the lower bound (first index) of each of the dimensions of the Array. The number of\n values MUST be equal to the value specified in the Rank field. If the value of the\n BinaryArrayTypeEnum field is SingleOffset, JaggedOffset, or RectangularOffset, this field MUST\n be present in the serialization stream; otherwise, this field MUST NOT be present in the\n serialization stream.\n\nTypeEnum (1 byte): A BinaryTypeEnum value that identifies the Remoting Type of the Array item.\n\nAdditionalTypeInfo (variable): Information about the Remoting Type of the Array item in addition to\n the information provided in the TypeEnum field. For the BinaryTypeEnum values of Primitive,\n SystemClass, Class, or PrimitiveArray, this field contains additional information about the Remoting\n Type. For the BinaryTypeEnum value of Primitive and PrimitiveArray, this field specifies the actual\n Primitive Type that uses the PrimitiveTypeEnum. For the BinaryTypeEnum value of SystemClass,\n this field specifies the name of the Class. For the BinaryTypeEnum value of Class, this field\n specifies the name of the Class and the Library ID. The following table enumerates additional\n information that is required for each BinaryType enumeration.\n\n  BinaryTypeEnum       AdditionalTypeInfo\n\n  Primitive            PrimitiveTypeEnum\n\n  Object               None\n\n  String               None\n\n  SystemClass          String (Class name as specified in [MS-NRTP] section 2.2.1.2)\n\n  Class                ClassTypeInfo\n\n  ObjectArray          None\n\n  StringArray          None\n\n  PrimitiveArray       PrimitiveTypeEnum\n\n If the BinaryTypeEnum value of the TypeEnum field is Object, String, ObjectArray, or StringArray,\n this field MUST NOT be present in the serialization stream.\n\n                                                                                              35 / 55\n[MS-NRBF] - v20190313\n.NET Remoting: Binary Format Data Structure\nCopyright © 2019 Microsoft Corporation\nRelease: March 13, 2019",
      "md": "\n# ObjectId (4 bytes)\n\nAn INT32 value (as specified in [MS-DTYP] section 2.2.22) that uniquely identifies the Array in the serialization stream. The value MUST be a positive integer. An implementation MAY use any algorithm to generate the unique IDs.&#x3C;8>\n\n# BinaryArrayTypeEnum (1 byte)\n\nA BinaryArrayTypeEnumeration value that identifies the type of the Array.\n\n# Rank (4 bytes)\n\nAn INT32 value (as specified in [MS-DTYP] section 2.2.22) that specifies the rank (number of dimensions) of the Array. The value MUST be 0 or a positive integer.\n\n# Lengths (variable)\n\nA sequence of INT32 values (as specified in [MS-DTYP] section 2.2.22) that specifies the length of each of the dimensions of the Array. The number of values MUST be equal to the value specified in the Rank field. Each value of the sequence MUST be 0 or a positive integer.\n\n# LowerBounds (variable)\n\nA sequence of INT32 values (as specified in [MS-DTYP] section 2.2.22) that specifies the lower bound (first index) of each of the dimensions of the Array. The number of values MUST be equal to the value specified in the Rank field. If the value of the BinaryArrayTypeEnum field is SingleOffset, JaggedOffset, or RectangularOffset, this field MUST be present in the serialization stream; otherwise, this field MUST NOT be present in the serialization stream.\n\n# TypeEnum (1 byte)\n\nA BinaryTypeEnum value that identifies the Remoting Type of the Array item.\n\n# AdditionalTypeInfo (variable)\n\nInformation about the Remoting Type of the Array item in addition to the information provided in the TypeEnum field. For the BinaryTypeEnum values of Primitive, SystemClass, Class, or PrimitiveArray, this field contains additional information about the Remoting Type. For the BinaryTypeEnum value of Primitive and PrimitiveArray, this field specifies the actual Primitive Type that uses the PrimitiveTypeEnum. For the BinaryTypeEnum value of SystemClass, this field specifies the name of the Class. For the BinaryTypeEnum value of Class, this field specifies the name of the Class and the Library ID.\n\n| BinaryTypeEnum | AdditionalTypeInfo                                             |\n| -------------- | -------------------------------------------------------------- |\n| Primitive      | PrimitiveTypeEnum                                              |\n| Object         | None                                                           |\n| String         | None                                                           |\n| SystemClass    | String (Class name as specified in \\[MS-NRTP] section 2.2.1.2) |\n| Class          | ClassTypeInfo                                                  |\n| ObjectArray    | None                                                           |\n| StringArray    | None                                                           |\n| PrimitiveArray | PrimitiveTypeEnum                                              |\n\nIf the BinaryTypeEnum value of the TypeEnum field is Object, String, ObjectArray, or StringArray, this field MUST NOT be present in the serialization stream.\n\n",
      "images": [
      ],
      "charts": [
      ],
      "items": [
        {
          "type": "heading",
          "lvl": 1,
          "value": "ObjectId (4 bytes)",
          "md": "# ObjectId (4 bytes)",
          "bBox": {
            "x": 95.85,
            "y": 494.3,
            "w": 26,
            "h": 8
          }
        },
        {
          "type": "text",
          "value": "An INT32 value (as specified in [MS-DTYP] section 2.2.22) that uniquely identifies the Array in the serialization stream. The value MUST be a positive integer. An implementation MAY use any algorithm to generate the unique IDs.&#x3C;8>",
          "md": "An INT32 value (as specified in [MS-DTYP] section 2.2.22) that uniquely identifies the Array in the serialization stream. The value MUST be a positive integer. An implementation MAY use any algorithm to generate the unique IDs.&#x3C;8>",
          "bBox": {
            "x": 90.1,
            "y": 67.45,
            "w": 440.2,
            "h": 229.5
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "BinaryArrayTypeEnum (1 byte)",
          "md": "# BinaryArrayTypeEnum (1 byte)",
          "bBox": {
            "x": 0,
            "y": 0,
            "w": 612,
            "h": 792
          }
        },
        {
          "type": "text",
          "value": "A BinaryArrayTypeEnumeration value that identifies the type of the Array.",
          "md": "A BinaryArrayTypeEnumeration value that identifies the type of the Array.",
          "bBox": {
            "x": 90.1,
            "y": 113.35,
            "w": 44.6,
            "h": 9
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "Rank (4 bytes)",
          "md": "# Rank (4 bytes)",
          "bBox": {
            "x": 0,
            "y": 0,
            "w": 612,
            "h": 792
          }
        },
        {
          "type": "text",
          "value": "An INT32 value (as specified in [MS-DTYP] section 2.2.22) that specifies the rank (number of dimensions) of the Array. The value MUST be 0 or a positive integer.",
          "md": "An INT32 value (as specified in [MS-DTYP] section 2.2.22) that specifies the rank (number of dimensions) of the Array. The value MUST be 0 or a positive integer.",
          "bBox": {
            "x": 90.1,
            "y": 113.35,
            "w": 361.54,
            "h": 100.8
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "Lengths (variable)",
          "md": "# Lengths (variable)",
          "bBox": {
            "x": 0,
            "y": 0,
            "w": 612,
            "h": 792
          }
        },
        {
          "type": "text",
          "value": "A sequence of INT32 values (as specified in [MS-DTYP] section 2.2.22) that specifies the length of each of the dimensions of the Array. The number of values MUST be equal to the value specified in the Rank field. Each value of the sequence MUST be 0 or a positive integer.",
          "md": "A sequence of INT32 values (as specified in [MS-DTYP] section 2.2.22) that specifies the length of each of the dimensions of the Array. The number of values MUST be equal to the value specified in the Rank field. Each value of the sequence MUST be 0 or a positive integer.",
          "bBox": {
            "x": 90.1,
            "y": 113.35,
            "w": 438.49,
            "h": 100.8
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "LowerBounds (variable)",
          "md": "# LowerBounds (variable)",
          "bBox": {
            "x": 0,
            "y": 0,
            "w": 612,
            "h": 792
          }
        },
        {
          "type": "text",
          "value": "A sequence of INT32 values (as specified in [MS-DTYP] section 2.2.22) that specifies the lower bound (first index) of each of the dimensions of the Array. The number of values MUST be equal to the value specified in the Rank field. If the value of the BinaryArrayTypeEnum field is SingleOffset, JaggedOffset, or RectangularOffset, this field MUST be present in the serialization stream; otherwise, this field MUST NOT be present in the serialization stream.",
          "md": "A sequence of INT32 values (as specified in [MS-DTYP] section 2.2.22) that specifies the lower bound (first index) of each of the dimensions of the Array. The number of values MUST be equal to the value specified in the Rank field. If the value of the BinaryArrayTypeEnum field is SingleOffset, JaggedOffset, or RectangularOffset, this field MUST be present in the serialization stream; otherwise, this field MUST NOT be present in the serialization stream.",
          "bBox": {
            "x": 90.1,
            "y": 113.35,
            "w": 439.75,
            "h": 549
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "TypeEnum (1 byte)",
          "md": "# TypeEnum (1 byte)",
          "bBox": {
            "x": 0,
            "y": 0,
            "w": 612,
            "h": 792
          }
        },
        {
          "type": "text",
          "value": "A BinaryTypeEnum value that identifies the Remoting Type of the Array item.",
          "md": "A BinaryTypeEnum value that identifies the Remoting Type of the Array item.",
          "bBox": {
            "x": 95.85,
            "y": 453.7,
            "w": 76,
            "h": 8
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "AdditionalTypeInfo (variable)",
          "md": "# AdditionalTypeInfo (variable)",
          "bBox": {
            "x": 188.75,
            "y": 453.7,
            "w": 86,
            "h": 8
          }
        },
        {
          "type": "text",
          "value": "Information about the Remoting Type of the Array item in addition to the information provided in the TypeEnum field. For the BinaryTypeEnum values of Primitive, SystemClass, Class, or PrimitiveArray, this field contains additional information about the Remoting Type. For the BinaryTypeEnum value of Primitive and PrimitiveArray, this field specifies the actual Primitive Type that uses the PrimitiveTypeEnum. For the BinaryTypeEnum value of SystemClass, this field specifies the name of the Class. For the BinaryTypeEnum value of Class, this field specifies the name of the Class and the Library ID.",
          "md": "Information about the Remoting Type of the Array item in addition to the information provided in the TypeEnum field. For the BinaryTypeEnum values of Primitive, SystemClass, Class, or PrimitiveArray, this field contains additional information about the Remoting Type. For the BinaryTypeEnum value of Primitive and PrimitiveArray, this field specifies the actual Primitive Type that uses the PrimitiveTypeEnum. For the BinaryTypeEnum value of SystemClass, this field specifies the name of the Class. For the BinaryTypeEnum value of Class, this field specifies the name of the Class and the Library ID.",
          "bBox": {
            "x": 90.1,
            "y": 342.85,
            "w": 448.44,
            "h": 281.25
          }
        },
        {
          "type": "table",
          "rows": [
            [
              "BinaryTypeEnum",
              "AdditionalTypeInfo"
            ],
            [
              "Primitive",
              "PrimitiveTypeEnum"
            ],
            [
              "Object",
              "None"
            ],
            [
              "String",
              "None"
            ],
            [
              "SystemClass",
              "String (Class name as specified in [MS-NRTP] section 2.2.1.2)"
            ],
            [
              "Class",
              "ClassTypeInfo"
            ],
            [
              "ObjectArray",
              "None"
            ],
            [
              "StringArray",
              "None"
            ],
            [
              "PrimitiveArray",
              "PrimitiveTypeEnum"
            ]
          ],
          "md": "| BinaryTypeEnum | AdditionalTypeInfo                                             |\n| -------------- | -------------------------------------------------------------- |\n| Primitive      | PrimitiveTypeEnum                                              |\n| Object         | None                                                           |\n| String         | None                                                           |\n| SystemClass    | String (Class name as specified in \\[MS-NRTP] section 2.2.1.2) |\n| Class          | ClassTypeInfo                                                  |\n| ObjectArray    | None                                                           |\n| StringArray    | None                                                           |\n| PrimitiveArray | PrimitiveTypeEnum                                              |",
          "isPerfectTable": true,
          "csv": "\"BinaryTypeEnum\",\"AdditionalTypeInfo\"\n\"Primitive\",\"PrimitiveTypeEnum\"\n\"Object\",\"None\"\n\"String\",\"None\"\n\"SystemClass\",\"String (Class name as specified in [MS-NRTP] section 2.2.1.2)\"\n\"Class\",\"ClassTypeInfo\"\n\"ObjectArray\",\"None\"\n\"StringArray\",\"None\"\n\"PrimitiveArray\",\"PrimitiveTypeEnum\"",
          "bBox": {
            "x": 72.1,
            "y": 55.15,
            "w": 467.58,
            "h": 594.9
          }
        },
        {
          "type": "text",
          "value": "If the BinaryTypeEnum value of the TypeEnum field is Object, String, ObjectArray, or StringArray, this field MUST NOT be present in the serialization stream.",
          "md": "If the BinaryTypeEnum value of the TypeEnum field is Object, String, ObjectArray, or StringArray, this field MUST NOT be present in the serialization stream.",
          "bBox": {
            "x": 90.1,
            "y": 287.95,
            "w": 443.58,
            "h": 374.4
          }
        }
      ],
      "status": "OK",
      "originalOrientationAngle": 0,
      "links": [
        {
          "unsafeUrl": "../../../../../../../upload/%5BMS-NRTP%5D.pdf#Section_3acb31b0b8734aaf85039727ec40fbec",
          "text": "[MS-NRTP]"
        }
      ],
      "width": 612,
      "height": 792,
      "triggeredAutoMode": false,
      "parsingMode": "accurate",
      "structuredData": null,
      "noStructuredContent": false,
      "noTextContent": false,
      "pageHeaderMarkdown": "",
      "pageFooterMarkdown": "",
      "confidence": 0.913
    },
    {
      "page": 36,
      "text": "  If the BinaryTypeEnum value is Primitive, the PrimitiveTypeEnumeration value in\n  AdditionalTypeInfo MUST NOT be Null (17) or String (18).\n\n2.4.3.2 ArraySingleObject\n\nThe ArraySingleObject record contains a single-dimensional Array in which each Member record MAY\ncontain any Data Value.\n\n                            1                              2                         3\n0 1 2 3 4 5     6    7 8 9  0    1    2 3  4 5 6 7 8 9     0    1 2 3 4  5  6 7 8 9  0 1\n\n  RecordTypeEnum                                   ArrayInfo\n\n                                               ...\n\n        ...\n\nRecordTypeEnum (1 byte): A RecordTypeEnumeration value that identifies the record type. The\n  value MUST be 16.\n\nArrayInfo (8 bytes): An ArrayInfo structure that specifies the ID and the length of the Array instance.\n\n2.4.3.3 ArraySinglePrimitive\n\nThe ArraySinglePrimitive record contains a single-dimensional Array in which all Members are\nPrimitive Value.\n\n                            1                              2                         3\n0 1 2 3    4 5  6    7 8 9  0    1    2 3  4 5    6 7 8 9  0    1 2 3 4  5  6 7 8 9  0 1\n\n  RecordTypeEnum                                      ArrayInfo\n\n                                               ...\n\n        ...              PrimitiveTypeEnum\n\nRecordTypeEnum (1 byte): A RecordTypeEnumeration value that identifies the record type. The\n  value MUST be 15.\n\nArrayInfo (8 bytes): An ArrayInfo structure that specifies the ID and the length of the Array instance.\n\nPrimitiveTypeEnum (1 byte): A PrimitiveTypeEnumeration value that identifies the Primitive Type\n  of the items of the Array. The value MUST NOT be 17 (Null) or 18 (String).\n\nThis record MUST be followed by a sequence of MemberPrimitiveUnTyped records that contain values\nwhose Primitive Type is specified by the PrimitiveTypeEnum field. The number of records in the\nsequence MUST match the value specified in the Length field of ArrayInfo.\n\n2.4.3.4 ArraySingleString\n\nThe ArraySingleString record contains a single-dimensional Array whose items are String values.\n\n                                                                                               36 / 55\n[MS-NRBF] - v20190313\n.NET Remoting: Binary Format Data Structure\nCopyright © 2019 Microsoft Corporation\nRelease: March 13, 2019",
      "md": "\n# Binary Format Data Structure\n\n# 2.4.3.2 ArraySingleObject\n\nIf the BinaryTypeEnum value is Primitive, the PrimitiveTypeEnumeration value in AdditionalTypeInfo MUST NOT be Null (17) or String (18).\n\n# 2.4.3.2 ArraySingleObject\n\nThe ArraySingleObject record contains a single-dimensional Array in which each Member record MAY contain any Data Value.\n\n| 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 0 | 1 |\n| - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - |\n\nRecordTypeEnum (1 byte): A RecordTypeEnumeration value that identifies the record type. The value MUST be 16.\n\nArrayInfo (8 bytes): An ArrayInfo structure that specifies the ID and the length of the Array instance.\n\n# 2.4.3.3 ArraySinglePrimitive\n\nThe ArraySinglePrimitive record contains a single-dimensional Array in which all Members are Primitive Value.\n\n| 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 0 | 1 |\n| - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - |\n\nRecordTypeEnum (1 byte): A RecordTypeEnumeration value that identifies the record type. The value MUST be 15.\n\nArrayInfo (8 bytes): An ArrayInfo structure that specifies the ID and the length of the Array instance.\n\nPrimitiveTypeEnum (1 byte): A PrimitiveTypeEnumeration value that identifies the Primitive Type of the items of the Array. The value MUST NOT be 17 (Null) or 18 (String).\n\nThis record MUST be followed by a sequence of MemberPrimitiveUnTyped records that contain values whose Primitive Type is specified by the PrimitiveTypeEnum field. The number of records in the sequence MUST match the value specified in the Length field of ArrayInfo.\n\n# 2.4.3.4 ArraySingleString\n\nThe ArraySingleString record contains a single-dimensional Array whose items are String values.\n\n36 / 55\n\n[MS-NRBF] - v20190313\n\nCopyright © 2019 Microsoft Corporation\n\nRelease: March 13, 2019\n\n",
      "images": [
      ],
      "charts": [
      ],
      "items": [
        {
          "type": "heading",
          "lvl": 1,
          "value": "Binary Format Data Structure",
          "md": "# Binary Format Data Structure",
          "bBox": {
            "x": 0,
            "y": 0,
            "w": 612,
            "h": 792
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "2.4.3.2 ArraySingleObject",
          "md": "# 2.4.3.2 ArraySingleObject",
          "bBox": {
            "x": 72.1,
            "y": 95.9,
            "w": 413.55,
            "h": 307.55
          }
        },
        {
          "type": "text",
          "value": "If the BinaryTypeEnum value is Primitive, the PrimitiveTypeEnumeration value in AdditionalTypeInfo MUST NOT be Null (17) or String (18).",
          "md": "If the BinaryTypeEnum value is Primitive, the PrimitiveTypeEnumeration value in AdditionalTypeInfo MUST NOT be Null (17) or String (18).",
          "bBox": {
            "x": 89.15,
            "y": 55.15,
            "w": 410,
            "h": 420.1
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "2.4.3.2 ArraySingleObject",
          "md": "# 2.4.3.2 ArraySingleObject",
          "bBox": {
            "x": 72.1,
            "y": 95.9,
            "w": 413.55,
            "h": 307.55
          }
        },
        {
          "type": "text",
          "value": "The ArraySingleObject record contains a single-dimensional Array in which each Member record MAY contain any Data Value.",
          "md": "The ArraySingleObject record contains a single-dimensional Array in which each Member record MAY contain any Data Value.",
          "bBox": {
            "x": 72.1,
            "y": 118.4,
            "w": 462.99,
            "h": 21.3
          }
        },
        {
          "type": "table",
          "rows": [
            [
              "0",
              "1",
              "2",
              "3",
              "4",
              "5",
              "6",
              "7",
              "8",
              "9",
              "0",
              "1",
              "2",
              "3",
              "4",
              "5",
              "6",
              "7",
              "8",
              "9",
              "0",
              "1",
              "2",
              "3",
              "4",
              "5",
              "6",
              "7",
              "8",
              "9",
              "0",
              "1"
            ]
          ],
          "md": "| 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 0 | 1 |\n| - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - |",
          "isPerfectTable": true,
          "csv": "\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"0\",\"1\"",
          "bBox": {
            "x": 72.1,
            "y": 67.45,
            "w": 467.9,
            "h": 686.7
          }
        },
        {
          "type": "text",
          "value": "RecordTypeEnum (1 byte): A RecordTypeEnumeration value that identifies the record type. The value MUST be 16.\n\nArrayInfo (8 bytes): An ArrayInfo structure that specifies the ID and the length of the Array instance.",
          "md": "RecordTypeEnum (1 byte): A RecordTypeEnumeration value that identifies the record type. The value MUST be 16.\n\nArrayInfo (8 bytes): An ArrayInfo structure that specifies the ID and the length of the Array instance.",
          "bBox": {
            "x": 72.1,
            "y": 154.9,
            "w": 465.53,
            "h": 378.85
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "2.4.3.3 ArraySinglePrimitive",
          "md": "# 2.4.3.3 ArraySinglePrimitive",
          "bBox": {
            "x": 72.1,
            "y": 154.9,
            "w": 413.55,
            "h": 248.55
          }
        },
        {
          "type": "text",
          "value": "The ArraySinglePrimitive record contains a single-dimensional Array in which all Members are Primitive Value.",
          "md": "The ArraySinglePrimitive record contains a single-dimensional Array in which all Members are Primitive Value.",
          "bBox": {
            "x": 72.1,
            "y": 347.05,
            "w": 431.7,
            "h": 21.3
          }
        },
        {
          "type": "table",
          "rows": [
            [
              "0",
              "1",
              "2",
              "3",
              "4",
              "5",
              "6",
              "7",
              "8",
              "9",
              "0",
              "1",
              "2",
              "3",
              "4",
              "5",
              "6",
              "7",
              "8",
              "9",
              "0",
              "1",
              "2",
              "3",
              "4",
              "5",
              "6",
              "7",
              "8",
              "9",
              "0",
              "1"
            ]
          ],
          "md": "| 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 0 | 1 |\n| - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - |",
          "isPerfectTable": true,
          "csv": "\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"0\",\"1\"",
          "bBox": {
            "x": 72.1,
            "y": 67.45,
            "w": 467.9,
            "h": 686.7
          }
        },
        {
          "type": "text",
          "value": "RecordTypeEnum (1 byte): A RecordTypeEnumeration value that identifies the record type. The value MUST be 15.\n\nArrayInfo (8 bytes): An ArrayInfo structure that specifies the ID and the length of the Array instance.\n\nPrimitiveTypeEnum (1 byte): A PrimitiveTypeEnumeration value that identifies the Primitive Type of the items of the Array. The value MUST NOT be 17 (Null) or 18 (String).\n\nThis record MUST be followed by a sequence of MemberPrimitiveUnTyped records that contain values whose Primitive Type is specified by the PrimitiveTypeEnum field. The number of records in the sequence MUST match the value specified in the Length field of ArrayInfo.",
          "md": "RecordTypeEnum (1 byte): A RecordTypeEnumeration value that identifies the record type. The value MUST be 15.\n\nArrayInfo (8 bytes): An ArrayInfo structure that specifies the ID and the length of the Array instance.\n\nPrimitiveTypeEnum (1 byte): A PrimitiveTypeEnumeration value that identifies the Primitive Type of the items of the Array. The value MUST NOT be 17 (Null) or 18 (String).\n\nThis record MUST be followed by a sequence of MemberPrimitiveUnTyped records that contain values whose Primitive Type is specified by the PrimitiveTypeEnum field. The number of records in the sequence MUST match the value specified in the Length field of ArrayInfo.",
          "bBox": {
            "x": 72.1,
            "y": 154.9,
            "w": 465.53,
            "h": 458.35
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "2.4.3.4 ArraySingleString",
          "md": "# 2.4.3.4 ArraySingleString",
          "bBox": {
            "x": 72.1,
            "y": 154.9,
            "w": 413.55,
            "h": 487.8
          }
        },
        {
          "type": "text",
          "value": "The ArraySingleString record contains a single-dimensional Array whose items are String values.\n\n36 / 55\n\n[MS-NRBF] - v20190313\n\nCopyright © 2019 Microsoft Corporation\n\nRelease: March 13, 2019",
          "md": "The ArraySingleString record contains a single-dimensional Array whose items are String values.\n\n36 / 55\n\n[MS-NRBF] - v20190313\n\nCopyright © 2019 Microsoft Corporation\n\nRelease: March 13, 2019",
          "bBox": {
            "x": 72.1,
            "y": 154.9,
            "w": 467.9,
            "h": 599.25
          }
        }
      ],
      "status": "OK",
      "originalOrientationAngle": 0,
      "links": [
      ],
      "width": 612,
      "height": 792,
      "triggeredAutoMode": false,
      "parsingMode": "accurate",
      "structuredData": null,
      "noStructuredContent": false,
      "noTextContent": false,
      "pageHeaderMarkdown": "\n# Binary Format Data Structure\n\n# 2.4.3.2 ArraySingleObject\n\n",
      "pageFooterMarkdown": "\n36 / 55\n\n[MS-NRBF] - v20190313\n\nCopyright © 2019 Microsoft Corporation\n\nRelease: March 13, 2019\n\n",
      "confidence": 0.954
    },
    {
      "page": 37,
      "text": "                              1                               2                       3\n0 1   2 3 4 5 6      7 8 9    0    1  2 3  4    5 6 7 8 9     0    1 2 3 4 5 6 7 8 9  0 1\n\n     RecordTypeEnum                                   ArrayInfo\n\n                                                  ...\n\n          ...\n\nRecordTypeEnum (1 byte): A RecordTypeEnumeration value that identifies the record type. The\n     value MUST be 17.\n\nArrayInfo (8 bytes): An ArrayInfo structure that specifies the ID and the length of the Array instance.\n\n2.5   Member Reference Records\n\nArrays and classes are containers of Member values; that is, graph nodes that represent instances of\nArrays and Classes that have outbound edges. The Member values are the graph nodes that are\ndestinations for the outbound edges. In the serialization stream, the Member values follow the Array\nand the Class records. The Member values are serialized by using the Member Reference records.\n\n2.5.1   MemberPrimitiveTyped\n\nThe MemberPrimitiveTyped record contains a Primitive Type value other than String. The mechanism\nto serialize a Primitive Value is described in [MS-NRTP] section 3.1.5.1.8.\n\n                              1                               2                       3\n0 1   2 3    4 5 6     7 8 9  0    1  2 3  4    5    6 7 8 9  0    1 2 3 4 5 6 7 8 9  0 1\n\n     RecordTypeEnum        PrimitiveTypeEnum                       Value (variable)\n\n                                                  ...\n\nRecordTypeEnum (1 byte): A RecordTypeEnumeration value that identifies the record type. The\n     value MUST be 8.\n\nPrimitiveTypeEnum (1 byte): A PrimitiveTypeEnumeration value that specifies the Primitive Type of\n     data that is being transmitted. This field MUST NOT contain a value of 17 (Null) or 18 (String).\n\nValue (variable): The value whose type is inferred from the PrimitiveTypeEnum field as specified in\n     the table in section 2.1.2.3.\n\n2.5.2   MemberPrimitiveUnTyped\n\nThe MemberPrimitiveUnTyped record is the most compact record to represent a Primitive Type\nvalue. This type of record does not have a RecordTypeEnum to indicate the record type. The record\nMUST be used when a Class Member or Array item is a Primitive Type. Because the containing Class\nor Array record specifies the Primitive Type of each Member, the Primitive Type is not respecified along\nwith the value. Also, the Primitive Values cannot be referenced by any other record; therefore it\ndoes not require an ObjectId. This record has no field besides the value. The mechanism to serialize a\nPrimitive Value is described in [MS-NRTP] section 3.1.5.1.8.\n\n                                                                                           37 / 55\n[MS-NRBF] - v20190313\n.NET Remoting: Binary Format Data Structure\nCopyright © 2019 Microsoft Corporation\nRelease: March 13, 2019",
      "md": "\n# 1\n\n| 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 0 | 1 |\n| - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - |\n\nRecordTypeEnum (1 byte): A RecordTypeEnumeration value that identifies the record type. The value MUST be 17.\n\nArrayInfo (8 bytes): An ArrayInfo structure that specifies the ID and the length of the Array instance.\n\n# 2.5 Member Reference Records\n\nArrays and classes are containers of Member values; that is, graph nodes that represent instances of Arrays and Classes that have outbound edges. The Member values are the graph nodes that are destinations for the outbound edges. In the serialization stream, the Member values follow the Array and the Class records. The Member values are serialized by using the Member Reference records.\n\n# 2.5.1 MemberPrimitiveTyped\n\nThe MemberPrimitiveTyped record contains a Primitive Type value other than String. The mechanism to serialize a Primitive Value is described in [MS-NRTP] section 3.1.5.1.8.\n\n| 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 0 | 1 |\n| - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - |\n\nRecordTypeEnum (1 byte): A RecordTypeEnumeration value that identifies the record type. The value MUST be 8.\n\nPrimitiveTypeEnum (1 byte): A PrimitiveTypeEnumeration value that specifies the Primitive Type of data that is being transmitted. This field MUST NOT contain a value of 17 (Null) or 18 (String).\n\nValue (variable): The value whose type is inferred from the PrimitiveTypeEnum field as specified in the table in section 2.1.2.3.\n\n# 2.5.2 MemberPrimitiveUnTyped\n\nThe MemberPrimitiveUnTyped record is the most compact record to represent a Primitive Type value. This type of record does not have a RecordTypeEnum to indicate the record type. The record MUST be used when a Class Member or Array item is a Primitive Type. Because the containing Class or Array record specifies the Primitive Type of each Member, the Primitive Type is not respecified along with the value. Also, the Primitive Values cannot be referenced by any other record; therefore it does not require an ObjectId. This record has no field besides the value. The mechanism to serialize a Primitive Value is described in [MS-NRTP] section 3.1.5.1.8.\n\n37 / 55\n\n[MS-NRBF] - v20190313\n\n.NET Remoting: Binary Format Data Structure\n\nCopyright © 2019 Microsoft Corporation\n\nRelease: March 13, 2019\n\n",
      "images": [
      ],
      "charts": [
      ],
      "items": [
        {
          "type": "heading",
          "lvl": 1,
          "value": "1",
          "md": "# 1",
          "bBox": {
            "x": 89.15,
            "y": 58.05,
            "w": 410,
            "h": 336.4
          }
        },
        {
          "type": "table",
          "rows": [
            [
              "0",
              "1",
              "2",
              "3",
              "4",
              "5",
              "6",
              "7",
              "8",
              "9",
              "0",
              "1",
              "2",
              "3",
              "4",
              "5",
              "6",
              "7",
              "8",
              "9",
              "0",
              "1"
            ]
          ],
          "md": "| 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 0 | 1 |\n| - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - |",
          "isPerfectTable": true,
          "csv": "\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"0\",\"1\"",
          "bBox": {
            "x": 72.1,
            "y": 58.05,
            "w": 467.9,
            "h": 696.1
          }
        },
        {
          "type": "text",
          "value": "RecordTypeEnum (1 byte): A RecordTypeEnumeration value that identifies the record type. The value MUST be 17.\n\nArrayInfo (8 bytes): An ArrayInfo structure that specifies the ID and the length of the Array instance.",
          "md": "RecordTypeEnum (1 byte): A RecordTypeEnumeration value that identifies the record type. The value MUST be 17.\n\nArrayInfo (8 bytes): An ArrayInfo structure that specifies the ID and the length of the Array instance.",
          "bBox": {
            "x": 72.1,
            "y": 58.05,
            "w": 465.53,
            "h": 408.6
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "2.5 Member Reference Records",
          "md": "# 2.5 Member Reference Records",
          "bBox": {
            "x": 72.1,
            "y": 58.05,
            "w": 346.05,
            "h": 336.4
          }
        },
        {
          "type": "text",
          "value": "Arrays and classes are containers of Member values; that is, graph nodes that represent instances of Arrays and Classes that have outbound edges. The Member values are the graph nodes that are destinations for the outbound edges. In the serialization stream, the Member values follow the Array and the Class records. The Member values are serialized by using the Member Reference records.",
          "md": "Arrays and classes are containers of Member values; that is, graph nodes that represent instances of Arrays and Classes that have outbound edges. The Member values are the graph nodes that are destinations for the outbound edges. In the serialization stream, the Member values follow the Array and the Class records. The Member values are serialized by using the Member Reference records.",
          "bBox": {
            "x": 72.1,
            "y": 227.7,
            "w": 466.08,
            "h": 68.4
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "2.5.1 MemberPrimitiveTyped",
          "md": "# 2.5.1 MemberPrimitiveTyped",
          "bBox": {
            "x": 72.1,
            "y": 58.05,
            "w": 427.05,
            "h": 336.4
          }
        },
        {
          "type": "text",
          "value": "The MemberPrimitiveTyped record contains a Primitive Type value other than String. The mechanism to serialize a Primitive Value is described in [MS-NRTP] section 3.1.5.1.8.",
          "md": "The MemberPrimitiveTyped record contains a Primitive Type value other than String. The mechanism to serialize a Primitive Value is described in [MS-NRTP] section 3.1.5.1.8.",
          "bBox": {
            "x": 72.1,
            "y": 58.05,
            "w": 466.46,
            "h": 612.85
          }
        },
        {
          "type": "table",
          "rows": [
            [
              "0",
              "1",
              "2",
              "3",
              "4",
              "5",
              "6",
              "7",
              "8",
              "9",
              "0",
              "1",
              "2",
              "3",
              "4",
              "5",
              "6",
              "7",
              "8",
              "9",
              "0",
              "1"
            ]
          ],
          "md": "| 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 0 | 1 |\n| - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - |",
          "isPerfectTable": true,
          "csv": "\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"0\",\"1\"",
          "bBox": {
            "x": 72.1,
            "y": 58.05,
            "w": 467.9,
            "h": 696.1
          }
        },
        {
          "type": "text",
          "value": "RecordTypeEnum (1 byte): A RecordTypeEnumeration value that identifies the record type. The value MUST be 8.\n\nPrimitiveTypeEnum (1 byte): A PrimitiveTypeEnumeration value that specifies the Primitive Type of data that is being transmitted. This field MUST NOT contain a value of 17 (Null) or 18 (String).\n\nValue (variable): The value whose type is inferred from the PrimitiveTypeEnum field as specified in the table in section 2.1.2.3.",
          "md": "RecordTypeEnum (1 byte): A RecordTypeEnumeration value that identifies the record type. The value MUST be 8.\n\nPrimitiveTypeEnum (1 byte): A PrimitiveTypeEnumeration value that specifies the Primitive Type of data that is being transmitted. This field MUST NOT contain a value of 17 (Null) or 18 (String).\n\nValue (variable): The value whose type is inferred from the PrimitiveTypeEnum field as specified in the table in section 2.1.2.3.",
          "bBox": {
            "x": 72.1,
            "y": 58.05,
            "w": 467.69,
            "h": 488.1
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "2.5.2 MemberPrimitiveUnTyped",
          "md": "# 2.5.2 MemberPrimitiveUnTyped",
          "bBox": {
            "x": 72.1,
            "y": 58.05,
            "w": 346.05,
            "h": 517.55
          }
        },
        {
          "type": "text",
          "value": "The MemberPrimitiveUnTyped record is the most compact record to represent a Primitive Type value. This type of record does not have a RecordTypeEnum to indicate the record type. The record MUST be used when a Class Member or Array item is a Primitive Type. Because the containing Class or Array record specifies the Primitive Type of each Member, the Primitive Type is not respecified along with the value. Also, the Primitive Values cannot be referenced by any other record; therefore it does not require an ObjectId. This record has no field besides the value. The mechanism to serialize a Primitive Value is described in [MS-NRTP] section 3.1.5.1.8.\n\n37 / 55\n\n[MS-NRBF] - v20190313\n\n.NET Remoting: Binary Format Data Structure\n\nCopyright © 2019 Microsoft Corporation\n\nRelease: March 13, 2019",
          "md": "The MemberPrimitiveUnTyped record is the most compact record to represent a Primitive Type value. This type of record does not have a RecordTypeEnum to indicate the record type. The record MUST be used when a Class Member or Array item is a Primitive Type. Because the containing Class or Array record specifies the Primitive Type of each Member, the Primitive Type is not respecified along with the value. Also, the Primitive Values cannot be referenced by any other record; therefore it does not require an ObjectId. This record has no field besides the value. The mechanism to serialize a Primitive Value is described in [MS-NRTP] section 3.1.5.1.8.\n\n37 / 55\n\n[MS-NRBF] - v20190313\n\n.NET Remoting: Binary Format Data Structure\n\nCopyright © 2019 Microsoft Corporation\n\nRelease: March 13, 2019",
          "bBox": {
            "x": 72.1,
            "y": 58.05,
            "w": 467.9,
            "h": 696.1
          }
        }
      ],
      "status": "OK",
      "originalOrientationAngle": 0,
      "links": [
        {
          "unsafeUrl": "../../../../../../../upload/%5BMS-NRTP%5D.pdf#Section_3acb31b0b8734aaf85039727ec40fbec",
          "text": "[MS-NRTP]"
        },
        {
          "unsafeUrl": "../../../../../../../upload/%5BMS-NRTP%5D.pdf#Section_3acb31b0b8734aaf85039727ec40fbec",
          "text": "[MS-NRTP]"
        }
      ],
      "width": 612,
      "height": 792,
      "triggeredAutoMode": false,
      "parsingMode": "accurate",
      "structuredData": null,
      "noStructuredContent": false,
      "noTextContent": false,
      "pageHeaderMarkdown": "",
      "pageFooterMarkdown": "",
      "confidence": 0.94
    },
    {
      "page": 38,
      "text": "                            1                              2                       3\n0 1    2 3 4 5 6    7 8 9   0    1 2 3 4 5    6 7    8 9   0    1 2 3 4 5 6 7 8 9  0 1\n\n                                     Value (variable)\n\n                                              ...\n\nValue (variable): A Primitive Type value other than String.\n\n2.5.3    MemberReference\n\nThe MemberReference record contains a reference to another record that contains the actual value.\nThe record is used to serialize values of a Class Member and Array items. The mechanism to serialize\na Class instance is described in [MS-NRTP] section 3.1.5.1.6. The mechanism to serialize an Array\ninstance is described in [MS-NRTP] section 3.1.5.1.7.\n\n                            1                              2                       3\n0 1    2 3 4 5 6    7 8 9   0    1 2 3 4 5       6 7 8 9   0    1 2 3 4 5 6 7 8 9  0 1\n\n  RecordTypeEnum                                       IdRef\n\n           ...\n\nRecordTypeEnum (1 byte): A RecordTypeEnumeration value that identifies the record type. The\n  value MUST be 9.\n\nIdRef (4 bytes): An INT32 value (as specified in [MS-DTYP] section 2.2.22) that is an ID of an object\n  defined in another record.\n\n  §      The value MUST be a positive integer.\n\n  §      A Class, Array, or BinaryObjectString record MUST exist in the serialization stream with the\n         value as its ObjectId. Unlike other ID references, there is no restriction on where the record\n         that defines the ID appears in the serialization stream; that is, it MAY appear after the\n         referencing record.<9>\n\n2.5.4    ObjectNull\n\nThe ObjectNull record contains a Null Object. The mechanism to serialize a Null Object is described\nin [MS-NRTP] section 3.1.5.1.12.\n\n                            1                              2                       3\n0 1    2 3    4 5 6 7 8 9   0    1 2 3 4 5       6 7 8 9   0    1 2 3 4 5 6 7 8 9  0 1\n\n  RecordTypeEnum\n\nRecordTypeEnum (1 byte): A RecordTypeEnumeration value that identifies the record type. The\n  value MUST be 10.\n\n\n                                           38 / 55\n[MS-NRBF] - v20190313\n.NET Remoting: Binary Format Data Structure\nCopyright © 2019 Microsoft Corporation\nRelease: March 13, 2019",
      "md": "\n\nValue (variable): A Primitive Type value other than String.\n\n# 2.5.3 MemberReference\n\nThe MemberReference record contains a reference to another record that contains the actual value. The record is used to serialize values of a Class Member and Array items. The mechanism to serialize a Class instance is described in [MS-NRTP] section 3.1.5.1.6. The mechanism to serialize an Array instance is described in [MS-NRTP] section 3.1.5.1.7.\n\n|   | 1 | 2 | 3 |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |\n| - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - |\n| 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 0 | 1 |\n\nRecordTypeEnum (1 byte): A RecordTypeEnumeration value that identifies the record type. The value MUST be 9.\n\nIdRef (4 bytes): An INT32 value (as specified in [MS-DTYP] section 2.2.22) that is an ID of an object defined in another record.\n\n- The value MUST be a positive integer.\n- A Class, Array, or BinaryObjectString record MUST exist in the serialization stream with the value as its ObjectId. Unlike other ID references, there is no restriction on where the record that defines the ID appears in the serialization stream; that is, it MAY appear after the referencing record.9\n\n# 2.5.4 ObjectNull\n\nThe ObjectNull record contains a Null Object. The mechanism to serialize a Null Object is described in [MS-NRTP] section 3.1.5.1.12.\n\n|   | 1 | 2 | 3 |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |\n| - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - |\n| 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 0 | 1 |\n\nRecordTypeEnum (1 byte): A RecordTypeEnumeration value that identifies the record type. The value MUST be 10.\n\n",
      "images": [
      ],
      "charts": [
      ],
      "items": [
        {
          "type": "text",
          "value": "Value (variable): A Primitive Type value other than String.",
          "md": "Value (variable): A Primitive Type value other than String.",
          "bBox": {
            "x": 72.1,
            "y": 92.75,
            "w": 271.89,
            "h": 57.4
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "2.5.3 MemberReference",
          "md": "# 2.5.3 MemberReference",
          "bBox": {
            "x": 72.1,
            "y": 58.05,
            "w": 413.55,
            "h": 511
          }
        },
        {
          "type": "text",
          "value": "The MemberReference record contains a reference to another record that contains the actual value. The record is used to serialize values of a Class Member and Array items. The mechanism to serialize a Class instance is described in [MS-NRTP] section 3.1.5.1.6. The mechanism to serialize an Array instance is described in [MS-NRTP] section 3.1.5.1.7.",
          "md": "The MemberReference record contains a reference to another record that contains the actual value. The record is used to serialize values of a Class Member and Array items. The mechanism to serialize a Class instance is described in [MS-NRTP] section 3.1.5.1.6. The mechanism to serialize an Array instance is described in [MS-NRTP] section 3.1.5.1.7.",
          "bBox": {
            "x": 72.1,
            "y": 58.05,
            "w": 466.34,
            "h": 511
          }
        },
        {
          "type": "table",
          "rows": [
            [
              "",
              "1",
              "2",
              "3",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              ""
            ],
            [
              "0",
              "1",
              "2",
              "3",
              "4",
              "5",
              "6",
              "7",
              "8",
              "9",
              "0",
              "1",
              "2",
              "3",
              "4",
              "5",
              "6",
              "7",
              "8",
              "9",
              "0",
              "1"
            ]
          ],
          "md": "|   | 1 | 2 | 3 |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |\n| - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - |\n| 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 0 | 1 |",
          "isPerfectTable": true,
          "csv": "\"\",\"1\",\"2\",\"3\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\"\n\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"0\",\"1\"",
          "bBox": {
            "x": 72.1,
            "y": 58.05,
            "w": 467.9,
            "h": 696.1
          }
        },
        {
          "type": "text",
          "value": "RecordTypeEnum (1 byte): A RecordTypeEnumeration value that identifies the record type. The value MUST be 9.\n\nIdRef (4 bytes): An INT32 value (as specified in [MS-DTYP] section 2.2.22) that is an ID of an object defined in another record.\n\n- The value MUST be a positive integer.\n- A Class, Array, or BinaryObjectString record MUST exist in the serialization stream with the value as its ObjectId. Unlike other ID references, there is no restriction on where the record that defines the ID appears in the serialization stream; that is, it MAY appear after the referencing record.9",
          "md": "RecordTypeEnum (1 byte): A RecordTypeEnumeration value that identifies the record type. The value MUST be 9.\n\nIdRef (4 bytes): An INT32 value (as specified in [MS-DTYP] section 2.2.22) that is an ID of an object defined in another record.\n\n- The value MUST be a positive integer.\n- A Class, Array, or BinaryObjectString record MUST exist in the serialization stream with the value as its ObjectId. Unlike other ID references, there is no restriction on where the record that defines the ID appears in the serialization stream; that is, it MAY appear after the referencing record.9",
          "bBox": {
            "x": 72.1,
            "y": 58.05,
            "w": 459.09,
            "h": 558.7
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "2.5.4 ObjectNull",
          "md": "# 2.5.4 ObjectNull",
          "bBox": {
            "x": 72.1,
            "y": 58.05,
            "w": 346.05,
            "h": 511
          }
        },
        {
          "type": "text",
          "value": "The ObjectNull record contains a Null Object. The mechanism to serialize a Null Object is described in [MS-NRTP] section 3.1.5.1.12.",
          "md": "The ObjectNull record contains a Null Object. The mechanism to serialize a Null Object is described in [MS-NRTP] section 3.1.5.1.12.",
          "bBox": {
            "x": 72.1,
            "y": 58.05,
            "w": 459.07,
            "h": 511
          }
        },
        {
          "type": "table",
          "rows": [
            [
              "",
              "1",
              "2",
              "3",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              ""
            ],
            [
              "0",
              "1",
              "2",
              "3",
              "4",
              "5",
              "6",
              "7",
              "8",
              "9",
              "0",
              "1",
              "2",
              "3",
              "4",
              "5",
              "6",
              "7",
              "8",
              "9",
              "0",
              "1"
            ]
          ],
          "md": "|   | 1 | 2 | 3 |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |\n| - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - |\n| 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 0 | 1 |",
          "isPerfectTable": true,
          "csv": "\"\",\"1\",\"2\",\"3\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\"\n\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"0\",\"1\"",
          "bBox": {
            "x": 72.1,
            "y": 58.05,
            "w": 467.9,
            "h": 696.1
          }
        },
        {
          "type": "text",
          "value": "RecordTypeEnum (1 byte): A RecordTypeEnumeration value that identifies the record type. The value MUST be 10.",
          "md": "RecordTypeEnum (1 byte): A RecordTypeEnumeration value that identifies the record type. The value MUST be 10.",
          "bBox": {
            "x": 72.1,
            "y": 58.05,
            "w": 447.01,
            "h": 571
          }
        }
      ],
      "status": "OK",
      "originalOrientationAngle": 0,
      "links": [
        {
          "unsafeUrl": "../../../../../../../upload/%5BMS-NRTP%5D.pdf#Section_3acb31b0b8734aaf85039727ec40fbec",
          "text": "[MS-NRTP]"
        },
        {
          "unsafeUrl": "../../../../../../../upload/%5BMS-NRTP%5D.pdf#Section_3acb31b0b8734aaf85039727ec40fbec",
          "text": "[MS-NRTP]"
        }
      ],
      "width": 612,
      "height": 792,
      "triggeredAutoMode": false,
      "parsingMode": "accurate",
      "structuredData": null,
      "noStructuredContent": false,
      "noTextContent": false,
      "pageHeaderMarkdown": "",
      "pageFooterMarkdown": "",
      "confidence": 0.814
    },
    {
      "page": 39,
      "text": "2.5.5   ObjectNullMultiple\n\nThe ObjectNullMultiple record provides a more compact form for multiple consecutive Null records\nthan using individual ObjectNull records. The mechanism to serialize a Null Object is described in\n[MS-NRTP] section 3.1.5.1.12.\n\n                             1                          2                             3\n0 1   2 3 4 5 6      7 8 9   0    1   2 3  4 5 6 7 8 9  0    1 2 3 4 5 6 7       8 9  0 1\n\nRecordTypeEnum                                     NullCount\n\n     ...\n\nRecordTypeEnum (1 byte): A RecordTypeEnumeration value that identifies the record type. The\n  value MUST be 14.\n\nNullCount (4 bytes): An INT32 value (as specified in [MS-DTYP] section 2.2.22) that is the count of\n  the number of consecutive Null Objects. The value MUST be a positive integer.\n\n2.5.6   ObjectNullMultiple256\n\nThe ObjectNullMultiple256 record provides the most compact form for multiple, consecutive Null\nrecords when the count of Null records is less than 256. The mechanism to serialize a Null Object is\ndescribed in [MS-NRTP] section 3.1.5.1.12.\n\n                             1                          2                             3\n0 1   2 3 4 5 6      7 8 9   0    1   2 3  4 5 6 7 8 9  0    1 2 3 4 5 6 7       8 9  0 1\n\n  RecordTypeEnum             NullCount\n\nRecordTypeEnum (1 byte): A RecordTypeEnumeration value that identifies the record type. The\n  value MUST be 13.\n\nNullCount (1 byte): A BYTE value (as specified in [MS-DTYP] section 2.2.6) that is the count of the\n  number of consecutive Null objects. The value MUST be in the range of 0 to 255, inclusive.\n\n2.5.7   BinaryObjectString\n\nThe BinaryObjectString record identifies an object as a String object, and contains information about it.\nThe mechanism to serialize a string is described in [MS-NRTP] section 3.1.5.1.11.\n\n                             1                          2                             3\n0 1   2 3 4 5 6      7 8 9   0    1   2 3  4 5 6 7 8 9  0    1 2 3 4 5 6 7       8 9  0 1\n\nRecordTypeEnum                   ObjectId\n\n     ...                     Value (variable)\n\n                                               ...\n\nRecordTypeEnum (1 byte): A RecordTypeEnumeration value that identifies the record type. The\n  value MUST be 6.\n\n                                                                                              39 / 55\n[MS-NRBF] - v20190313\n.NET Remoting: Binary Format Data Structure\nCopyright © 2019 Microsoft Corporation\nRelease: March 13, 2019",
      "md": "\n# 2.5.5 ObjectNullMultiple\n\nThe ObjectNullMultiple record provides a more compact form for multiple consecutive Null records than using individual ObjectNull records. The mechanism to serialize a Null Object is described in [MS-NRTP] section 3.1.5.1.12.\n\n|                |                             |                       |\n| -------------- | --------------------------- | --------------------- |\n| 0 1 2 3 4 5 6  | 7 8 9 0 1 2 3 4 5 6 7 8 9 0 | 1 2 3 4 5 6 7 8 9 0 1 |\n| RecordTypeEnum | NullCount                   |                       |\n\nRecordTypeEnum (1 byte): A RecordTypeEnumeration value that identifies the record type. The value MUST be 14.\n\nNullCount (4 bytes): An INT32 value (as specified in [MS-DTYP] section 2.2.22) that is the count of the number of consecutive Null Objects. The value MUST be a positive integer.\n\n# 2.5.6 ObjectNullMultiple256\n\nThe ObjectNullMultiple256 record provides the most compact form for multiple, consecutive Null records when the count of Null records is less than 256. The mechanism to serialize a Null Object is described in [MS-NRTP] section 3.1.5.1.12.\n\n|                |                             |                       |\n| -------------- | --------------------------- | --------------------- |\n| 0 1 2 3 4 5 6  | 7 8 9 0 1 2 3 4 5 6 7 8 9 0 | 1 2 3 4 5 6 7 8 9 0 1 |\n| RecordTypeEnum | NullCount                   |                       |\n\nRecordTypeEnum (1 byte): A RecordTypeEnumeration value that identifies the record type. The value MUST be 13.\n\nNullCount (1 byte): A BYTE value (as specified in [MS-DTYP] section 2.2.6) that is the count of the number of consecutive Null objects. The value MUST be in the range of 0 to 255, inclusive.\n\n# 2.5.7 BinaryObjectString\n\nThe BinaryObjectString record identifies an object as a String object, and contains information about it. The mechanism to serialize a string is described in [MS-NRTP] section 3.1.5.1.11.\n\n|                |                             |                       |\n| -------------- | --------------------------- | --------------------- |\n| 0 1 2 3 4 5 6  | 7 8 9 0 1 2 3 4 5 6 7 8 9 0 | 1 2 3 4 5 6 7 8 9 0 1 |\n| RecordTypeEnum | ObjectId                    |                       |\n\nRecordTypeEnum (1 byte): A RecordTypeEnumeration value that identifies the record type. The value MUST be 6.\n\n",
      "images": [
      ],
      "charts": [
      ],
      "items": [
        {
          "type": "heading",
          "lvl": 1,
          "value": "2.5.5 ObjectNullMultiple",
          "md": "# 2.5.5 ObjectNullMultiple",
          "bBox": {
            "x": 72.1,
            "y": 55.3,
            "w": 346.05,
            "h": 511.9
          }
        },
        {
          "type": "text",
          "value": "The ObjectNullMultiple record provides a more compact form for multiple consecutive Null records than using individual ObjectNull records. The mechanism to serialize a Null Object is described in [MS-NRTP] section 3.1.5.1.12.",
          "md": "The ObjectNullMultiple record provides a more compact form for multiple consecutive Null records than using individual ObjectNull records. The mechanism to serialize a Null Object is described in [MS-NRTP] section 3.1.5.1.12.",
          "bBox": {
            "x": 72.1,
            "y": 55.3,
            "w": 450.24,
            "h": 511.9
          }
        },
        {
          "type": "table",
          "rows": [
            [
              "0 1 2 3 4 5 6",
              "7 8 9 0 1 2 3 4 5 6 7 8 9 0",
              "1 2 3 4 5 6 7 8 9 0 1"
            ],
            [
              "RecordTypeEnum",
              "NullCount",
              ""
            ]
          ],
          "md": "|                |                             |                       |\n| -------------- | --------------------------- | --------------------- |\n| 0 1 2 3 4 5 6  | 7 8 9 0 1 2 3 4 5 6 7 8 9 0 | 1 2 3 4 5 6 7 8 9 0 1 |\n| RecordTypeEnum | NullCount                   |                       |",
          "isPerfectTable": true,
          "csv": "\"0 1 2 3 4 5 6\",\"7 8 9 0 1 2 3 4 5 6 7 8 9 0\",\"1 2 3 4 5 6 7 8 9 0 1\"\n\"RecordTypeEnum\",\"NullCount\",\"\"",
          "bBox": {
            "x": 72.1,
            "y": 55.3,
            "w": 467.9,
            "h": 698.85
          }
        },
        {
          "type": "text",
          "value": "RecordTypeEnum (1 byte): A RecordTypeEnumeration value that identifies the record type. The value MUST be 14.\n\nNullCount (4 bytes): An INT32 value (as specified in [MS-DTYP] section 2.2.22) that is the count of the number of consecutive Null Objects. The value MUST be a positive integer.",
          "md": "RecordTypeEnum (1 byte): A RecordTypeEnumeration value that identifies the record type. The value MUST be 14.\n\nNullCount (4 bytes): An INT32 value (as specified in [MS-DTYP] section 2.2.22) that is the count of the number of consecutive Null Objects. The value MUST be a positive integer.",
          "bBox": {
            "x": 72.1,
            "y": 126.6,
            "w": 453.71,
            "h": 537.3
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "2.5.6 ObjectNullMultiple256",
          "md": "# 2.5.6 ObjectNullMultiple256",
          "bBox": {
            "x": 72.1,
            "y": 55.3,
            "w": 359.55,
            "h": 511.9
          }
        },
        {
          "type": "text",
          "value": "The ObjectNullMultiple256 record provides the most compact form for multiple, consecutive Null records when the count of Null records is less than 256. The mechanism to serialize a Null Object is described in [MS-NRTP] section 3.1.5.1.12.",
          "md": "The ObjectNullMultiple256 record provides the most compact form for multiple, consecutive Null records when the count of Null records is less than 256. The mechanism to serialize a Null Object is described in [MS-NRTP] section 3.1.5.1.12.",
          "bBox": {
            "x": 72.1,
            "y": 55.3,
            "w": 460.95,
            "h": 511.9
          }
        },
        {
          "type": "table",
          "rows": [
            [
              "0 1 2 3 4 5 6",
              "7 8 9 0 1 2 3 4 5 6 7 8 9 0",
              "1 2 3 4 5 6 7 8 9 0 1"
            ],
            [
              "RecordTypeEnum",
              "NullCount",
              ""
            ]
          ],
          "md": "|                |                             |                       |\n| -------------- | --------------------------- | --------------------- |\n| 0 1 2 3 4 5 6  | 7 8 9 0 1 2 3 4 5 6 7 8 9 0 | 1 2 3 4 5 6 7 8 9 0 1 |\n| RecordTypeEnum | NullCount                   |                       |",
          "isPerfectTable": true,
          "csv": "\"0 1 2 3 4 5 6\",\"7 8 9 0 1 2 3 4 5 6 7 8 9 0\",\"1 2 3 4 5 6 7 8 9 0 1\"\n\"RecordTypeEnum\",\"NullCount\",\"\"",
          "bBox": {
            "x": 72.1,
            "y": 55.3,
            "w": 467.9,
            "h": 698.85
          }
        },
        {
          "type": "text",
          "value": "RecordTypeEnum (1 byte): A RecordTypeEnumeration value that identifies the record type. The value MUST be 13.\n\nNullCount (1 byte): A BYTE value (as specified in [MS-DTYP] section 2.2.6) that is the count of the number of consecutive Null objects. The value MUST be in the range of 0 to 255, inclusive.",
          "md": "RecordTypeEnum (1 byte): A RecordTypeEnumeration value that identifies the record type. The value MUST be 13.\n\nNullCount (1 byte): A BYTE value (as specified in [MS-DTYP] section 2.2.6) that is the count of the number of consecutive Null objects. The value MUST be in the range of 0 to 255, inclusive.",
          "bBox": {
            "x": 72.1,
            "y": 126.6,
            "w": 450.98,
            "h": 537.3
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "2.5.7 BinaryObjectString",
          "md": "# 2.5.7 BinaryObjectString",
          "bBox": {
            "x": 72.1,
            "y": 126.6,
            "w": 373.05,
            "h": 440.6
          }
        },
        {
          "type": "text",
          "value": "The BinaryObjectString record identifies an object as a String object, and contains information about it. The mechanism to serialize a string is described in [MS-NRTP] section 3.1.5.1.11.",
          "md": "The BinaryObjectString record identifies an object as a String object, and contains information about it. The mechanism to serialize a string is described in [MS-NRTP] section 3.1.5.1.11.",
          "bBox": {
            "x": 72.1,
            "y": 126.6,
            "w": 466.16,
            "h": 440.6
          }
        },
        {
          "type": "table",
          "rows": [
            [
              "0 1 2 3 4 5 6",
              "7 8 9 0 1 2 3 4 5 6 7 8 9 0",
              "1 2 3 4 5 6 7 8 9 0 1"
            ],
            [
              "RecordTypeEnum",
              "ObjectId",
              ""
            ]
          ],
          "md": "|                |                             |                       |\n| -------------- | --------------------------- | --------------------- |\n| 0 1 2 3 4 5 6  | 7 8 9 0 1 2 3 4 5 6 7 8 9 0 | 1 2 3 4 5 6 7 8 9 0 1 |\n| RecordTypeEnum | ObjectId                    |                       |",
          "isPerfectTable": true,
          "csv": "\"0 1 2 3 4 5 6\",\"7 8 9 0 1 2 3 4 5 6 7 8 9 0\",\"1 2 3 4 5 6 7 8 9 0 1\"\n\"RecordTypeEnum\",\"ObjectId\",\"\"",
          "bBox": {
            "x": 72.1,
            "y": 55.3,
            "w": 467.9,
            "h": 698.85
          }
        },
        {
          "type": "text",
          "value": "RecordTypeEnum (1 byte): A RecordTypeEnumeration value that identifies the record type. The value MUST be 6.",
          "md": "RecordTypeEnum (1 byte): A RecordTypeEnumeration value that identifies the record type. The value MUST be 6.",
          "bBox": {
            "x": 72.1,
            "y": 126.6,
            "w": 447.01,
            "h": 549.6
          }
        }
      ],
      "status": "OK",
      "originalOrientationAngle": 0,
      "links": [
        {
          "unsafeUrl": "../../../../../../../upload/%5BMS-NRTP%5D.pdf#Section_3acb31b0b8734aaf85039727ec40fbec",
          "text": "[MS-NRTP]"
        },
        {
          "unsafeUrl": "../../../../../../../upload/%5BMS-NRTP%5D.pdf#Section_3acb31b0b8734aaf85039727ec40fbec",
          "text": "[MS-NRTP]"
        },
        {
          "unsafeUrl": "../../../../../../../upload/%5BMS-NRTP%5D.pdf#Section_3acb31b0b8734aaf85039727ec40fbec",
          "text": "[MS-NRTP]"
        }
      ],
      "width": 612,
      "height": 792,
      "triggeredAutoMode": false,
      "parsingMode": "accurate",
      "structuredData": null,
      "noStructuredContent": false,
      "noTextContent": false,
      "pageHeaderMarkdown": "",
      "pageFooterMarkdown": "",
      "confidence": 0.912
    },
    {
      "page": 40,
      "text": "ObjectId (4 bytes): An INT32 value (as specified in [MS-DTYP] section 2.2.22) that uniquely identifies\n     the string instance in the serialization stream. The value MUST be a positive integer. An\n     implementation MAY use any algorithm to generate the unique IDs.<10>\n\nValue (variable): A LengthPrefixedString value.\n\n2.6       Other Records\n\nThe following sections define the records that are not part of any of the previous categories.\n\n2.6.1       SerializationHeaderRecord\n\nThe SerializationHeaderRecord record MUST be the first record in a binary serialization. This record\nhas the major and minor version of the format and the IDs of the top object and the headers.\n\n                                 1                       2                                    3\n0 1       2 3       4 5 6 7 8 9  0    1 2 3 4 5 6 7 8 9  0        1 2 3     4 5 6 7   8    9  0 1\n\n     RecordTypeEnum                                   RootId\n\n             ...                                    HeaderId\n\n             ...                                    MajorVersion\n\n             ...                                    MinorVersion\n\n             ...\n\nRecordTypeEnum (1 byte): A RecordTypeEnumeration value that identifies the record type. The\n     value MUST be 0.\n\nRootId (4 bytes): An INT32 value (as specified in [MS-DTYP] section 2.2.22) that identifies the root of\n     the graph of nodes. The value of the field is set as follows:\n\n     §      If a BinaryMethodCall record is present in the serialization stream and if there is no\n            MethodCallArray record following it, the value of this field MUST be 0; if a MethodCallArray\n            record follows the BinaryMethodCall record, the value of this field MUST contain the ObjectId of\n            the MethodCallArray.\n\n     §      If a BinaryMethodReturn record is present in the serialization stream and if there is no\n            MethodReturnCallArray record following it, the value of this field MUST be 0; if a\n            MethodReturnCallArray record follows the BinaryMethodReturn record, the value of this field\n            MUST contain the ObjectId of the MethodReturnCallArray.\n\n     §      If neither the BinaryMethodCall nor BinaryMethodReturn record is present in the serialization\n            stream, the value of this field MUST contain the ObjectId of a Class, Array, or\n            BinaryObjectString record contained in the serialization stream.\n\nHeaderId (4 bytes): An INT32 value (as specified in [MS-DTYP] section 2.2.22) that identifies the\n     Array that contains the header objects. The value of the field is set as follows:\n\n\n                                           40 / 55\n[MS-NRBF] - v20190313\n.NET Remoting: Binary Format Data Structure\nCopyright © 2019 Microsoft Corporation\nRelease: March 13, 2019",
      "md": "\n.NET Remoting: Binary Format Data Structure\n\nObjectId (4 bytes): An INT32 value (as specified in [MS-DTYP] section 2.2.22) that uniquely identifies the string instance in the serialization stream. The value MUST be a positive integer. An implementation MAY use any algorithm to generate the unique IDs.10\n\nValue (variable): A LengthPrefixedString value.\n\n# 2.6 Other Records\n\nThe following sections define the records that are not part of any of the previous categories.\n\n# 2.6.1 SerializationHeaderRecord\n\nThe SerializationHeaderRecord record MUST be the first record in a binary serialization. This record has the major and minor version of the format and the IDs of the top object and the headers.\n\n|   |   |   |   |   |   |\n| - | - | - | - | - | - |\n|   |   |   |   |   |   |\n|   |   |   |   |   |   |\n\nRecordTypeEnum (1 byte): A RecordTypeEnumeration value that identifies the record type. The value MUST be 0.\n\nRootId (4 bytes): An INT32 value (as specified in [MS-DTYP] section 2.2.22) that identifies the root of the graph of nodes. The value of the field is set as follows:\n\n- If a BinaryMethodCall record is present in the serialization stream and if there is no MethodCallArray record following it, the value of this field MUST be 0; if a MethodCallArray record follows the BinaryMethodCall record, the value of this field MUST contain the ObjectId of the MethodCallArray.\n- If a BinaryMethodReturn record is present in the serialization stream and if there is no MethodReturnCallArray record following it, the value of this field MUST be 0; if a MethodReturnCallArray record follows the BinaryMethodReturn record, the value of this field MUST contain the ObjectId of the MethodReturnCallArray.\n- If neither the BinaryMethodCall nor BinaryMethodReturn record is present in the serialization stream, the value of this field MUST contain the ObjectId of a Class, Array, or BinaryObjectString record contained in the serialization stream.\n\nHeaderId (4 bytes): An INT32 value (as specified in [MS-DTYP] section 2.2.22) that identifies the Array that contains the header objects. The value of the field is set as follows:\n\nCopyright © 2019 Microsoft Corporation\n\nRelease: March 13, 2019\n",
      "images": [
      ],
      "charts": [
      ],
      "items": [
        {
          "type": "text",
          "value": ".NET Remoting: Binary Format Data Structure\n\nObjectId (4 bytes): An INT32 value (as specified in [MS-DTYP] section 2.2.22) that uniquely identifies the string instance in the serialization stream. The value MUST be a positive integer. An implementation MAY use any algorithm to generate the unique IDs.10\n\nValue (variable): A LengthPrefixedString value.",
          "md": ".NET Remoting: Binary Format Data Structure\n\nObjectId (4 bytes): An INT32 value (as specified in [MS-DTYP] section 2.2.22) that uniquely identifies the string instance in the serialization stream. The value MUST be a positive integer. An implementation MAY use any algorithm to generate the unique IDs.10\n\nValue (variable): A LengthPrefixedString value.",
          "bBox": {
            "x": 72.1,
            "y": 55.15,
            "w": 464.03,
            "h": 677.2
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "2.6 Other Records",
          "md": "# 2.6 Other Records",
          "bBox": {
            "x": 72.1,
            "y": 129.5,
            "w": 359.55,
            "h": 129.85
          }
        },
        {
          "type": "text",
          "value": "The following sections define the records that are not part of any of the previous categories.",
          "md": "The following sections define the records that are not part of any of the previous categories.",
          "bBox": {
            "x": 72.1,
            "y": 152,
            "w": 417.22,
            "h": 9
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "2.6.1 SerializationHeaderRecord",
          "md": "# 2.6.1 SerializationHeaderRecord",
          "bBox": {
            "x": 72.1,
            "y": 129.5,
            "w": 427.05,
            "h": 129.85
          }
        },
        {
          "type": "text",
          "value": "The SerializationHeaderRecord record MUST be the first record in a binary serialization. This record has the major and minor version of the format and the IDs of the top object and the headers.",
          "md": "The SerializationHeaderRecord record MUST be the first record in a binary serialization. This record has the major and minor version of the format and the IDs of the top object and the headers.",
          "bBox": {
            "x": 72.1,
            "y": 180.45,
            "w": 456.03,
            "h": 175.2
          }
        },
        {
          "type": "table",
          "rows": [
          ],
          "md": "|   |   |   |   |   |   |\n| - | - | - | - | - | - |\n|   |   |   |   |   |   |\n|   |   |   |   |   |   |",
          "isPerfectTable": true,
          "csv": "",
          "bBox": {
            "x": 0,
            "y": 0,
            "w": 612,
            "h": 792
          }
        },
        {
          "type": "text",
          "value": "RecordTypeEnum (1 byte): A RecordTypeEnumeration value that identifies the record type. The value MUST be 0.\n\nRootId (4 bytes): An INT32 value (as specified in [MS-DTYP] section 2.2.22) that identifies the root of the graph of nodes. The value of the field is set as follows:\n\n- If a BinaryMethodCall record is present in the serialization stream and if there is no MethodCallArray record following it, the value of this field MUST be 0; if a MethodCallArray record follows the BinaryMethodCall record, the value of this field MUST contain the ObjectId of the MethodCallArray.\n- If a BinaryMethodReturn record is present in the serialization stream and if there is no MethodReturnCallArray record following it, the value of this field MUST be 0; if a MethodReturnCallArray record follows the BinaryMethodReturn record, the value of this field MUST contain the ObjectId of the MethodReturnCallArray.\n- If neither the BinaryMethodCall nor BinaryMethodReturn record is present in the serialization stream, the value of this field MUST contain the ObjectId of a Class, Array, or BinaryObjectString record contained in the serialization stream.\n\nHeaderId (4 bytes): An INT32 value (as specified in [MS-DTYP] section 2.2.22) that identifies the Array that contains the header objects. The value of the field is set as follows:\n\nCopyright © 2019 Microsoft Corporation\n\nRelease: March 13, 2019",
          "md": "RecordTypeEnum (1 byte): A RecordTypeEnumeration value that identifies the record type. The value MUST be 0.\n\nRootId (4 bytes): An INT32 value (as specified in [MS-DTYP] section 2.2.22) that identifies the root of the graph of nodes. The value of the field is set as follows:\n\n- If a BinaryMethodCall record is present in the serialization stream and if there is no MethodCallArray record following it, the value of this field MUST be 0; if a MethodCallArray record follows the BinaryMethodCall record, the value of this field MUST contain the ObjectId of the MethodCallArray.\n- If a BinaryMethodReturn record is present in the serialization stream and if there is no MethodReturnCallArray record following it, the value of this field MUST be 0; if a MethodReturnCallArray record follows the BinaryMethodReturn record, the value of this field MUST contain the ObjectId of the MethodReturnCallArray.\n- If neither the BinaryMethodCall nor BinaryMethodReturn record is present in the serialization stream, the value of this field MUST contain the ObjectId of a Class, Array, or BinaryObjectString record contained in the serialization stream.\n\nHeaderId (4 bytes): An INT32 value (as specified in [MS-DTYP] section 2.2.22) that identifies the Array that contains the header objects. The value of the field is set as follows:\n\nCopyright © 2019 Microsoft Corporation\n\nRelease: March 13, 2019",
          "bBox": {
            "x": 72.1,
            "y": 239.45,
            "w": 466.51,
            "h": 514.7
          }
        }
      ],
      "status": "OK",
      "originalOrientationAngle": 0,
      "links": [
      ],
      "width": 612,
      "height": 792,
      "triggeredAutoMode": false,
      "parsingMode": "accurate",
      "structuredData": null,
      "noStructuredContent": false,
      "noTextContent": false,
      "pageHeaderMarkdown": "\n.NET Remoting: Binary Format Data Structure\n",
      "pageFooterMarkdown": "\nCopyright © 2019 Microsoft Corporation\n\nRelease: March 13, 2019\n",
      "confidence": 0.919
    },
    {
      "page": 41,
      "text": "  §      If a BinaryMethodCall record is present in the serialization stream and if there is no\n         MethodCallArray record following it, the value of this field MUST be 0; if a MethodCallArray\n         record follows the BinaryMethodCall record, the value of this field MUST be -1.\n\n  §      If a BinaryMethodReturn record is present in the serialization stream and if there is no\n         MethodReturnCallArray record following it, the value of this field MUST be 0; if a\n         MethodReturnCallArray record follows the BinaryMethodReturn record, the value of this field\n         MUST be -1.\n\n  §      If neither the BinaryMethodCall nor BinaryMethodReturn record is present in the serialization\n         stream, the value of this field MUST contain the ObjectId of a Class, Array , or\n         BinaryObjectString record that is contained in the serialization stream.\n\n  The field MUST be ignored on read.\n\nMajorVersion (4 bytes): An INT32 value (as specified in [MS-DTYP] section 2.2.22) that identifies the\n  major version of the format. The value of this field MUST be 1.\n\nMinorVersion (4 bytes): An INT32 value (as specified in [MS-DTYP] section 2.2.22) that identifies the\n  minor version of the protocol. The value of this field MUST be 0.\n\n2.6.2    BinaryLibrary\n\nThe BinaryLibrary record associates an INT32 ID (as specified in [MS-DTYP] section 2.2.22) with a\nLibrary name. This allows other records to reference the Library name by using the ID. This approach\nreduces the wire size when there are multiple records that reference the same Library name.\n\n                           1                                 2                              3\n0 1    2 3 4 5 6    7 8 9  0    1 2 3 4 5 6 7 8           9  0    1 2 3 4 5 6    7 8     9  0  1\n\n  RecordTypeEnum                 LibraryId\n\n           ...             LibraryName (variable)\n\n                                          ...\n\nRecordTypeEnum (1 byte): A RecordTypeEnumeration value that identifies the record type. The\n  value MUST be 12.\n\nLibraryId (4 bytes): An INT32 value (as specified in [MS-DTYP] section 2.2.22) that uniquely identifies\n  the Library name in the serialization stream. The value MUST be a positive integer. An\n  implementation MAY use any algorithm to generate the unique IDs.<11>\n\nLibraryName (variable): A LengthPrefixedString value that represents the Library name. The format\n  of the string is specified in [MS-NRTP] section 2.2.1.3.\n\n2.6.3    MessageEnd\n\nThe MessageEnd record marks the end of the serialization stream.\n\n\n                                           41 / 55\n[MS-NRBF] - v20190313\n.NET Remoting: Binary Format Data Structure\nCopyright © 2019 Microsoft Corporation\nRelease: March 13, 2019",
      "md": "\n\nIf a BinaryMethodCall record is present in the serialization stream and if there is no MethodCallArray record following it, the value of this field MUST be 0; if a MethodCallArray record follows the BinaryMethodCall record, the value of this field MUST be -1.\n\nIf a BinaryMethodReturn record is present in the serialization stream and if there is no MethodReturnCallArray record following it, the value of this field MUST be 0; if a MethodReturnCallArray record follows the BinaryMethodReturn record, the value of this field MUST be -1.\n\nIf neither the BinaryMethodCall nor BinaryMethodReturn record is present in the serialization stream, the value of this field MUST contain the ObjectId of a Class, Array, or BinaryObjectString record that is contained in the serialization stream.\n\nThe field MUST be ignored on read.\n\n# MajorVersion (4 bytes)\n\nAn INT32 value (as specified in [MS-DTYP] section 2.2.22) that identifies the major version of the format. The value of this field MUST be 1.\n\n# MinorVersion (4 bytes)\n\nAn INT32 value (as specified in [MS-DTYP] section 2.2.22) that identifies the minor version of the protocol. The value of this field MUST be 0.\n\n# 2.6.2 BinaryLibrary\n\nThe BinaryLibrary record associates an INT32 ID (as specified in [MS-DTYP] section 2.2.22) with a Library name. This allows other records to reference the Library name by using the ID. This approach reduces the wire size when there are multiple records that reference the same Library name.\n\n| RecordTypeEnum | LibraryId | LibraryName (variable) |\n| -------------- | --------- | ---------------------- |\n|                |           |                        |\n\nRecordTypeEnum (1 byte): A RecordTypeEnumeration value that identifies the record type. The value MUST be 12.\n\nLibraryId (4 bytes): An INT32 value (as specified in [MS-DTYP] section 2.2.22) that uniquely identifies the Library name in the serialization stream. The value MUST be a positive integer. An implementation MAY use any algorithm to generate the unique IDs.11\n\nLibraryName (variable): A LengthPrefixedString value that represents the Library name. The format of the string is specified in [MS-NRTP] section 2.2.1.3.\n\n# 2.6.3 MessageEnd\n\nThe MessageEnd record marks the end of the serialization stream.\n\n",
      "images": [
      ],
      "charts": [
      ],
      "items": [
        {
          "type": "text",
          "value": "If a BinaryMethodCall record is present in the serialization stream and if there is no MethodCallArray record following it, the value of this field MUST be 0; if a MethodCallArray record follows the BinaryMethodCall record, the value of this field MUST be -1.\n\nIf a BinaryMethodReturn record is present in the serialization stream and if there is no MethodReturnCallArray record following it, the value of this field MUST be 0; if a MethodReturnCallArray record follows the BinaryMethodReturn record, the value of this field MUST be -1.\n\nIf neither the BinaryMethodCall nor BinaryMethodReturn record is present in the serialization stream, the value of this field MUST contain the ObjectId of a Class, Array, or BinaryObjectString record that is contained in the serialization stream.\n\nThe field MUST be ignored on read.",
          "md": "If a BinaryMethodCall record is present in the serialization stream and if there is no MethodCallArray record following it, the value of this field MUST be 0; if a MethodCallArray record follows the BinaryMethodCall record, the value of this field MUST be -1.\n\nIf a BinaryMethodReturn record is present in the serialization stream and if there is no MethodReturnCallArray record following it, the value of this field MUST be 0; if a MethodReturnCallArray record follows the BinaryMethodReturn record, the value of this field MUST be -1.\n\nIf neither the BinaryMethodCall nor BinaryMethodReturn record is present in the serialization stream, the value of this field MUST contain the ObjectId of a Class, Array, or BinaryObjectString record that is contained in the serialization stream.\n\nThe field MUST be ignored on read.",
          "bBox": {
            "x": 75.65,
            "y": 55.15,
            "w": 451.56,
            "h": 336.85
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "MajorVersion (4 bytes)",
          "md": "# MajorVersion (4 bytes)",
          "bBox": {
            "x": 129.65,
            "y": 384,
            "w": 275,
            "h": 8
          }
        },
        {
          "type": "text",
          "value": "An INT32 value (as specified in [MS-DTYP] section 2.2.22) that identifies the major version of the format. The value of this field MUST be 1.",
          "md": "An INT32 value (as specified in [MS-DTYP] section 2.2.22) that identifies the major version of the format. The value of this field MUST be 1.",
          "bBox": {
            "x": 89.15,
            "y": 238.75,
            "w": 410,
            "h": 153.25
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "MinorVersion (4 bytes)",
          "md": "# MinorVersion (4 bytes)",
          "bBox": {
            "x": 129.65,
            "y": 384,
            "w": 275,
            "h": 8
          }
        },
        {
          "type": "text",
          "value": "An INT32 value (as specified in [MS-DTYP] section 2.2.22) that identifies the minor version of the protocol. The value of this field MUST be 0.",
          "md": "An INT32 value (as specified in [MS-DTYP] section 2.2.22) that identifies the minor version of the protocol. The value of this field MUST be 0.",
          "bBox": {
            "x": 75.65,
            "y": 272.35,
            "w": 410,
            "h": 119.65
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "2.6.2 BinaryLibrary",
          "md": "# 2.6.2 BinaryLibrary",
          "bBox": {
            "x": 72.1,
            "y": 300.8,
            "w": 359.55,
            "h": 91.2
          }
        },
        {
          "type": "text",
          "value": "The BinaryLibrary record associates an INT32 ID (as specified in [MS-DTYP] section 2.2.22) with a Library name. This allows other records to reference the Library name by using the ID. This approach reduces the wire size when there are multiple records that reference the same Library name.",
          "md": "The BinaryLibrary record associates an INT32 ID (as specified in [MS-DTYP] section 2.2.22) with a Library name. This allows other records to reference the Library name by using the ID. This approach reduces the wire size when there are multiple records that reference the same Library name.",
          "bBox": {
            "x": 72.1,
            "y": 300.8,
            "w": 461.23,
            "h": 91.2
          }
        },
        {
          "type": "table",
          "rows": [
            [
              "RecordTypeEnum",
              "LibraryId",
              "LibraryName (variable)"
            ]
          ],
          "md": "| RecordTypeEnum | LibraryId | LibraryName (variable) |\n| -------------- | --------- | ---------------------- |\n|                |           |                        |",
          "isPerfectTable": true,
          "csv": "\"RecordTypeEnum\",\"LibraryId\",\"LibraryName (variable)\"",
          "bBox": {
            "x": 72.1,
            "y": 406.8,
            "w": 467.18,
            "h": 161.4
          }
        },
        {
          "type": "text",
          "value": "RecordTypeEnum (1 byte): A RecordTypeEnumeration value that identifies the record type. The value MUST be 12.\n\nLibraryId (4 bytes): An INT32 value (as specified in [MS-DTYP] section 2.2.22) that uniquely identifies the Library name in the serialization stream. The value MUST be a positive integer. An implementation MAY use any algorithm to generate the unique IDs.11\n\nLibraryName (variable): A LengthPrefixedString value that represents the Library name. The format of the string is specified in [MS-NRTP] section 2.2.1.3.",
          "md": "RecordTypeEnum (1 byte): A RecordTypeEnumeration value that identifies the record type. The value MUST be 12.\n\nLibraryId (4 bytes): An INT32 value (as specified in [MS-DTYP] section 2.2.22) that uniquely identifies the Library name in the serialization stream. The value MUST be a positive integer. An implementation MAY use any algorithm to generate the unique IDs.11\n\nLibraryName (variable): A LengthPrefixedString value that represents the Library name. The format of the string is specified in [MS-NRTP] section 2.2.1.3.",
          "bBox": {
            "x": 72.1,
            "y": 372.1,
            "w": 467.18,
            "h": 208.4
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "2.6.3 MessageEnd",
          "md": "# 2.6.3 MessageEnd",
          "bBox": {
            "x": 72.1,
            "y": 372.1,
            "w": 413.55,
            "h": 237.85
          }
        },
        {
          "type": "text",
          "value": "The MessageEnd record marks the end of the serialization stream.",
          "md": "The MessageEnd record marks the end of the serialization stream.",
          "bBox": {
            "x": 72.1,
            "y": 599.95,
            "w": 312.6,
            "h": 31.5
          }
        }
      ],
      "status": "OK",
      "originalOrientationAngle": 0,
      "links": [
        {
          "unsafeUrl": "../../../../../../../upload/%5BMS-NRTP%5D.pdf#Section_3acb31b0b8734aaf85039727ec40fbec",
          "text": "[MS-NRTP]"
        }
      ],
      "width": 612,
      "height": 792,
      "triggeredAutoMode": false,
      "parsingMode": "accurate",
      "structuredData": null,
      "noStructuredContent": false,
      "noTextContent": false,
      "pageHeaderMarkdown": "\n",
      "pageFooterMarkdown": "\n",
      "confidence": 0.904
    },
    {
      "page": 42,
      "text": "                              1                              2                                3\n0 1  2        3 4 5  6 7 8 9  0    1 2 3   4  5 6 7  8  9    0    1  2 3 4 5       6 7 8   9  0 1\n\n     RecordTypeEnum\n\nRecordTypeEnum (1 byte): A RecordTypeEnumeration value that identifies the record type. The\n     value MUST be 11.\n\n2.7  Binary Record Grammar\n\nThis section specifies the grammar using the Augmented Backus-Naur Form (ABNF) syntax specified in\n[RFC4234] that defines how the records can appear in the serialization stream.\n\n ABNF productions            Meaning\n\n ABNF productions        =   SerializationHeader\n remotingMessage            *(referenceable)\n\n                            (methodCall/methodReturn)\n                            *(referenceable)\n                             MessageEnd\n\n methodCall              =   0*1(BinaryLibrary)\n                             BinaryMethodCall\n                             0*1(callArray)\n\n methodReturn            =   0*1(BinaryLibrary)\n                             BinaryMethodReturn\n                             0*1(callArray)\n\n callArray               =   0*1(BinaryLibrary)\n                             ArraySingleObject\n                            *(memberReference)\n\n memberReference         =   0*1(BinaryLibrary)\n                            (MemberPrimitiveUnTyped / MemberPrimitiveTyped / MemberReference /\n                            BinaryObjectString / nullObject /Classes)\n\n nullObject              =  ObjectNull / ObjectNullMultiple / ObjectNullMultiple256\n\n referenceable           =  Classes/Arrays/BinaryObjectString\n\n Classes                 =   0*1(BinaryLibrary)\n                            (ClassWithId / ClassWithMembers/ ClassWithMembersAndTypes /\n                            SystemClassWithMembers / SystemClassWithMembersAndTypes)\n                            *(memberReference)\n\n Arrays                  =   0*1(BinaryLibrary)\n                            ((ArraySingleObject *(memberReference)) / (ArraySinglePrimitive\n                            *(MemberPrimitiveUnTyped)) /\n                             (ArraySingleString *(BinaryObjectString/MemberReference/nullObject)) /\n                             (BinaryArray*(memberReference)) )\n\n\n                                           42 / 55\n\n[MS-NRBF] - v20190313\n.NET Remoting: Binary Format Data Structure\nCopyright © 2019 Microsoft Corporation\nRelease: March 13, 2019",
      "md": "\n# 1\n\n# RecordTypeEnum\n\nRecordTypeEnum (1 byte): A RecordTypeEnumeration value that identifies the record type. The value MUST be 11.\n\n# 2.7 Binary Record Grammar\n\nThis section specifies the grammar using the Augmented Backus-Naur Form (ABNF) syntax specified in [RFC4234] that defines how the records can appear in the serialization stream.\n\n| ABNF productions | Meaning                                                                                                                                                                                                                        |\n| ---------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n| ABNF productions | = SerializationHeader remotingMessage \\*(referenceable) (methodCall/methodReturn) \\*(referenceable) MessageEnd                                                                                                                 |\n| methodCall       | = 0\\*1(BinaryLibrary) BinaryMethodCall 0\\*1(callArray)                                                                                                                                                                         |\n| methodReturn     | = 0\\*1(BinaryLibrary) BinaryMethodReturn 0\\*1(callArray)                                                                                                                                                                       |\n| callArray        | = 0\\*1(BinaryLibrary) ArraySingleObject \\*(memberReference)                                                                                                                                                                    |\n| memberReference  | = 0\\*1(BinaryLibrary) (MemberPrimitiveUnTyped / MemberPrimitiveTyped / MemberReference / BinaryObjectString / nullObject / Classes)                                                                                            |\n| nullObject       | = ObjectNull / ObjectNullMultiple / ObjectNullMultiple256                                                                                                                                                                      |\n| referenceable    | = Classes/Arrays/BinaryObjectString                                                                                                                                                                                            |\n| Classes          | = 0\\*1(BinaryLibrary) (ClassWithId / ClassWithMembers/ ClassWithMembersAndTypes / SystemClassWithMembers / SystemClassWithMembersAndTypes) \\*(memberReference)                                                                 |\n| Arrays           | = 0\\*1(BinaryLibrary) ((ArraySingleObject \\*(memberReference)) / (ArraySinglePrimitive \\*(MemberPrimitiveUnTyped)) / (ArraySingleString \\*(BinaryObjectString/MemberReference/nullObject)) / (BinaryArray\\*(memberReference))) |\n\n42 / 55\n\n[MS-NRBF] - v20190313\n\n.NET Remoting: Binary Format Data Structure\n\nCopyright © 2019 Microsoft Corporation\n\nRelease: March 13, 2019\n\n",
      "images": [
      ],
      "charts": [
      ],
      "items": [
        {
          "type": "heading",
          "lvl": 1,
          "value": "1",
          "md": "# 1",
          "bBox": {
            "x": 89.15,
            "y": 58.05,
            "w": 410,
            "h": 19.9
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "RecordTypeEnum",
          "md": "# RecordTypeEnum",
          "bBox": {
            "x": 90.05,
            "y": 92.75,
            "w": 71,
            "h": 8
          }
        },
        {
          "type": "text",
          "value": "RecordTypeEnum (1 byte): A RecordTypeEnumeration value that identifies the record type. The value MUST be 11.",
          "md": "RecordTypeEnum (1 byte): A RecordTypeEnumeration value that identifies the record type. The value MUST be 11.",
          "bBox": {
            "x": 72.1,
            "y": 58.05,
            "w": 446.97,
            "h": 79.9
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "2.7 Binary Record Grammar",
          "md": "# 2.7 Binary Record Grammar",
          "bBox": {
            "x": 72.1,
            "y": 58.05,
            "w": 373.05,
            "h": 109.35
          }
        },
        {
          "type": "text",
          "value": "This section specifies the grammar using the Augmented Backus-Naur Form (ABNF) syntax specified in [RFC4234] that defines how the records can appear in the serialization stream.",
          "md": "This section specifies the grammar using the Augmented Backus-Naur Form (ABNF) syntax specified in [RFC4234] that defines how the records can appear in the serialization stream.",
          "bBox": {
            "x": 72.1,
            "y": 58.05,
            "w": 464.73,
            "h": 143.15
          }
        },
        {
          "type": "table",
          "rows": [
            [
              "ABNF productions",
              "Meaning"
            ],
            [
              "ABNF productions",
              "= SerializationHeader remotingMessage *(referenceable) (methodCall/methodReturn) *(referenceable) MessageEnd"
            ],
            [
              "methodCall",
              "= 0*1(BinaryLibrary) BinaryMethodCall 0*1(callArray)"
            ],
            [
              "methodReturn",
              "= 0*1(BinaryLibrary) BinaryMethodReturn 0*1(callArray)"
            ],
            [
              "callArray",
              "= 0*1(BinaryLibrary) ArraySingleObject *(memberReference)"
            ],
            [
              "memberReference",
              "= 0*1(BinaryLibrary) (MemberPrimitiveUnTyped / MemberPrimitiveTyped / MemberReference / BinaryObjectString / nullObject / Classes)"
            ],
            [
              "nullObject",
              "= ObjectNull / ObjectNullMultiple / ObjectNullMultiple256"
            ],
            [
              "referenceable",
              "= Classes/Arrays/BinaryObjectString"
            ],
            [
              "Classes",
              "= 0*1(BinaryLibrary) (ClassWithId / ClassWithMembers/ ClassWithMembersAndTypes / SystemClassWithMembers / SystemClassWithMembersAndTypes) *(memberReference)"
            ],
            [
              "Arrays",
              "= 0*1(BinaryLibrary) ((ArraySingleObject *(memberReference)) / (ArraySinglePrimitive *(MemberPrimitiveUnTyped)) / (ArraySingleString *(BinaryObjectString/MemberReference/nullObject)) / (BinaryArray*(memberReference)))"
            ]
          ],
          "md": "| ABNF productions | Meaning                                                                                                                                                                                                                        |\n| ---------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n| ABNF productions | = SerializationHeader remotingMessage \\*(referenceable) (methodCall/methodReturn) \\*(referenceable) MessageEnd                                                                                                                 |\n| methodCall       | = 0\\*1(BinaryLibrary) BinaryMethodCall 0\\*1(callArray)                                                                                                                                                                         |\n| methodReturn     | = 0\\*1(BinaryLibrary) BinaryMethodReturn 0\\*1(callArray)                                                                                                                                                                       |\n| callArray        | = 0\\*1(BinaryLibrary) ArraySingleObject \\*(memberReference)                                                                                                                                                                    |\n| memberReference  | = 0\\*1(BinaryLibrary) (MemberPrimitiveUnTyped / MemberPrimitiveTyped / MemberReference / BinaryObjectString / nullObject / Classes)                                                                                            |\n| nullObject       | = ObjectNull / ObjectNullMultiple / ObjectNullMultiple256                                                                                                                                                                      |\n| referenceable    | = Classes/Arrays/BinaryObjectString                                                                                                                                                                                            |\n| Classes          | = 0\\*1(BinaryLibrary) (ClassWithId / ClassWithMembers/ ClassWithMembersAndTypes / SystemClassWithMembers / SystemClassWithMembersAndTypes) \\*(memberReference)                                                                 |\n| Arrays           | = 0\\*1(BinaryLibrary) ((ArraySingleObject \\*(memberReference)) / (ArraySinglePrimitive \\*(MemberPrimitiveUnTyped)) / (ArraySingleString \\*(BinaryObjectString/MemberReference/nullObject)) / (BinaryArray\\*(memberReference))) |",
          "isPerfectTable": true,
          "csv": "\"ABNF productions\",\"Meaning\"\n\"ABNF productions\",\"= SerializationHeader remotingMessage *(referenceable) (methodCall/methodReturn) *(referenceable) MessageEnd\"\n\"methodCall\",\"= 0*1(BinaryLibrary) BinaryMethodCall 0*1(callArray)\"\n\"methodReturn\",\"= 0*1(BinaryLibrary) BinaryMethodReturn 0*1(callArray)\"\n\"callArray\",\"= 0*1(BinaryLibrary) ArraySingleObject *(memberReference)\"\n\"memberReference\",\"= 0*1(BinaryLibrary) (MemberPrimitiveUnTyped / MemberPrimitiveTyped / MemberReference / BinaryObjectString / nullObject / Classes)\"\n\"nullObject\",\"= ObjectNull / ObjectNullMultiple / ObjectNullMultiple256\"\n\"referenceable\",\"= Classes/Arrays/BinaryObjectString\"\n\"Classes\",\"= 0*1(BinaryLibrary) (ClassWithId / ClassWithMembers/ ClassWithMembersAndTypes / SystemClassWithMembers / SystemClassWithMembersAndTypes) *(memberReference)\"\n\"Arrays\",\"= 0*1(BinaryLibrary) ((ArraySingleObject *(memberReference)) / (ArraySinglePrimitive *(MemberPrimitiveUnTyped)) / (ArraySingleString *(BinaryObjectString/MemberReference/nullObject)) / (BinaryArray*(memberReference)))\"",
          "bBox": {
            "x": 77.85,
            "y": 218.35,
            "w": 419.4,
            "h": 442.8
          }
        },
        {
          "type": "text",
          "value": "42 / 55\n\n[MS-NRBF] - v20190313\n\n.NET Remoting: Binary Format Data Structure\n\nCopyright © 2019 Microsoft Corporation\n\nRelease: March 13, 2019",
          "md": "42 / 55\n\n[MS-NRBF] - v20190313\n\n.NET Remoting: Binary Format Data Structure\n\nCopyright © 2019 Microsoft Corporation\n\nRelease: March 13, 2019",
          "bBox": {
            "x": 72.1,
            "y": 58.05,
            "w": 467.9,
            "h": 696.1
          }
        }
      ],
      "status": "OK",
      "originalOrientationAngle": 0,
      "links": [
        {
          "url": "https://go.microsoft.com/fwlink/?LinkId=90462",
          "unsafeUrl": "https://go.microsoft.com/fwlink/?LinkId=90462",
          "text": "[RFC4234]"
        }
      ],
      "width": 612,
      "height": 792,
      "triggeredAutoMode": false,
      "parsingMode": "accurate",
      "structuredData": null,
      "noStructuredContent": false,
      "noTextContent": false,
      "pageHeaderMarkdown": "",
      "pageFooterMarkdown": "",
      "confidence": 0.916
    },
    {
      "page": 43,
      "text": "                                           43 / 55\n\n[MS-NRBF] - v20190313\n.NET Remoting: Binary Format Data Structure\nCopyright © 2019 Microsoft Corporation\nRelease: March 13, 2019",
      "md": "\n# .NET Remoting: Binary Format Data Structure\n\nCopyright © 2019 Microsoft Corporation\n\nRelease: March 13, 2019\n\n# 43 / 55\n\n",
      "images": [
      ],
      "charts": [
      ],
      "items": [
        {
          "type": "heading",
          "lvl": 1,
          "value": ".NET Remoting: Binary Format Data Structure",
          "md": "# .NET Remoting: Binary Format Data Structure",
          "bBox": {
            "x": 72.1,
            "y": 724.35,
            "w": 182.82,
            "h": 8
          }
        },
        {
          "type": "text",
          "value": "Copyright © 2019 Microsoft Corporation\n\nRelease: March 13, 2019",
          "md": "Copyright © 2019 Microsoft Corporation\n\nRelease: March 13, 2019",
          "bBox": {
            "x": 72.1,
            "y": 735.25,
            "w": 161.18,
            "h": 18.9
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "43 / 55",
          "md": "# 43 / 55",
          "bBox": {
            "x": 512.1,
            "y": 696.55,
            "w": 27.9,
            "h": 8
          }
        }
      ],
      "status": "OK",
      "originalOrientationAngle": 0,
      "links": [
      ],
      "width": 612,
      "height": 792,
      "triggeredAutoMode": false,
      "parsingMode": "accurate",
      "structuredData": null,
      "noStructuredContent": false,
      "noTextContent": false,
      "pageHeaderMarkdown": "\n# .NET Remoting: Binary Format Data Structure\n\nCopyright © 2019 Microsoft Corporation\n\nRelease: March 13, 2019\n\n",
      "pageFooterMarkdown": "\n",
      "confidence": 0.826
    },
    {
      "page": 44,
      "text": "3 Structure Examples\n\nThis sample illustrates the message exchanged when a Remote Method is invoked as specified in\n[MS-NRTP] section 3.3.4.2. The data model is used to describe the information to perform the Remote\nMethod invocation and the results of the invocation, as specified in [MS-NRTP] section 3.1.1.\n\nThe client invokes a method \"SendAddress\" on a remote Server Type\n\"DOJRemotingMetadata.MyServer\" and passes the following Address object (Street = \"One Microsoft\nWay\", City = \"Redmond\", State = \"WA\" and Zip = \"98054\") as an argument. The remote Server Type\nis accessible at a relative URI \"MyServer.Rem\" hosted on a server named \"maheshdev2\" and listening\non port 8080. The server receives the request message, reads the argument passed in the message,\nand then invokes the method with the de-serialized argument. The server then embeds the Return\nValue of \"Address received\" in the response message to the client.\n\nThe following is a sequence diagram for the preceding message exchange pattern.\n\n  Client                                                          DOJ\n                    RemotingMetadata:\n                    MyServer\n\n            ~SendAddress( Address)_\n\n            Address Recelved\n\n\nFigure 2: Sequence diagram of the message exchanged when a Remote Method is invoked\n\nThe MessageContent data sent on the network is as follows.\n\n 0000     00 01 00 00 00 FF FF FF FF 01 00 00 00 00 00 00 .....ÿÿÿÿ.......\n\n 0010     00 15 14 00 00 00 12 0B 53 65 6E 64 41 64 64 72 ........SendAddr\n\n 0020     65 73 73 12 6F 44 4F 4A 52 65 6D 6F 74 69 6E 67 ess.oDOJRemoting\n\n 0030     4D 65 74 61 64 61 74 61 2E 4D 79 53 65 72 76 65 Metadata.MyServe\n\n 0040     72 2C 20 44 4F 4A 52 65 6D 6F 74 69 6E 67 4D 65 r, DOJRemotingMe\n\n 0050     74 61 64 61 74 61 2C 20 56 65 72 73 69 6F 6E 3D tadata, Version=\n\n 0060     31 2E 30 2E 32 36 32 32 2E 33 31 33 32 36 2C 20 1.0.2622.31326,\n\n 0070     43 75 6C 74 75 72 65 3D 6E 65 75 74 72 61 6C 2C Culture=neutral,\n\n 0080     20 50 75 62 6C 69 63 4B 65 79 54 6F 6B 65 6E 3D PublicKeyToken=\n\n 0090     6E 75 6C 6C 10 01 00 00 00 01 00 00 00 09 02 00 null............\n\n 00A0     00 00 0C 03 00 00 00 51 44 4F 4A 52 65 6D 6F 74 .......QDOJRemot\n\n                                                                          44 / 55\n\n[MS-NRBF] - v20190313\n.NET Remoting: Binary Format Data Structure\nCopyright © 2019 Microsoft Corporation\nRelease: March 13, 2019",
      "md": "3 Structure Examples\n\nThis sample illustrates the message exchanged when a Remote Method is invoked as specified in [MS-NRTP] section 3.3.4.2. The data model is used to describe the information to perform the Remote Method invocation and the results of the invocation, as specified in [MS-NRTP] section 3.1.1.\n\nThe client invokes a method \"SendAddress\" on a remote Server Type \"DOJRemotingMetadata.MyServer\" and passes the following Address object (Street = \"One Microsoft Way\", City = \"Redmond\", State = \"WA\" and Zip = \"98054\") as an argument. The remote Server Type is accessible at a relative URI \"MyServer.Rem\" hosted on a server named \"maheshdev2\" and listening on port 8080. The server receives the request message, reads the argument passed in the message, and then invokes the method with the de-serialized argument. The server then embeds the Return Value of \"Address received\" in the response message to the client.\n\n# Figure 2: Sequence diagram of the message exchanged when a Remote Method is invoked\n\nThe following is a sequence diagram for the preceding message exchange pattern.\n\nClient                                                          DOJ\nRemotingMetadata:\nMyServer\n\n~SendAddress( Address)_\n\nAddress Received\n\nThe MessageContent data sent on the network is as follows.\n\n0000     00 01 00 00 00 FF FF FF FF 01 00 00 00 00 00 00 .....ÿÿÿÿ.......\n\n0010     00 15 14 00 00 00 12 0B 53 65 6E 64 41 64 64 72 ........SendAddr\n\n0020     65 73 73 12 6F 44 4F 4A 52 65 6D 6F 74 69 6E 67 ess.oDOJRemoting\n\n0030     4D 65 74 61 64 61 74 61 2E 4D 79 53 65 72 76 65 Metadata.MyServe\n\n0040     72 2C 20 44 4F 4A 52 65 6D 6F 74 69 6E 67 4D 65 r, DOJRemotingMe\n\n0050     74 61 64 61 74 61 2C 20 56 65 72 73 69 6F 6E 3D tadata, Version=\n\n0060     31 2E 30 2E 32 36 32 32 2E 33 31 33 32 36 2C 20 1.0.2622.31326,\n\n0070     43 75 6C 74 75 72 65 3D 6E 65 75 74 72 61 6C 2C Culture=neutral,\n\n0080     20 50 75 62 6C 69 63 4B 65 79 54 6F 6B 65 6E 3D PublicKeyToken=\n\n0090     6E 75 6C 6C 10 01 00 00 00 01 00 00 00 09 02 00 null............\n\n00A0     00 00 0C 03 00 00 00 51 44 4F 4A 52 65 6D 6F 74 .......QDOJRemot\n\n44 / 55\n[MS-NRBF] - v20190313\n\n.NET Remoting: Binary Format Data Structure\n\nCopyright © 2019 Microsoft Corporation\n\nRelease: March 13, 2019",
      "images": [
        {
          "name": "img_p43_1.png",
          "height": 201,
          "width": 445,
          "x": 72,
          "y": 248.64999999999998,
          "original_width": 445,
          "original_height": 201,
          "ocr": [
            {
              "x": 355,
              "y": 5,
              "w": 30,
              "h": 16,
              "confidence": 0.8929390902458538,
              "text": "DOJ"
            },
            {
              "x": 23,
              "y": 21,
              "w": 42,
              "h": 16,
              "confidence": 0.9998707741827841,
              "text": "Client"
            },
            {
              "x": 303,
              "y": 21,
              "w": 134,
              "h": 16,
              "confidence": 0.7270107584895229,
              "text": "RemotingMetadata:"
            },
            {
              "x": 337,
              "y": 37,
              "w": 66,
              "h": 16,
              "confidence": 0.999849278164727,
              "text": "MyServer"
            },
            {
              "x": 141,
              "y": 79,
              "w": 129,
              "h": 26,
              "confidence": 0.5721595671858725,
              "text": "~SendAddress( Address)_"
            },
            {
              "x": 157,
              "y": 130,
              "w": 98,
              "h": 19,
              "confidence": 0.9956885036750363,
              "text": "Address Recelved"
            }
          ]
        }
      ],
      "charts": [
      ],
      "items": [
        {
          "type": "text",
          "value": "3 Structure Examples\n\nThis sample illustrates the message exchanged when a Remote Method is invoked as specified in [MS-NRTP] section 3.3.4.2. The data model is used to describe the information to perform the Remote Method invocation and the results of the invocation, as specified in [MS-NRTP] section 3.1.1.\n\nThe client invokes a method \"SendAddress\" on a remote Server Type \"DOJRemotingMetadata.MyServer\" and passes the following Address object (Street = \"One Microsoft Way\", City = \"Redmond\", State = \"WA\" and Zip = \"98054\") as an argument. The remote Server Type is accessible at a relative URI \"MyServer.Rem\" hosted on a server named \"maheshdev2\" and listening on port 8080. The server receives the request message, reads the argument passed in the message, and then invokes the method with the de-serialized argument. The server then embeds the Return Value of \"Address received\" in the response message to the client.",
          "md": "3 Structure Examples\n\nThis sample illustrates the message exchanged when a Remote Method is invoked as specified in [MS-NRTP] section 3.3.4.2. The data model is used to describe the information to perform the Remote Method invocation and the results of the invocation, as specified in [MS-NRTP] section 3.1.1.\n\nThe client invokes a method \"SendAddress\" on a remote Server Type \"DOJRemotingMetadata.MyServer\" and passes the following Address object (Street = \"One Microsoft Way\", City = \"Redmond\", State = \"WA\" and Zip = \"98054\") as an argument. The remote Server Type is accessible at a relative URI \"MyServer.Rem\" hosted on a server named \"maheshdev2\" and listening on port 8080. The server receives the request message, reads the argument passed in the message, and then invokes the method with the de-serialized argument. The server then embeds the Return Value of \"Address received\" in the response message to the client.",
          "bBox": {
            "x": 72.1,
            "y": 62.55,
            "w": 460.51,
            "h": 233.45
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "Figure 2: Sequence diagram of the message exchanged when a Remote Method is invoked",
          "md": "# Figure 2: Sequence diagram of the message exchanged when a Remote Method is invoked",
          "bBox": {
            "x": 72.1,
            "y": 438.85,
            "w": 460.22,
            "h": 9
          }
        },
        {
          "type": "text",
          "value": "The following is a sequence diagram for the preceding message exchange pattern.\n\nClient                                                          DOJ\nRemotingMetadata:\nMyServer\n\n~SendAddress( Address)_\n\nAddress Received\n\nThe MessageContent data sent on the network is as follows.\n\n0000     00 01 00 00 00 FF FF FF FF 01 00 00 00 00 00 00 .....ÿÿÿÿ.......\n\n0010     00 15 14 00 00 00 12 0B 53 65 6E 64 41 64 64 72 ........SendAddr\n\n0020     65 73 73 12 6F 44 4F 4A 52 65 6D 6F 74 69 6E 67 ess.oDOJRemoting\n\n0030     4D 65 74 61 64 61 74 61 2E 4D 79 53 65 72 76 65 Metadata.MyServe\n\n0040     72 2C 20 44 4F 4A 52 65 6D 6F 74 69 6E 67 4D 65 r, DOJRemotingMe\n\n0050     74 61 64 61 74 61 2C 20 56 65 72 73 69 6F 6E 3D tadata, Version=\n\n0060     31 2E 30 2E 32 36 32 32 2E 33 31 33 32 36 2C 20 1.0.2622.31326,\n\n0070     43 75 6C 74 75 72 65 3D 6E 65 75 74 72 61 6C 2C Culture=neutral,\n\n0080     20 50 75 62 6C 69 63 4B 65 79 54 6F 6B 65 6E 3D PublicKeyToken=\n\n0090     6E 75 6C 6C 10 01 00 00 00 01 00 00 00 09 02 00 null............\n\n00A0     00 00 0C 03 00 00 00 51 44 4F 4A 52 65 6D 6F 74 .......QDOJRemot\n\n44 / 55\n[MS-NRBF] - v20190313\n\n.NET Remoting: Binary Format Data Structure\n\nCopyright © 2019 Microsoft Corporation\n\nRelease: March 13, 2019",
          "md": "The following is a sequence diagram for the preceding message exchange pattern.\n\nClient                                                          DOJ\nRemotingMetadata:\nMyServer\n\n~SendAddress( Address)_\n\nAddress Received\n\nThe MessageContent data sent on the network is as follows.\n\n0000     00 01 00 00 00 FF FF FF FF 01 00 00 00 00 00 00 .....ÿÿÿÿ.......\n\n0010     00 15 14 00 00 00 12 0B 53 65 6E 64 41 64 64 72 ........SendAddr\n\n0020     65 73 73 12 6F 44 4F 4A 52 65 6D 6F 74 69 6E 67 ess.oDOJRemoting\n\n0030     4D 65 74 61 64 61 74 61 2E 4D 79 53 65 72 76 65 Metadata.MyServe\n\n0040     72 2C 20 44 4F 4A 52 65 6D 6F 74 69 6E 67 4D 65 r, DOJRemotingMe\n\n0050     74 61 64 61 74 61 2C 20 56 65 72 73 69 6F 6E 3D tadata, Version=\n\n0060     31 2E 30 2E 32 36 32 32 2E 33 31 33 32 36 2C 20 1.0.2622.31326,\n\n0070     43 75 6C 74 75 72 65 3D 6E 65 75 74 72 61 6C 2C Culture=neutral,\n\n0080     20 50 75 62 6C 69 63 4B 65 79 54 6F 6B 65 6E 3D PublicKeyToken=\n\n0090     6E 75 6C 6C 10 01 00 00 00 01 00 00 00 09 02 00 null............\n\n00A0     00 00 0C 03 00 00 00 51 44 4F 4A 52 65 6D 6F 74 .......QDOJRemot\n\n44 / 55\n[MS-NRBF] - v20190313\n\n.NET Remoting: Binary Format Data Structure\n\nCopyright © 2019 Microsoft Corporation\n\nRelease: March 13, 2019",
          "bBox": {
            "x": 72.1,
            "y": 62.55,
            "w": 467.9,
            "h": 691.6
          }
        }
      ],
      "status": "OK",
      "originalOrientationAngle": 0,
      "links": [
        {
          "unsafeUrl": "../../../../../../../upload/%5BMS-NRTP%5D.pdf#Section_3acb31b0b8734aaf85039727ec40fbec",
          "text": "[MS-NRTP]"
        }
      ],
      "width": 612,
      "height": 792,
      "triggeredAutoMode": false,
      "parsingMode": "accurate",
      "structuredData": null,
      "noStructuredContent": false,
      "noTextContent": false,
      "pageHeaderMarkdown": "3 Structure Examples",
      "pageFooterMarkdown": "44 / 55",
      "confidence": 0.998
    },
    {
      "page": 45,
      "text": "00B0     69 6E 67 4D 65 74 61 64 61 74 61 2C 20 56 65 72 ingMetadata, Ver\n\n00C0     73 69 6F 6E 3D 31 2E 30 2E 32 36 32 32 2E 33 31 sion=1.0.2622.31\n\n00D0     33 32 36 2C 20 43 75 6C 74 75 72 65 3D 6E 65 75 326, Culture=neu\n\n00E0     74 72 61 6C 2C 20 50 75 62 6C 69 63 4B 65 79 54 tral, PublicKeyT\n\n00F0     6F 6B 65 6E 3D 6E 75 6C 6C 05 02 00 00 00 1B 44 oken=null......D\n\n0100     4F 4A 52 65 6D 6F 74 69 6E 67 4D 65 74 61 64 61 OJRemotingMetada\n\n0110     74 61 2E 41 64 64 72 65 73 73 04 00 00 00 06 53 ta.Address.....S\n\n0120     74 72 65 65 74 04 43 69 74 79 05 53 74 61 74 65 treet.City.State\n\n0130     03 5A 69 70 01 01 01 01 03 00 00 00 06 04 00 00 .Zip............\n\n0140     00 11 4F 6E 65 20 4D 69 63 72 6F 73 6F 66 74 20 ..One Microsoft\n\n0150     57 61 79 06 05 00 00 00 07 52 65 64 6D 6F 6E 64 Way......Redmond\n\n0160     06 06 00 00 00 02 57 41 06 07 00 00 00 05 39 38 ......WA......98\n\n0170     30 35 34 0B    054.\n\n\nReferencing section 2 for various message structures, the bytes listed in the preceding sample can be\nmapped to the logical Request message structure that is used by .NET Remoting to service the\nrequest. The logical Request message for Microsoft .NET Framework 1.1 is as follows.\n\n\nBinary Serialization   Format\n\n SerializationHeaderRecord:\n\n  RecordTypeEnum:      SerializedStreamHeader (0x00)\n\n  TopId: 1 (0x1)\n\n  HeaderId: -1 (0xFFFFFFFF)\n\n  MajorVersion: 1 (0x1)\n\n  MinorVersion: 0 (0x0)\n\n BinaryMethodCall:\n\n  RecordTypeEnum:      BinaryMethodCall (0x21)\n\n  MessageEnum: 00000014\n\n   NoArgs:                            (...............................0)\n\n   ArgsInline:                        (..............................0.)\n\n   ArgsIsArray:                       (.............................1..)\n\n   ArgsInArray:                       (............................0...)\n\n   NoContext:                         (...........................1....)\n\n   ContextInline:                     (..........................0.....)\n\n   ContextInArray:                    (.........................0......)\n\n                                                                        45 / 55\n\n[MS-NRBF] - v20190313\n.NET Remoting: Binary Format Data Structure\nCopyright © 2019 Microsoft Corporation\nRelease: March 13, 2019",
      "md": "\nReferencing section 2 for various message structures, the bytes listed in the preceding sample can be mapped to the logical Request message structure that is used by .NET Remoting to service the request. The logical Request message for Microsoft .NET Framework 1.1 is as follows.\n\n# Binary Serialization Format\n\n# SerializationHeaderRecord:\n\n- RecordTypeEnum: SerializedStreamHeader (0x00)\n- TopId: 1 (0x1)\n- HeaderId: -1 (0xFFFFFFFF)\n- MajorVersion: 1 (0x1)\n- MinorVersion: 0 (0x0)\n\n# BinaryMethodCall:\n\n- RecordTypeEnum: BinaryMethodCall (0x21)\n- MessageEnum: 00000014\n- NoArgs: (...............................0)\n- ArgsInline: (..............................0.)\n- ArgsIsArray: (.............................1..)\n- ArgsInArray: (............................0...)\n- NoContext: (...........................1....)\n- ContextInline: (..........................0.....)\n- ContextInArray: (.........................0......)\n\n45 / 55\n\n[MS-NRBF] - v20190313\n\n.NET Remoting: Binary Format Data Structure\n\nCopyright © 2019 Microsoft Corporation\n\nRelease: March 13, 2019\n\n",
      "images": [
      ],
      "charts": [
      ],
      "items": [
        {
          "type": "text",
          "value": "Referencing section 2 for various message structures, the bytes listed in the preceding sample can be mapped to the logical Request message structure that is used by .NET Remoting to service the request. The logical Request message for Microsoft .NET Framework 1.1 is as follows.",
          "md": "Referencing section 2 for various message structures, the bytes listed in the preceding sample can be mapped to the logical Request message structure that is used by .NET Remoting to service the request. The logical Request message for Microsoft .NET Framework 1.1 is as follows.",
          "bBox": {
            "x": 72.1,
            "y": 220.1,
            "w": 461.27,
            "h": 133.35
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "Binary Serialization Format",
          "md": "# Binary Serialization Format",
          "bBox": {
            "x": 90.8,
            "y": 387.3,
            "w": 129.8,
            "h": 8
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "SerializationHeaderRecord:",
          "md": "# SerializationHeaderRecord:",
          "bBox": {
            "x": 100.4,
            "y": 404.35,
            "w": 125,
            "h": 8
          }
        },
        {
          "type": "text",
          "value": "- RecordTypeEnum: SerializedStreamHeader (0x00)\n- TopId: 1 (0x1)\n- HeaderId: -1 (0xFFFFFFFF)\n- MajorVersion: 1 (0x1)\n- MinorVersion: 0 (0x0)",
          "md": "- RecordTypeEnum: SerializedStreamHeader (0x00)\n- TopId: 1 (0x1)\n- HeaderId: -1 (0xFFFFFFFF)\n- MajorVersion: 1 (0x1)\n- MinorVersion: 0 (0x0)",
          "bBox": {
            "x": 119.6,
            "y": 421.4,
            "w": 216.2,
            "h": 110.3
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "BinaryMethodCall:",
          "md": "# BinaryMethodCall:",
          "bBox": {
            "x": 100.4,
            "y": 506.65,
            "w": 82,
            "h": 8
          }
        },
        {
          "type": "text",
          "value": "- RecordTypeEnum: BinaryMethodCall (0x21)\n- MessageEnum: 00000014\n- NoArgs: (...............................0)\n- ArgsInline: (..............................0.)\n- ArgsIsArray: (.............................1..)\n- ArgsInArray: (............................0...)\n- NoContext: (...........................1....)\n- ContextInline: (..........................0.....)\n- ContextInArray: (.........................0......)\n\n45 / 55\n\n[MS-NRBF] - v20190313\n\n.NET Remoting: Binary Format Data Structure\n\nCopyright © 2019 Microsoft Corporation\n\nRelease: March 13, 2019",
          "md": "- RecordTypeEnum: BinaryMethodCall (0x21)\n- MessageEnum: 00000014\n- NoArgs: (...............................0)\n- ArgsInline: (..............................0.)\n- ArgsIsArray: (.............................1..)\n- ArgsInArray: (............................0...)\n- NoContext: (...........................1....)\n- ContextInline: (..........................0.....)\n- ContextInArray: (.........................0......)\n\n45 / 55\n\n[MS-NRBF] - v20190313\n\n.NET Remoting: Binary Format Data Structure\n\nCopyright © 2019 Microsoft Corporation\n\nRelease: March 13, 2019",
          "bBox": {
            "x": 72.1,
            "y": 220.1,
            "w": 467.9,
            "h": 534.05
          }
        }
      ],
      "status": "OK",
      "originalOrientationAngle": 0,
      "links": [
      ],
      "width": 612,
      "height": 792,
      "triggeredAutoMode": false,
      "parsingMode": "accurate",
      "structuredData": null,
      "noStructuredContent": false,
      "noTextContent": false,
      "pageHeaderMarkdown": "",
      "pageFooterMarkdown": "",
      "confidence": 0.449
    },
    {
      "page": 46,
      "text": "  MethodSignatureInArray:             (........................0.......)\n\n  PropertyInArray:                    (.......................0........)\n\n  NoReturnValue:                      (......................0.........)\n\n  ReturnValueVoid:                    (.....................0..........)\n\n  ReturnValueInline:                  (....................0...........)\n\n  ReturnValueInArray:                 (...................0............)\n\n  ExceptionInArray:                   (..................0.............)\n\n  Reserved:                           (000000000000000000..............)\n\n MethodName:\n\n  PrimitiveTypeEnum:     String (0x12)\n\n  Data:   SendAddress\n\n TypeName:\n\n  PrimitiveTypeEnum:     String (0x12)\n\n  Data:   DOJRemotingMetadata.MyServer,          DOJRemotingMetadata,\n\n   Version=1.0.2616.21414,                 Culture=neutral,\n\n   PublicKeyToken=null\n\nCallArray:\n\n ArraySingleObject:\n\n   RecordTypeEnum:      ArraySingleObject (0x10)\n\n   ObjectId:           1 (0x01)\n\n   Length: 1 (0x1)\n\n MemberReference:\n\n   RecordTypeEnum:      MemberReference    (0x09)\n\n   IdRef: 2 (0x02)\n\n BinaryLibrary:\n\n   RecordTypeEnum:      BinaryLibrary      (0x0C)\n\n   LibraryId:          3 (0x03)\n\n   LibraryString:      LibrayString:DOJRemotingMetadata,\n\n          Version=1.0.2621.26113,          Culture=neutral,\n\n          PublicKeyToken=null\n\n ClassWithMembersAndTypes:\n\n   RecordTypeEnum:      ClassWithMembersAndTypes           (0x05)\n\n   ObjectId:           2 (0x02)\n\n   Name:               DOJRemotingMetadata.MyData\n\n   NumMembers: 4 (0x04)\n\n                                                                        46 / 55\n\n[MS-NRBF] - v20190313\n.NET Remoting: Binary Format Data Structure\nCopyright © 2019 Microsoft Corporation\nRelease: March 13, 2019",
      "md": "\n# [MS-NRBF] - v20190313\n\n# .NET Remoting: Binary Format Data Structure\n\n# Copyright © 2019 Microsoft Corporation\n\n# Release: March 13, 2019\n\n# Method Signature\n\n| MethodSignatureInArray | (........................0.......) |\n| ---------------------- | ---------------------------------- |\n| PropertyInArray        | (.......................0........) |\n| NoReturnValue          | (......................0.........) |\n| ReturnValueVoid        | (.....................0..........) |\n| ReturnValueInline      | (....................0...........) |\n| ReturnValueInArray     | (...................0............) |\n| ExceptionInArray       | (..................0.............) |\n| Reserved               | (000000000000000000..............) |\n\n# Method Name\n\n| PrimitiveTypeEnum | String (0x12) |\n| ----------------- | ------------- |\n| Data              | SendAddress   |\n\n# Type Name\n\n| PrimitiveTypeEnum | String (0x12)                                                                                                   |\n| ----------------- | --------------------------------------------------------------------------------------------------------------- |\n| Data              | DOJRemotingMetadata.MyServer, DOJRemotingMetadata, Version=1.0.2616.21414, Culture=neutral, PublicKeyToken=null |\n\n# Call Array\n\n# Array Single Object\n\n| RecordTypeEnum | ArraySingleObject (0x10) |\n| -------------- | ------------------------ |\n| ObjectId       | 1 (0x01)                 |\n| Length         | 1 (0x1)                  |\n\n# Member Reference\n\n| RecordTypeEnum | MemberReference (0x09) |\n| -------------- | ---------------------- |\n| IdRef          | 2 (0x02)               |\n\n# Binary Library\n\n| RecordTypeEnum | BinaryLibrary (0x0C)                                                                           |\n| -------------- | ---------------------------------------------------------------------------------------------- |\n| LibraryId      | 3 (0x03)                                                                                       |\n| LibraryString  | LibrayString:DOJRemotingMetadata, Version=1.0.2621.26113, Culture=neutral, PublicKeyToken=null |\n\n# Class With Members And Types\n\n| RecordTypeEnum | ClassWithMembersAndTypes (0x05) |\n| -------------- | ------------------------------- |\n| ObjectId       | 2 (0x02)                        |\n| Name           | DOJRemotingMetadata.MyData      |\n| NumMembers     | 4 (0x04)                        |\n\n46 / 55\n\n",
      "images": [
      ],
      "charts": [
      ],
      "items": [
        {
          "type": "heading",
          "lvl": 1,
          "value": "[MS-NRBF] - v20190313",
          "md": "# [MS-NRBF] - v20190313",
          "bBox": {
            "x": 72.1,
            "y": 713.45,
            "w": 95.66,
            "h": 8
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": ".NET Remoting: Binary Format Data Structure",
          "md": "# .NET Remoting: Binary Format Data Structure",
          "bBox": {
            "x": 72.1,
            "y": 724.35,
            "w": 182.82,
            "h": 8
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "Copyright © 2019 Microsoft Corporation",
          "md": "# Copyright © 2019 Microsoft Corporation",
          "bBox": {
            "x": 72.1,
            "y": 735.25,
            "w": 161.18,
            "h": 8
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "Release: March 13, 2019",
          "md": "# Release: March 13, 2019",
          "bBox": {
            "x": 72.1,
            "y": 746.15,
            "w": 99.12,
            "h": 8
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "Method Signature",
          "md": "# Method Signature",
          "bBox": {
            "x": 0,
            "y": 0,
            "w": 612,
            "h": 792
          }
        },
        {
          "type": "table",
          "rows": [
            [
              "MethodSignatureInArray",
              "(........................0.......)"
            ],
            [
              "PropertyInArray",
              "(.......................0........)"
            ],
            [
              "NoReturnValue",
              "(......................0.........)"
            ],
            [
              "ReturnValueVoid",
              "(.....................0..........)"
            ],
            [
              "ReturnValueInline",
              "(....................0...........)"
            ],
            [
              "ReturnValueInArray",
              "(...................0............)"
            ],
            [
              "ExceptionInArray",
              "(..................0.............)"
            ],
            [
              "Reserved",
              "(000000000000000000..............)"
            ]
          ],
          "md": "| MethodSignatureInArray | (........................0.......) |\n| ---------------------- | ---------------------------------- |\n| PropertyInArray        | (.......................0........) |\n| NoReturnValue          | (......................0.........) |\n| ReturnValueVoid        | (.....................0..........) |\n| ReturnValueInline      | (....................0...........) |\n| ReturnValueInArray     | (...................0............) |\n| ExceptionInArray       | (..................0.............) |\n| Reserved               | (000000000000000000..............) |",
          "isPerfectTable": true,
          "csv": "\"MethodSignatureInArray\",\"(........................0.......)\"\n\"PropertyInArray\",\"(.......................0........)\"\n\"NoReturnValue\",\"(......................0.........)\"\n\"ReturnValueVoid\",\"(.....................0..........)\"\n\"ReturnValueInline\",\"(....................0...........)\"\n\"ReturnValueInArray\",\"(...................0............)\"\n\"ExceptionInArray\",\"(..................0.............)\"\n\"Reserved\",\"(000000000000000000..............)\"",
          "bBox": {
            "x": 138.8,
            "y": 66.65,
            "w": 278.2,
            "h": 127.35
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "Method Name",
          "md": "# Method Name",
          "bBox": {
            "x": 0,
            "y": 0,
            "w": 612,
            "h": 792
          }
        },
        {
          "type": "table",
          "rows": [
            [
              "PrimitiveTypeEnum",
              "String (0x12)"
            ],
            [
              "Data",
              "SendAddress"
            ]
          ],
          "md": "| PrimitiveTypeEnum | String (0x12) |\n| ----------------- | ------------- |\n| Data              | SendAddress   |",
          "isPerfectTable": true,
          "csv": "\"PrimitiveTypeEnum\",\"String (0x12)\"\n\"Data\",\"SendAddress\"",
          "bBox": {
            "x": 72.1,
            "y": 220.1,
            "w": 335.5,
            "h": 512.25
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "Type Name",
          "md": "# Type Name",
          "bBox": {
            "x": 0,
            "y": 0,
            "w": 612,
            "h": 792
          }
        },
        {
          "type": "table",
          "rows": [
            [
              "PrimitiveTypeEnum",
              "String (0x12)"
            ],
            [
              "Data",
              "DOJRemotingMetadata.MyServer, DOJRemotingMetadata, Version=1.0.2616.21414, Culture=neutral, PublicKeyToken=null"
            ]
          ],
          "md": "| PrimitiveTypeEnum | String (0x12)                                                                                                   |\n| ----------------- | --------------------------------------------------------------------------------------------------------------- |\n| Data              | DOJRemotingMetadata.MyServer, DOJRemotingMetadata, Version=1.0.2616.21414, Culture=neutral, PublicKeyToken=null |",
          "isPerfectTable": true,
          "csv": "\"PrimitiveTypeEnum\",\"String (0x12)\"\n\"Data\",\"DOJRemotingMetadata.MyServer, DOJRemotingMetadata, Version=1.0.2616.21414, Culture=neutral, PublicKeyToken=null\"",
          "bBox": {
            "x": 72.1,
            "y": 220.1,
            "w": 335.5,
            "h": 512.25
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "Call Array",
          "md": "# Call Array",
          "bBox": {
            "x": 0,
            "y": 0,
            "w": 612,
            "h": 792
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "Array Single Object",
          "md": "# Array Single Object",
          "bBox": {
            "x": 0,
            "y": 0,
            "w": 612,
            "h": 792
          }
        },
        {
          "type": "table",
          "rows": [
            [
              "RecordTypeEnum",
              "ArraySingleObject (0x10)"
            ],
            [
              "ObjectId",
              "1 (0x01)"
            ],
            [
              "Length",
              "1 (0x1)"
            ]
          ],
          "md": "| RecordTypeEnum | ArraySingleObject (0x10) |\n| -------------- | ------------------------ |\n| ObjectId       | 1 (0x01)                 |\n| Length         | 1 (0x1)                  |",
          "isPerfectTable": true,
          "csv": "\"RecordTypeEnum\",\"ArraySingleObject (0x10)\"\n\"ObjectId\",\"1 (0x01)\"\n\"Length\",\"1 (0x1)\"",
          "bBox": {
            "x": 148.4,
            "y": 390.6,
            "w": 192.2,
            "h": 246.7
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "Member Reference",
          "md": "# Member Reference",
          "bBox": {
            "x": 225.2,
            "y": 458.8,
            "w": 72,
            "h": 8
          }
        },
        {
          "type": "table",
          "rows": [
            [
              "RecordTypeEnum",
              "MemberReference (0x09)"
            ],
            [
              "IdRef",
              "2 (0x02)"
            ]
          ],
          "md": "| RecordTypeEnum | MemberReference (0x09) |\n| -------------- | ---------------------- |\n| IdRef          | 2 (0x02)               |",
          "isPerfectTable": true,
          "csv": "\"RecordTypeEnum\",\"MemberReference (0x09)\"\n\"IdRef\",\"2 (0x02)\"",
          "bBox": {
            "x": 148.4,
            "y": 390.6,
            "w": 86.6,
            "h": 246.7
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "Binary Library",
          "md": "# Binary Library",
          "bBox": {
            "x": 225.2,
            "y": 509.95,
            "w": 62,
            "h": 8
          }
        },
        {
          "type": "table",
          "rows": [
            [
              "RecordTypeEnum",
              "BinaryLibrary (0x0C)"
            ],
            [
              "LibraryId",
              "3 (0x03)"
            ],
            [
              "LibraryString",
              "LibrayString:DOJRemotingMetadata, Version=1.0.2621.26113, Culture=neutral, PublicKeyToken=null"
            ]
          ],
          "md": "| RecordTypeEnum | BinaryLibrary (0x0C)                                                                           |\n| -------------- | ---------------------------------------------------------------------------------------------- |\n| LibraryId      | 3 (0x03)                                                                                       |\n| LibraryString  | LibrayString:DOJRemotingMetadata, Version=1.0.2621.26113, Culture=neutral, PublicKeyToken=null |",
          "isPerfectTable": true,
          "csv": "\"RecordTypeEnum\",\"BinaryLibrary (0x0C)\"\n\"LibraryId\",\"3 (0x03)\"\n\"LibraryString\",\"LibrayString:DOJRemotingMetadata, Version=1.0.2621.26113, Culture=neutral, PublicKeyToken=null\"",
          "bBox": {
            "x": 148.4,
            "y": 390.6,
            "w": 91.4,
            "h": 229.65
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "Class With Members And Types",
          "md": "# Class With Members And Types",
          "bBox": {
            "x": 225.2,
            "y": 612.25,
            "w": 115,
            "h": 8
          }
        },
        {
          "type": "table",
          "rows": [
            [
              "RecordTypeEnum",
              "ClassWithMembersAndTypes (0x05)"
            ],
            [
              "ObjectId",
              "2 (0x02)"
            ],
            [
              "Name",
              "DOJRemotingMetadata.MyData"
            ],
            [
              "NumMembers",
              "4 (0x04)"
            ]
          ],
          "md": "| RecordTypeEnum | ClassWithMembersAndTypes (0x05) |\n| -------------- | ------------------------------- |\n| ObjectId       | 2 (0x02)                        |\n| Name           | DOJRemotingMetadata.MyData      |\n| NumMembers     | 4 (0x04)                        |",
          "isPerfectTable": true,
          "csv": "\"RecordTypeEnum\",\"ClassWithMembersAndTypes (0x05)\"\n\"ObjectId\",\"2 (0x02)\"\n\"Name\",\"DOJRemotingMetadata.MyData\"\n\"NumMembers\",\"4 (0x04)\"",
          "bBox": {
            "x": 119.6,
            "y": 203.05,
            "w": 182.6,
            "h": 468.35
          }
        },
        {
          "type": "text",
          "value": "46 / 55",
          "md": "46 / 55",
          "bBox": {
            "x": 512.1,
            "y": 696.55,
            "w": 27.9,
            "h": 8
          }
        }
      ],
      "status": "OK",
      "originalOrientationAngle": 0,
      "links": [
      ],
      "width": 612,
      "height": 792,
      "triggeredAutoMode": false,
      "parsingMode": "accurate",
      "structuredData": null,
      "noStructuredContent": false,
      "noTextContent": false,
      "pageHeaderMarkdown": "\n# [MS-NRBF] - v20190313\n\n# .NET Remoting: Binary Format Data Structure\n\n# Copyright © 2019 Microsoft Corporation\n\n# Release: March 13, 2019\n\n",
      "pageFooterMarkdown": "\n46 / 55\n\n",
      "confidence": 0.914
    },
    {
      "page": 47,
      "text": "                       MemberNames:\n\n                       Data:          Street\n\n                       MemberNames:\n\n                       Data:          City\n\n                       MemberNames:\n\n                       Data:          State\n\n                       MemberNames:\n\n                       Data:          Zip\n\n  BinaryTypeEnumA:\n\n                       String  (0x01)\n\n                       String  (0x01)\n\n                       String  (0x01)\n\n                       String  (0x01)\n\n  LibraryId:           3 (0x03)\n\n BinaryObjectString:\n\n  RecordTypeEnum:              BinaryObjectString  (0x06)\n\n  ObjectId:            04 (0x04)\n\n  Length: 17 (0x11)\n\n  Value: One           Microsoft         Way\n\n BinaryObjectString:\n\n  RecordTypeEnum:              BinaryObjectString  (0x06)\n\n  ObjectId:            05 (0x04)\n\n  Length: 7 (0x07)\n\n  Value: Redmond\n\n BinaryObjectString:\n\n  RecordTypeEnum:              BinaryObjectString  (0x06)\n\n  ObjectId:            06 (0x04)\n\n  Length: 2 (0x02)\n\n  Value: WA\n\n BinaryObjectString:\n\n  RecordTypeEnum:              BinaryObjectString  (0x06)\n\n  ObjectId:            07 (0x04)\n\n  Length: 5 (0x05)\n\n  Value: 98054\n\nMessageEnd:\n\n  RecordTypeEnum:              MessageEnd   (0x11)\n\n                                                         47 / 55\n\n[MS-NRBF] - v20190313\n.NET Remoting: Binary Format Data Structure\nCopyright © 2019 Microsoft Corporation\nRelease: March 13, 2019",
      "md": "\n# [MS-NRBF] - v20190313\n\n# .NET Remoting: Binary Format Data Structure\n\nCopyright © 2019 Microsoft Corporation\n\nRelease: March 13, 2019\n\n# MemberNames:\n\n| Data: | Street |\n| ----- | ------ |\n| Data: | City   |\n| Data: | State  |\n| Data: | Zip    |\n\n# BinaryTypeEnumA:\n\n| String | (0x01) |\n| ------ | ------ |\n| String | (0x01) |\n| String | (0x01) |\n| String | (0x01) |\n\n# LibraryId:\n\n3 (0x03)\n\n# BinaryObjectString:\n\n| RecordTypeEnum: | BinaryObjectString (0x06) |\n| --------------- | ------------------------- |\n| ObjectId:       | 04 (0x04)                 |\n| Length:         | 17 (0x11)                 |\n| Value:          | One Microsoft Way         |\n\n# BinaryObjectString:\n\n| RecordTypeEnum: | BinaryObjectString (0x06) |\n| --------------- | ------------------------- |\n| ObjectId:       | 05 (0x04)                 |\n| Length:         | 7 (0x07)                  |\n| Value:          | Redmond                   |\n\n# BinaryObjectString:\n\n| RecordTypeEnum: | BinaryObjectString (0x06) |\n| --------------- | ------------------------- |\n| ObjectId:       | 06 (0x04)                 |\n| Length:         | 2 (0x02)                  |\n| Value:          | WA                        |\n\n# BinaryObjectString:\n\n| RecordTypeEnum: | BinaryObjectString (0x06) |\n| --------------- | ------------------------- |\n| ObjectId:       | 07 (0x04)                 |\n| Length:         | 5 (0x05)                  |\n| Value:          | 98054                     |\n\n# MessageEnd:\n\n| RecordTypeEnum: | MessageEnd (0x11) |\n| --------------- | ----------------- |\n\n47 / 55\n\n",
      "images": [
      ],
      "charts": [
      ],
      "items": [
        {
          "type": "heading",
          "lvl": 1,
          "value": "[MS-NRBF] - v20190313",
          "md": "# [MS-NRBF] - v20190313",
          "bBox": {
            "x": 72.1,
            "y": 713.45,
            "w": 95.66,
            "h": 8
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": ".NET Remoting: Binary Format Data Structure",
          "md": "# .NET Remoting: Binary Format Data Structure",
          "bBox": {
            "x": 72.1,
            "y": 724.35,
            "w": 182.82,
            "h": 8
          }
        },
        {
          "type": "text",
          "value": "Copyright © 2019 Microsoft Corporation\n\nRelease: March 13, 2019",
          "md": "Copyright © 2019 Microsoft Corporation\n\nRelease: March 13, 2019",
          "bBox": {
            "x": 72.1,
            "y": 373.55,
            "w": 172.1,
            "h": 380.6
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "MemberNames:",
          "md": "# MemberNames:",
          "bBox": {
            "x": 177.2,
            "y": 66.65,
            "w": 58,
            "h": 110.3
          }
        },
        {
          "type": "table",
          "rows": [
            [
              "Data:",
              "Street"
            ],
            [
              "Data:",
              "City"
            ],
            [
              "Data:",
              "State"
            ],
            [
              "Data:",
              "Zip"
            ]
          ],
          "md": "| Data: | Street |\n| ----- | ------ |\n| Data: | City   |\n| Data: | State  |\n| Data: | Zip    |",
          "isPerfectTable": true,
          "csv": "\"Data:\",\"Street\"\n\"Data:\",\"City\"\n\"Data:\",\"State\"\n\"Data:\",\"Zip\"",
          "bBox": {
            "x": 206,
            "y": 83.7,
            "w": 57.8,
            "h": 110.3
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "BinaryTypeEnumA:",
          "md": "# BinaryTypeEnumA:",
          "bBox": {
            "x": 148.4,
            "y": 203.05,
            "w": 77,
            "h": 8
          }
        },
        {
          "type": "table",
          "rows": [
            [
              "String",
              "(0x01)"
            ],
            [
              "String",
              "(0x01)"
            ],
            [
              "String",
              "(0x01)"
            ],
            [
              "String",
              "(0x01)"
            ]
          ],
          "md": "| String | (0x01) |\n| ------ | ------ |\n| String | (0x01) |\n| String | (0x01) |\n| String | (0x01) |",
          "isPerfectTable": true,
          "csv": "\"String\",\"(0x01)\"\n\"String\",\"(0x01)\"\n\"String\",\"(0x01)\"\n\"String\",\"(0x01)\"",
          "bBox": {
            "x": 119.6,
            "y": 220.1,
            "w": 191.6,
            "h": 366.05
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "LibraryId:",
          "md": "# LibraryId:",
          "bBox": {
            "x": 148.4,
            "y": 288.3,
            "w": 48,
            "h": 8
          }
        },
        {
          "type": "text",
          "value": "3 (0x03)",
          "md": "3 (0x03)",
          "bBox": {
            "x": 201.2,
            "y": 288.3,
            "w": 38.6,
            "h": 8
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "BinaryObjectString:",
          "md": "# BinaryObjectString:",
          "bBox": {
            "x": 119.6,
            "y": 220.1,
            "w": 191.6,
            "h": 366.05
          }
        },
        {
          "type": "table",
          "rows": [
            [
              "RecordTypeEnum:",
              "BinaryObjectString (0x06)"
            ],
            [
              "ObjectId:",
              "04 (0x04)"
            ],
            [
              "Length:",
              "17 (0x11)"
            ],
            [
              "Value:",
              "One Microsoft Way"
            ]
          ],
          "md": "| RecordTypeEnum: | BinaryObjectString (0x06) |\n| --------------- | ------------------------- |\n| ObjectId:       | 04 (0x04)                 |\n| Length:         | 17 (0x11)                 |\n| Value:          | One Microsoft Way         |",
          "isPerfectTable": true,
          "csv": "\"RecordTypeEnum:\",\"BinaryObjectString (0x06)\"\n\"ObjectId:\",\"04 (0x04)\"\n\"Length:\",\"17 (0x11)\"\n\"Value:\",\"One Microsoft Way\"",
          "bBox": {
            "x": 148.4,
            "y": 322.4,
            "w": 91.4,
            "h": 349
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "BinaryObjectString:",
          "md": "# BinaryObjectString:",
          "bBox": {
            "x": 119.6,
            "y": 220.1,
            "w": 191.6,
            "h": 366.05
          }
        },
        {
          "type": "table",
          "rows": [
            [
              "RecordTypeEnum:",
              "BinaryObjectString (0x06)"
            ],
            [
              "ObjectId:",
              "05 (0x04)"
            ],
            [
              "Length:",
              "7 (0x07)"
            ],
            [
              "Value:",
              "Redmond"
            ]
          ],
          "md": "| RecordTypeEnum: | BinaryObjectString (0x06) |\n| --------------- | ------------------------- |\n| ObjectId:       | 05 (0x04)                 |\n| Length:         | 7 (0x07)                  |\n| Value:          | Redmond                   |",
          "isPerfectTable": true,
          "csv": "\"RecordTypeEnum:\",\"BinaryObjectString (0x06)\"\n\"ObjectId:\",\"05 (0x04)\"\n\"Length:\",\"7 (0x07)\"\n\"Value:\",\"Redmond\"",
          "bBox": {
            "x": 148.4,
            "y": 322.4,
            "w": 91.4,
            "h": 349
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "BinaryObjectString:",
          "md": "# BinaryObjectString:",
          "bBox": {
            "x": 119.6,
            "y": 220.1,
            "w": 191.6,
            "h": 366.05
          }
        },
        {
          "type": "table",
          "rows": [
            [
              "RecordTypeEnum:",
              "BinaryObjectString (0x06)"
            ],
            [
              "ObjectId:",
              "06 (0x04)"
            ],
            [
              "Length:",
              "2 (0x02)"
            ],
            [
              "Value:",
              "WA"
            ]
          ],
          "md": "| RecordTypeEnum: | BinaryObjectString (0x06) |\n| --------------- | ------------------------- |\n| ObjectId:       | 06 (0x04)                 |\n| Length:         | 2 (0x02)                  |\n| Value:          | WA                        |",
          "isPerfectTable": true,
          "csv": "\"RecordTypeEnum:\",\"BinaryObjectString (0x06)\"\n\"ObjectId:\",\"06 (0x04)\"\n\"Length:\",\"2 (0x02)\"\n\"Value:\",\"WA\"",
          "bBox": {
            "x": 148.4,
            "y": 322.4,
            "w": 114.8,
            "h": 349
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "BinaryObjectString:",
          "md": "# BinaryObjectString:",
          "bBox": {
            "x": 119.6,
            "y": 220.1,
            "w": 191.6,
            "h": 366.05
          }
        },
        {
          "type": "table",
          "rows": [
            [
              "RecordTypeEnum:",
              "BinaryObjectString (0x06)"
            ],
            [
              "ObjectId:",
              "07 (0x04)"
            ],
            [
              "Length:",
              "5 (0x05)"
            ],
            [
              "Value:",
              "98054"
            ]
          ],
          "md": "| RecordTypeEnum: | BinaryObjectString (0x06) |\n| --------------- | ------------------------- |\n| ObjectId:       | 07 (0x04)                 |\n| Length:         | 5 (0x05)                  |\n| Value:          | 98054                     |",
          "isPerfectTable": true,
          "csv": "\"RecordTypeEnum:\",\"BinaryObjectString (0x06)\"\n\"ObjectId:\",\"07 (0x04)\"\n\"Length:\",\"5 (0x05)\"\n\"Value:\",\"98054\"",
          "bBox": {
            "x": 148.4,
            "y": 322.4,
            "w": 91.4,
            "h": 349
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "MessageEnd:",
          "md": "# MessageEnd:",
          "bBox": {
            "x": 100.4,
            "y": 646.35,
            "w": 172.8,
            "h": 25.05
          }
        },
        {
          "type": "table",
          "rows": [
            [
              "RecordTypeEnum:",
              "MessageEnd (0x11)"
            ]
          ],
          "md": "| RecordTypeEnum: | MessageEnd (0x11) |\n| --------------- | ----------------- |",
          "isPerfectTable": true,
          "csv": "\"RecordTypeEnum:\",\"MessageEnd (0x11)\"",
          "bBox": {
            "x": 148.4,
            "y": 322.4,
            "w": 72,
            "h": 349
          }
        },
        {
          "type": "text",
          "value": "47 / 55",
          "md": "47 / 55",
          "bBox": {
            "x": 512.1,
            "y": 696.55,
            "w": 27.9,
            "h": 8
          }
        }
      ],
      "status": "OK",
      "originalOrientationAngle": 0,
      "links": [
      ],
      "width": 612,
      "height": 792,
      "triggeredAutoMode": false,
      "parsingMode": "accurate",
      "structuredData": null,
      "noStructuredContent": false,
      "noTextContent": false,
      "pageHeaderMarkdown": "\n# [MS-NRBF] - v20190313\n\n# .NET Remoting: Binary Format Data Structure\n\nCopyright © 2019 Microsoft Corporation\n\nRelease: March 13, 2019\n\n",
      "pageFooterMarkdown": "\n47 / 55\n\n",
      "confidence": 0.95
    },
    {
      "page": 48,
      "text": "The Server Type name, method name, and arguments are passed in a BinaryMethodCall structure. The\nMessageEnum record in BinaryMethodCall is used by the server to determine how to read the needed\nvalues. The ArgsInArray flag in this record is set to 1 because the argument passed to the method is\nnot a Primitive Type. Because the client is not passing any extra data in the CallContext of the\nrequest, the NoContext flag in the MessageEnum record is also set to 1. This information, coupled with\nthe fact that the operation is of type Request, is used by the server to infer that the MethodName,\nServer Type, and Argument are embedded in the BinaryMethodCall record itself. Because the\nargument Address is passed in the callArray, CallArray contains an ArraySingleObject as the root\nelement, and the first entry in the Array is a MemberReference to the ClassWithMembersAndTypes\nrecord that contains the input argument passed. The Library, to which the\nClassWithMembersAndTypes refers, appears next, and then the ClassWithMembersAndTypes record\nfollows. All Members of Address are strings; therefore, the ClassWithMembersAndTypes record is\nfollowed by BinaryObjectString records for all of its Members.\n\nAfter it invokes the method and is ready to return the result of that invocation, the server crafts a\nResponse message and sends the Return Value (\"Address received\") in that message. The network\ncapture of the response message is as follows.\n\n 0000     00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 ................\n\n 0010     00 16 11 08 00 00 12 10 41 64 64 72 65 73 73 20 ........Address\n\n 0020     72 65 63 65 69 76 65 64 0B                          received.\n\n\nBinary Serialization   Format\n\n SerializationHeaderRecord:\n\n  RecordTypeEnum:      SerializedStreamHeader (0x00)\n\n  TopId: 0 (0x0)\n\n  HeaderId:          0 (0x0)\n\n  MajorVersion:        1 (0x1)\n\n  MinorVersion:        0 (0x0)\n\n BinaryMethodReturn:\n\n  RecordTypeEnum:      BinaryMethodReturn  (0x16)\n\n  MessageEnum: 00000811\n\n   NoArgs:                            (...............................1)\n\n   ArgsInline:                        (..............................0.)\n\n   ArgsIsArray:                       (.............................0..)\n\n   ArgsInArray:                       (............................0...)\n\n   NoContext:                         (...........................1....)\n\n                                                                        48 / 55\n[MS-NRBF] - v20190313\n.NET Remoting: Binary Format Data Structure\nCopyright © 2019 Microsoft Corporation\nRelease: March 13, 2019",
      "md": "\n# Binary Serialization Format\n\nThe Server Type name, method name, and arguments are passed in a BinaryMethodCall structure. The MessageEnum record in BinaryMethodCall is used by the server to determine how to read the needed values. The ArgsInArray flag in this record is set to 1 because the argument passed to the method is not a Primitive Type. Because the client is not passing any extra data in the CallContext of the request, the NoContext flag in the MessageEnum record is also set to 1. This information, coupled with the fact that the operation is of type Request, is used by the server to infer that the MethodName, Server Type, and Argument are embedded in the BinaryMethodCall record itself. Because the argument Address is passed in the callArray, CallArray contains an ArraySingleObject as the root element, and the first entry in the Array is a MemberReference to the ClassWithMembersAndTypes record that contains the input argument passed. The Library, to which the ClassWithMembersAndTypes refers, appears next, and then the ClassWithMembersAndTypes record follows. All Members of Address are strings; therefore, the ClassWithMembersAndTypes record is followed by BinaryObjectString records for all of its Members.\n\nAfter it invokes the method and is ready to return the result of that invocation, the server crafts a Response message and sends the Return Value (\"Address received\") in that message. The network capture of the response message is as follows.\n\n0000     00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 ................\n\n0010     00 16 11 08 00 00 12 10 41 64 64 72 65 73 73 20 ........Address\n\n0020     72 65 63 65 69 76 65 64 0B                          received.\n\n# Binary Serialization Format\n\n# SerializationHeaderRecord:\n\n- RecordTypeEnum:      SerializedStreamHeader (0x00)\n- TopId: 0 (0x0)\n- HeaderId:          0 (0x0)\n- MajorVersion:        1 (0x1)\n- MinorVersion:        0 (0x0)\n\n# BinaryMethodReturn:\n\n- RecordTypeEnum:      BinaryMethodReturn  (0x16)\n- MessageEnum: 00000811\n- NoArgs:                            (...............................1)\n- ArgsInline:                        (..............................0.)\n- ArgsIsArray:                       (.............................0..)\n- ArgsInArray:                       (............................0...)\n- NoContext:                         (...........................1....)\n\n48 / 55\n\n[MS-NRBF] - v20190313\n\n.NET Remoting: Binary Format Data Structure\n\nCopyright © 2019 Microsoft Corporation\n\nRelease: March 13, 2019\n\n",
      "images": [
      ],
      "charts": [
      ],
      "items": [
        {
          "type": "heading",
          "lvl": 1,
          "value": "Binary Serialization Format",
          "md": "# Binary Serialization Format",
          "bBox": {
            "x": 90.8,
            "y": 419.8,
            "w": 129.8,
            "h": 8
          }
        },
        {
          "type": "text",
          "value": "The Server Type name, method name, and arguments are passed in a BinaryMethodCall structure. The MessageEnum record in BinaryMethodCall is used by the server to determine how to read the needed values. The ArgsInArray flag in this record is set to 1 because the argument passed to the method is not a Primitive Type. Because the client is not passing any extra data in the CallContext of the request, the NoContext flag in the MessageEnum record is also set to 1. This information, coupled with the fact that the operation is of type Request, is used by the server to infer that the MethodName, Server Type, and Argument are embedded in the BinaryMethodCall record itself. Because the argument Address is passed in the callArray, CallArray contains an ArraySingleObject as the root element, and the first entry in the Array is a MemberReference to the ClassWithMembersAndTypes record that contains the input argument passed. The Library, to which the ClassWithMembersAndTypes refers, appears next, and then the ClassWithMembersAndTypes record follows. All Members of Address are strings; therefore, the ClassWithMembersAndTypes record is followed by BinaryObjectString records for all of its Members.\n\nAfter it invokes the method and is ready to return the result of that invocation, the server crafts a Response message and sends the Return Value (\"Address received\") in that message. The network capture of the response message is as follows.\n\n0000     00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 ................\n\n0010     00 16 11 08 00 00 12 10 41 64 64 72 65 73 73 20 ........Address\n\n0020     72 65 63 65 69 76 65 64 0B                          received.",
          "md": "The Server Type name, method name, and arguments are passed in a BinaryMethodCall structure. The MessageEnum record in BinaryMethodCall is used by the server to determine how to read the needed values. The ArgsInArray flag in this record is set to 1 because the argument passed to the method is not a Primitive Type. Because the client is not passing any extra data in the CallContext of the request, the NoContext flag in the MessageEnum record is also set to 1. This information, coupled with the fact that the operation is of type Request, is used by the server to infer that the MethodName, Server Type, and Argument are embedded in the BinaryMethodCall record itself. Because the argument Address is passed in the callArray, CallArray contains an ArraySingleObject as the root element, and the first entry in the Array is a MemberReference to the ClassWithMembersAndTypes record that contains the input argument passed. The Library, to which the ClassWithMembersAndTypes refers, appears next, and then the ClassWithMembersAndTypes record follows. All Members of Address are strings; therefore, the ClassWithMembersAndTypes record is followed by BinaryObjectString records for all of its Members.\n\nAfter it invokes the method and is ready to return the result of that invocation, the server crafts a Response message and sends the Return Value (\"Address received\") in that message. The network capture of the response message is as follows.\n\n0000     00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 ................\n\n0010     00 16 11 08 00 00 12 10 41 64 64 72 65 73 73 20 ........Address\n\n0020     72 65 63 65 69 76 65 64 0B                          received.",
          "bBox": {
            "x": 72.1,
            "y": 98.2,
            "w": 466.26,
            "h": 329.6
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "Binary Serialization Format",
          "md": "# Binary Serialization Format",
          "bBox": {
            "x": 90.8,
            "y": 419.8,
            "w": 129.8,
            "h": 8
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "SerializationHeaderRecord:",
          "md": "# SerializationHeaderRecord:",
          "bBox": {
            "x": 100.4,
            "y": 436.85,
            "w": 125,
            "h": 8
          }
        },
        {
          "type": "text",
          "value": "- RecordTypeEnum:      SerializedStreamHeader (0x00)\n- TopId: 0 (0x0)\n- HeaderId:          0 (0x0)\n- MajorVersion:        1 (0x1)\n- MinorVersion:        0 (0x0)",
          "md": "- RecordTypeEnum:      SerializedStreamHeader (0x00)\n- TopId: 0 (0x0)\n- HeaderId:          0 (0x0)\n- MajorVersion:        1 (0x1)\n- MinorVersion:        0 (0x0)",
          "bBox": {
            "x": 119.6,
            "y": 453.9,
            "w": 216.2,
            "h": 110.3
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "BinaryMethodReturn:",
          "md": "# BinaryMethodReturn:",
          "bBox": {
            "x": 100.4,
            "y": 539.15,
            "w": 182,
            "h": 25.05
          }
        },
        {
          "type": "text",
          "value": "- RecordTypeEnum:      BinaryMethodReturn  (0x16)\n- MessageEnum: 00000811\n- NoArgs:                            (...............................1)\n- ArgsInline:                        (..............................0.)\n- ArgsIsArray:                       (.............................0..)\n- ArgsInArray:                       (............................0...)\n- NoContext:                         (...........................1....)\n\n48 / 55\n\n[MS-NRBF] - v20190313\n\n.NET Remoting: Binary Format Data Structure\n\nCopyright © 2019 Microsoft Corporation\n\nRelease: March 13, 2019",
          "md": "- RecordTypeEnum:      BinaryMethodReturn  (0x16)\n- MessageEnum: 00000811\n- NoArgs:                            (...............................1)\n- ArgsInline:                        (..............................0.)\n- ArgsIsArray:                       (.............................0..)\n- ArgsInArray:                       (............................0...)\n- NoContext:                         (...........................1....)\n\n48 / 55\n\n[MS-NRBF] - v20190313\n\n.NET Remoting: Binary Format Data Structure\n\nCopyright © 2019 Microsoft Corporation\n\nRelease: March 13, 2019",
          "bBox": {
            "x": 72.1,
            "y": 334.55,
            "w": 467.9,
            "h": 419.6
          }
        }
      ],
      "status": "OK",
      "originalOrientationAngle": 0,
      "links": [
      ],
      "width": 612,
      "height": 792,
      "triggeredAutoMode": false,
      "parsingMode": "accurate",
      "structuredData": null,
      "noStructuredContent": false,
      "noTextContent": false,
      "pageHeaderMarkdown": "\n# Binary Serialization Format\n\n",
      "pageFooterMarkdown": "\n48 / 55\n\n[MS-NRBF] - v20190313\n\n.NET Remoting: Binary Format Data Structure\n\nCopyright © 2019 Microsoft Corporation\n\nRelease: March 13, 2019\n\n",
      "confidence": 0.985
    },
    {
      "page": 49,
      "text": "ContextInline:             (..........................0.....)\n\nContextInArray:            (.........................0......)\n\nMethodSignatureInArray:    (........................0.......)\n\nPropertyInArray:           (.......................0........)\n\nNoReturnValue:             (......................0.........)\n\nReturnValueVoid:           (.....................0..........)\n\nReturnValueInline:         (....................1...........)\n\nReturnValueInArray:        (...................0............)\n\nExceptionInArray:          (..................0.............)\n\nReserved:                  (000000000000000000..............)\n\nReturnValue:\n\nPrimitiveTypeEnum:     String (0x12)\n\nData:      Address received\n\nMessageEnd:\n\nRecordTypeEnum:     MessageEnd (0x11)\n\n\nBecause it is a response, the server sends back a message with the operation flag set to \"Response\".\nThe return argument is enclosed in a \"BinaryMethodResponse\" enclosure. The following flags in the\nMessageEnum record of BinaryMethodResponse field are set to 1.\n\nNoArgs: There are no output arguments.\n\nNoContext: Similar to the client, the server is not sending any additional data in CallContext.\n\nReturnValueInline: Because the Return Value is a Primitive Type, it is contained in the\nBinaryMethodReturn record.\n\n\n                                           49 / 55\n[MS-NRBF] - v20190313\n.NET Remoting: Binary Format Data Structure\nCopyright © 2019 Microsoft Corporation\nRelease: March 13, 2019",
      "md": "\n# .NET Remoting: Binary Format Data Structure\n\nCopyright © 2019 Microsoft Corporation\n\nRelease: March 13, 2019\n\nContextInline:             (..........................0.....)\n\nContextInArray:            (.........................0......)\n\nMethodSignatureInArray:    (........................0.......)\n\nPropertyInArray:           (.......................0........)\n\nNoReturnValue:             (......................0.........)\n\nReturnValueVoid:           (.....................0..........)\n\nReturnValueInline:         (....................1...........)\n\nReturnValueInArray:        (...................0............)\n\nExceptionInArray:          (..................0.............)\n\nReserved:                  (000000000000000000..............)\n\nReturnValue:\n\nPrimitiveTypeEnum:     String (0x12)\n\nData:      Address received\n\nMessageEnd:\n\nRecordTypeEnum:     MessageEnd (0x11)\n\nBecause it is a response, the server sends back a message with the operation flag set to \"Response\".\n\nThe return argument is enclosed in a \"BinaryMethodResponse\" enclosure. The following flags in the MessageEnum record of BinaryMethodResponse field are set to 1.\n\n- NoArgs: There are no output arguments.\n- NoContext: Similar to the client, the server is not sending any additional data in CallContext.\n- ReturnValueInline: Because the Return Value is a Primitive Type, it is contained in the BinaryMethodReturn record.\n\n49 / 55\n\n",
      "images": [
      ],
      "charts": [
      ],
      "items": [
        {
          "type": "heading",
          "lvl": 1,
          "value": ".NET Remoting: Binary Format Data Structure",
          "md": "# .NET Remoting: Binary Format Data Structure",
          "bBox": {
            "x": 72.1,
            "y": 724.35,
            "w": 182.82,
            "h": 8
          }
        },
        {
          "type": "text",
          "value": "Copyright © 2019 Microsoft Corporation\n\nRelease: March 13, 2019\n\nContextInline:             (..........................0.....)\n\nContextInArray:            (.........................0......)\n\nMethodSignatureInArray:    (........................0.......)\n\nPropertyInArray:           (.......................0........)\n\nNoReturnValue:             (......................0.........)\n\nReturnValueVoid:           (.....................0..........)\n\nReturnValueInline:         (....................1...........)\n\nReturnValueInArray:        (...................0............)\n\nExceptionInArray:          (..................0.............)\n\nReserved:                  (000000000000000000..............)\n\nReturnValue:\n\nPrimitiveTypeEnum:     String (0x12)\n\nData:      Address received\n\nMessageEnd:\n\nRecordTypeEnum:     MessageEnd (0x11)\n\nBecause it is a response, the server sends back a message with the operation flag set to \"Response\".\n\nThe return argument is enclosed in a \"BinaryMethodResponse\" enclosure. The following flags in the MessageEnum record of BinaryMethodResponse field are set to 1.\n\n- NoArgs: There are no output arguments.\n- NoContext: Similar to the client, the server is not sending any additional data in CallContext.\n- ReturnValueInline: Because the Return Value is a Primitive Type, it is contained in the BinaryMethodReturn record.\n\n49 / 55",
          "md": "Copyright © 2019 Microsoft Corporation\n\nRelease: March 13, 2019\n\nContextInline:             (..........................0.....)\n\nContextInArray:            (.........................0......)\n\nMethodSignatureInArray:    (........................0.......)\n\nPropertyInArray:           (.......................0........)\n\nNoReturnValue:             (......................0.........)\n\nReturnValueVoid:           (.....................0..........)\n\nReturnValueInline:         (....................1...........)\n\nReturnValueInArray:        (...................0............)\n\nExceptionInArray:          (..................0.............)\n\nReserved:                  (000000000000000000..............)\n\nReturnValue:\n\nPrimitiveTypeEnum:     String (0x12)\n\nData:      Address received\n\nMessageEnd:\n\nRecordTypeEnum:     MessageEnd (0x11)\n\nBecause it is a response, the server sends back a message with the operation flag set to \"Response\".\n\nThe return argument is enclosed in a \"BinaryMethodResponse\" enclosure. The following flags in the MessageEnum record of BinaryMethodResponse field are set to 1.\n\n- NoArgs: There are no output arguments.\n- NoContext: Similar to the client, the server is not sending any additional data in CallContext.\n- ReturnValueInline: Because the Return Value is a Primitive Type, it is contained in the BinaryMethodReturn record.\n\n49 / 55",
          "bBox": {
            "x": 72.1,
            "y": 66.65,
            "w": 467.9,
            "h": 687.5
          }
        }
      ],
      "status": "OK",
      "originalOrientationAngle": 0,
      "links": [
      ],
      "width": 612,
      "height": 792,
      "triggeredAutoMode": false,
      "parsingMode": "accurate",
      "structuredData": null,
      "noStructuredContent": false,
      "noTextContent": false,
      "pageHeaderMarkdown": "\n# .NET Remoting: Binary Format Data Structure\n\nCopyright © 2019 Microsoft Corporation\n\nRelease: March 13, 2019\n\n",
      "pageFooterMarkdown": "\n",
      "confidence": 0.975
    },
    {
      "page": 50,
      "text": "4 Security Considerations\n\nSome of the structures contain fields that specify size information of the data in the serialization\nstream. The type of the size that specifies fields is INT32 (as specified in [MS-DTYP] section 2.2.22).\nThe maximum value of these values can be as high as 0x7FFFFFFF. An implementation that consumes\nthe stream either does not allocate memory based on the size information specified in the serialization\nstream, or ensures that the data in the serialization stream can be trusted.\n\nThe following table lists the structures with fields that specify size information.\n\n  Type                    Field          Description\n\n LengthPrefixedString     Length         Size of the string\n\n ArrayOfValueWithCod      Length         Size of the Array\n e\n\n ClassInfo                MemberCoun     Number of Members\n                          t\n\n ArrayInfo                Length         Size of the Array\n\n BinaryArray              Rank           Size of the Lengths and LowerBounds Arrays\n\n BinaryArray              Lengths        Size of each dimension that would affect the net size of the Array\n\n ObjectNullMultiple       NullCount      Number of Null Objects\n\nDe-serialization of the serialization stream results in creating instances of Remoting Types whose\ninformation is provided in the serialization stream. It might be unsafe to create an instance of\nRemoting Types. An implementation protects against attacks where the serialization stream includes\nthe unsafe Remoting Types. Such attacks can be mitigated by allowing the higher layer to configure a\nlist of Remoting Types in an implementation-specific way and disallow de-serialization of any\nRemoting Type that is not in the list.\n\n\n                                           50 / 55\n[MS-NRBF] - v20190313\n.NET Remoting: Binary Format Data Structure\nCopyright © 2019 Microsoft Corporation\nRelease: March 13, 2019",
      "md": "\n# 4 Security Considerations\n\nSome of the structures contain fields that specify size information of the data in the serialization stream. The type of the size that specifies fields is INT32 (as specified in [MS-DTYP] section 2.2.22). The maximum value of these values can be as high as 0x7FFFFFFF. An implementation that consumes the stream either does not allocate memory based on the size information specified in the serialization stream, or ensures that the data in the serialization stream can be trusted.\n\nThe following table lists the structures with fields that specify size information.\n\n| Type                 | Field       | Description                                                        |\n| -------------------- | ----------- | ------------------------------------------------------------------ |\n| LengthPrefixedString | Length      | Size of the string                                                 |\n| ArrayOfValueWithCod  | Length      | Size of the Array                                                  |\n| ClassInfo            | MemberCount | Number of Members                                                  |\n| ArrayInfo            | Length      | Size of the Array                                                  |\n| BinaryArray          | Rank        | Size of the Lengths and LowerBounds Arrays                         |\n| BinaryArray          | Lengths     | Size of each dimension that would affect the net size of the Array |\n| ObjectNullMultiple   | NullCount   | Number of Null Objects                                             |\n\nDe-serialization of the serialization stream results in creating instances of Remoting Types whose information is provided in the serialization stream. It might be unsafe to create an instance of Remoting Types. An implementation protects against attacks where the serialization stream includes the unsafe Remoting Types. Such attacks can be mitigated by allowing the higher layer to configure a list of Remoting Types in an implementation-specific way and disallow de-serialization of any Remoting Type that is not in the list.\n\n50 / 55\n\n[MS-NRBF] - v20190313\n\n.NET Remoting: Binary Format Data Structure\n\nCopyright © 2019 Microsoft Corporation\n\nRelease: March 13, 2019\n\n",
      "images": [
      ],
      "charts": [
      ],
      "items": [
        {
          "type": "heading",
          "lvl": 1,
          "value": "4 Security Considerations",
          "md": "# 4 Security Considerations",
          "bBox": {
            "x": 72.1,
            "y": 62.55,
            "w": 177.55,
            "h": 212.35
          }
        },
        {
          "type": "text",
          "value": "Some of the structures contain fields that specify size information of the data in the serialization stream. The type of the size that specifies fields is INT32 (as specified in [MS-DTYP] section 2.2.22). The maximum value of these values can be as high as 0x7FFFFFFF. An implementation that consumes the stream either does not allocate memory based on the size information specified in the serialization stream, or ensures that the data in the serialization stream can be trusted.\n\nThe following table lists the structures with fields that specify size information.",
          "md": "Some of the structures contain fields that specify size information of the data in the serialization stream. The type of the size that specifies fields is INT32 (as specified in [MS-DTYP] section 2.2.22). The maximum value of these values can be as high as 0x7FFFFFFF. An implementation that consumes the stream either does not allocate memory based on the size information specified in the serialization stream, or ensures that the data in the serialization stream can be trusted.\n\nThe following table lists the structures with fields that specify size information.",
          "bBox": {
            "x": 72.1,
            "y": 87.55,
            "w": 464.88,
            "h": 187.35
          }
        },
        {
          "type": "table",
          "rows": [
            [
              "Type",
              "Field",
              "Description"
            ],
            [
              "LengthPrefixedString",
              "Length",
              "Size of the string"
            ],
            [
              "ArrayOfValueWithCod",
              "Length",
              "Size of the Array"
            ],
            [
              "ClassInfo",
              "MemberCount",
              "Number of Members"
            ],
            [
              "ArrayInfo",
              "Length",
              "Size of the Array"
            ],
            [
              "BinaryArray",
              "Rank",
              "Size of the Lengths and LowerBounds Arrays"
            ],
            [
              "BinaryArray",
              "Lengths",
              "Size of each dimension that would affect the net size of the Array"
            ],
            [
              "ObjectNullMultiple",
              "NullCount",
              "Number of Null Objects"
            ]
          ],
          "md": "| Type                 | Field       | Description                                                        |\n| -------------------- | ----------- | ------------------------------------------------------------------ |\n| LengthPrefixedString | Length      | Size of the string                                                 |\n| ArrayOfValueWithCod  | Length      | Size of the Array                                                  |\n| ClassInfo            | MemberCount | Number of Members                                                  |\n| ArrayInfo            | Length      | Size of the Array                                                  |\n| BinaryArray          | Rank        | Size of the Lengths and LowerBounds Arrays                         |\n| BinaryArray          | Lengths     | Size of each dimension that would affect the net size of the Array |\n| ObjectNullMultiple   | NullCount   | Number of Null Objects                                             |",
          "isPerfectTable": true,
          "csv": "\"Type\",\"Field\",\"Description\"\n\"LengthPrefixedString\",\"Length\",\"Size of the string\"\n\"ArrayOfValueWithCod\",\"Length\",\"Size of the Array\"\n\"ClassInfo\",\"MemberCount\",\"Number of Members\"\n\"ArrayInfo\",\"Length\",\"Size of the Array\"\n\"BinaryArray\",\"Rank\",\"Size of the Lengths and LowerBounds Arrays\"\n\"BinaryArray\",\"Lengths\",\"Size of each dimension that would affect the net size of the Array\"\n\"ObjectNullMultiple\",\"NullCount\",\"Number of Null Objects\"",
          "bBox": {
            "x": 72.1,
            "y": 87.55,
            "w": 461.38,
            "h": 356
          }
        },
        {
          "type": "text",
          "value": "De-serialization of the serialization stream results in creating instances of Remoting Types whose information is provided in the serialization stream. It might be unsafe to create an instance of Remoting Types. An implementation protects against attacks where the serialization stream includes the unsafe Remoting Types. Such attacks can be mitigated by allowing the higher layer to configure a list of Remoting Types in an implementation-specific way and disallow de-serialization of any Remoting Type that is not in the list.\n\n50 / 55\n\n[MS-NRBF] - v20190313\n\n.NET Remoting: Binary Format Data Structure\n\nCopyright © 2019 Microsoft Corporation\n\nRelease: March 13, 2019",
          "md": "De-serialization of the serialization stream results in creating instances of Remoting Types whose information is provided in the serialization stream. It might be unsafe to create an instance of Remoting Types. An implementation protects against attacks where the serialization stream includes the unsafe Remoting Types. Such attacks can be mitigated by allowing the higher layer to configure a list of Remoting Types in an implementation-specific way and disallow de-serialization of any Remoting Type that is not in the list.\n\n50 / 55\n\n[MS-NRBF] - v20190313\n\n.NET Remoting: Binary Format Data Structure\n\nCopyright © 2019 Microsoft Corporation\n\nRelease: March 13, 2019",
          "bBox": {
            "x": 72.1,
            "y": 184.2,
            "w": 467.9,
            "h": 569.95
          }
        }
      ],
      "status": "OK",
      "originalOrientationAngle": 0,
      "links": [
      ],
      "width": 612,
      "height": 792,
      "triggeredAutoMode": false,
      "parsingMode": "accurate",
      "structuredData": null,
      "noStructuredContent": false,
      "noTextContent": false,
      "pageHeaderMarkdown": "\n# 4 Security Considerations\n\n",
      "pageFooterMarkdown": "\n50 / 55\n\n[MS-NRBF] - v20190313\n\n.NET Remoting: Binary Format Data Structure\n\nCopyright © 2019 Microsoft Corporation\n\nRelease: March 13, 2019\n\n",
      "confidence": 0.992
    },
    {
      "page": 51,
      "text": "5     Appendix A: Product Behavior\n\nThe information in this specification is applicable to the following Microsoft products or supplemental\nsoftware. References to product versions include updates to those products.\n\nThis document specifies version-specific details in the Microsoft .NET Framework. For information\nabout which versions of .NET Framework are available in each released Windows product or as\nsupplemental software, see [MS-NETOD] section 4.\n\nThe terms \"earlier\" and \"later\", when used with a product version, refer to either all preceding versions\nor all subsequent versions, respectively. The term \"through\" refers to the inclusive range of versions.\nApplicable Microsoft products are listed chronologically in this section.\n\n§     Microsoft .NET Framework 1.0\n\n§     Microsoft .NET Framework 2.0\n\n§     Microsoft .NET Framework 3.0\n\n§     Microsoft .NET Framework 3.5\n\n§     Microsoft .NET Framework 4.0\n\n§     Microsoft .NET Framework 4.5\n\n§     Microsoft .NET Framework 4.6\n\n§     Microsoft .NET Framework 4.7\n\n§     Microsoft .NET Framework 4.8\n\nExceptions, if any, are noted in this section. If an update version, service pack or Knowledge Base (KB)\nnumber appears with a product name, the behavior changed in that update. The new behavior also\napplies to subsequent updates unless otherwise specified. If a product edition appears with the\nproduct version, behavior is different in that product edition.\n\nUnless otherwise specified, any statement of optional behavior in this specification that is prescribed\nusing the terms \"SHOULD\" or \"SHOULD NOT\" implies product behavior in accordance with the SHOULD\nor SHOULD NOT prescription. Unless otherwise specified, the term \"MAY\" implies that the product does\nnot follow the prescription.\n\n<1> Section 2.1.1.5: In .NET Framework 1.0 and .NET Framework 1.1, the value of Kind is always set\nto 0 when writing. On reading, the value is ignored and assumed to be 0.\n\n<2> Section 2.2.1.1: The bit value GenericMethod is valid only with .NET Framework 2.0 and later\nversions.\n\n<3> Section 2.2.3.2: This is present only in .NET Framework 2.0 and later versions.\n\n<4> Section 2.3.1.1: Windows uses a single counter that counts from 1 to generate the ObjectId in the\nClassInfo, ArrayInfo, BinaryObjectString, and BinaryArray records, and the LibraryId in the\nBinaryLibrary record. The maximum value is 2,147,483,647. If the object is of a Remoting Type that\ncannot be referenced in Windows, the negative of the counter value is used.\n\n\n                                           51 / 55\n[MS-NRBF] - v20190313\n.NET Remoting: Binary Format Data Structure\nCopyright © 2019 Microsoft Corporation\nRelease: March 13, 2019",
      "md": "\n# Appendix A: Product Behavior\n\nThe information in this specification is applicable to the following Microsoft products or supplemental software. References to product versions include updates to those products.\n\nThis document specifies version-specific details in the Microsoft .NET Framework. For information about which versions of .NET Framework are available in each released Windows product or as supplemental software, see [MS-NETOD] section 4.\n\nThe terms \"earlier\" and \"later\", when used with a product version, refer to either all preceding versions or all subsequent versions, respectively. The term \"through\" refers to the inclusive range of versions. Applicable Microsoft products are listed chronologically in this section.\n\n- Microsoft .NET Framework 1.0\n- Microsoft .NET Framework 2.0\n- Microsoft .NET Framework 3.0\n- Microsoft .NET Framework 3.5\n- Microsoft .NET Framework 4.0\n- Microsoft .NET Framework 4.5\n- Microsoft .NET Framework 4.6\n- Microsoft .NET Framework 4.7\n- Microsoft .NET Framework 4.8\n\nExceptions, if any, are noted in this section. If an update version, service pack or Knowledge Base (KB) number appears with a product name, the behavior changed in that update. The new behavior also applies to subsequent updates unless otherwise specified. If a product edition appears with the product version, behavior is different in that product edition.\n\nUnless otherwise specified, any statement of optional behavior in this specification that is prescribed using the terms \"SHOULD\" or \"SHOULD NOT\" implies product behavior in accordance with the SHOULD or SHOULD NOT prescription. Unless otherwise specified, the term \"MAY\" implies that the product does not follow the prescription.\n\n1 Section 2.1.1.5: In .NET Framework 1.0 and .NET Framework 1.1, the value of Kind is always set to 0 when writing. On reading, the value is ignored and assumed to be 0.\n\n2 Section 2.2.1.1: The bit value GenericMethod is valid only with .NET Framework 2.0 and later versions.\n\n3 Section 2.2.3.2: This is present only in .NET Framework 2.0 and later versions.\n\n4 Section 2.3.1.1: Windows uses a single counter that counts from 1 to generate the ObjectId in the ClassInfo, ArrayInfo, BinaryObjectString, and BinaryArray records, and the LibraryId in the BinaryLibrary record. The maximum value is 2,147,483,647. If the object is of a Remoting Type that cannot be referenced in Windows, the negative of the counter value is used.\n\n",
      "images": [
      ],
      "charts": [
      ],
      "items": [
        {
          "type": "heading",
          "lvl": 1,
          "value": "Appendix A: Product Behavior",
          "md": "# Appendix A: Product Behavior",
          "bBox": {
            "x": 93.7,
            "y": 62.55,
            "w": 196.34,
            "h": 12
          }
        },
        {
          "type": "text",
          "value": "The information in this specification is applicable to the following Microsoft products or supplemental software. References to product versions include updates to those products.\n\nThis document specifies version-specific details in the Microsoft .NET Framework. For information about which versions of .NET Framework are available in each released Windows product or as supplemental software, see [MS-NETOD] section 4.\n\nThe terms \"earlier\" and \"later\", when used with a product version, refer to either all preceding versions or all subsequent versions, respectively. The term \"through\" refers to the inclusive range of versions. Applicable Microsoft products are listed chronologically in this section.\n\n- Microsoft .NET Framework 1.0\n- Microsoft .NET Framework 2.0\n- Microsoft .NET Framework 3.0\n- Microsoft .NET Framework 3.5\n- Microsoft .NET Framework 4.0\n- Microsoft .NET Framework 4.5\n- Microsoft .NET Framework 4.6\n- Microsoft .NET Framework 4.7\n- Microsoft .NET Framework 4.8\n\nExceptions, if any, are noted in this section. If an update version, service pack or Knowledge Base (KB) number appears with a product name, the behavior changed in that update. The new behavior also applies to subsequent updates unless otherwise specified. If a product edition appears with the product version, behavior is different in that product edition.\n\nUnless otherwise specified, any statement of optional behavior in this specification that is prescribed using the terms \"SHOULD\" or \"SHOULD NOT\" implies product behavior in accordance with the SHOULD or SHOULD NOT prescription. Unless otherwise specified, the term \"MAY\" implies that the product does not follow the prescription.\n\n1 Section 2.1.1.5: In .NET Framework 1.0 and .NET Framework 1.1, the value of Kind is always set to 0 when writing. On reading, the value is ignored and assumed to be 0.\n\n2 Section 2.2.1.1: The bit value GenericMethod is valid only with .NET Framework 2.0 and later versions.\n\n3 Section 2.2.3.2: This is present only in .NET Framework 2.0 and later versions.\n\n4 Section 2.3.1.1: Windows uses a single counter that counts from 1 to generate the ObjectId in the ClassInfo, ArrayInfo, BinaryObjectString, and BinaryArray records, and the LibraryId in the BinaryLibrary record. The maximum value is 2,147,483,647. If the object is of a Remoting Type that cannot be referenced in Windows, the negative of the counter value is used.",
          "md": "The information in this specification is applicable to the following Microsoft products or supplemental software. References to product versions include updates to those products.\n\nThis document specifies version-specific details in the Microsoft .NET Framework. For information about which versions of .NET Framework are available in each released Windows product or as supplemental software, see [MS-NETOD] section 4.\n\nThe terms \"earlier\" and \"later\", when used with a product version, refer to either all preceding versions or all subsequent versions, respectively. The term \"through\" refers to the inclusive range of versions. Applicable Microsoft products are listed chronologically in this section.\n\n- Microsoft .NET Framework 1.0\n- Microsoft .NET Framework 2.0\n- Microsoft .NET Framework 3.0\n- Microsoft .NET Framework 3.5\n- Microsoft .NET Framework 4.0\n- Microsoft .NET Framework 4.5\n- Microsoft .NET Framework 4.6\n- Microsoft .NET Framework 4.7\n- Microsoft .NET Framework 4.8\n\nExceptions, if any, are noted in this section. If an update version, service pack or Knowledge Base (KB) number appears with a product name, the behavior changed in that update. The new behavior also applies to subsequent updates unless otherwise specified. If a product edition appears with the product version, behavior is different in that product edition.\n\nUnless otherwise specified, any statement of optional behavior in this specification that is prescribed using the terms \"SHOULD\" or \"SHOULD NOT\" implies product behavior in accordance with the SHOULD or SHOULD NOT prescription. Unless otherwise specified, the term \"MAY\" implies that the product does not follow the prescription.\n\n1 Section 2.1.1.5: In .NET Framework 1.0 and .NET Framework 1.1, the value of Kind is always set to 0 when writing. On reading, the value is ignored and assumed to be 0.\n\n2 Section 2.2.1.1: The bit value GenericMethod is valid only with .NET Framework 2.0 and later versions.\n\n3 Section 2.2.3.2: This is present only in .NET Framework 2.0 and later versions.\n\n4 Section 2.3.1.1: Windows uses a single counter that counts from 1 to generate the ObjectId in the ClassInfo, ArrayInfo, BinaryObjectString, and BinaryArray records, and the LibraryId in the BinaryLibrary record. The maximum value is 2,147,483,647. If the object is of a Remoting Type that cannot be referenced in Windows, the negative of the counter value is used.",
          "bBox": {
            "x": 72.1,
            "y": 62.55,
            "w": 466.44,
            "h": 592.9
          }
        }
      ],
      "status": "OK",
      "originalOrientationAngle": 0,
      "links": [
        {
          "unsafeUrl": "../../../../../../../upload/%5BMS-NETOD%5D.pdf#Section_bcca8164da0843f2a983c34ed99171b0",
          "text": "[MS-NETOD]"
        }
      ],
      "width": 612,
      "height": 792,
      "triggeredAutoMode": false,
      "parsingMode": "accurate",
      "structuredData": null,
      "noStructuredContent": false,
      "noTextContent": false,
      "pageHeaderMarkdown": "",
      "pageFooterMarkdown": "",
      "confidence": 0.948
    },
    {
      "page": 52,
      "text": "<5> Section 2.3.1.1: In Windows, the order of the Members can vary for each occurrence of the record\nfor a given class.\n\n<6> Section 2.4: Windows uses ObjectNullMultiple256 if the number of sequential Null Objects is 255\nor fewer. Windows uses ObjectNullMultiple if the number of sequential Null Objects is greater than 255.\n\n<7> Section 2.4.2.1: Windows uses a single counter that counts from 1 to generate the ObjectId in the\nClassInfo, ArrayInfo, BinaryObjectString, and BinaryArray records, and the LibraryId in the\nBinaryLibrary record. The maximum value is 2,147,483,647.\n\n<8> Section 2.4.3.1: Windows uses a single counter that counts from 1 to generate the ObjectId in the\nClassInfo, ArrayInfo, BinaryObjectString, and BinaryArray records, and the LibraryId in the\nBinaryLibrary record. The maximum value is 2,147,483,647.\n\n<9> Section 2.5.3: Windows places the record that defines the ID before or after the referencing\nrecord.\n\n<10> Section 2.5.7: Windows uses a single counter that counts from 1 to generate the ObjectId in the\nClassInfo, ArrayInfo, BinaryObjectString, and BinaryArray records, and the LibraryId in the\nBinaryLibrary record. The maximum value is 2,147,483,647.\n\n<11> Section 2.6.2: Windows uses a single counter that counts from 1 to generate the ObjectId in the\nClassInfo, ArrayInfo, BinaryObjectString, and BinaryArray records, and the LibraryId in the\nBinaryLibrary record. The maximum value is 2,147,483,647.\n\n\n                                           52 / 55\n[MS-NRBF] - v20190313\n.NET Remoting: Binary Format Data Structure\nCopyright © 2019 Microsoft Corporation\nRelease: March 13, 2019",
      "md": "\n# .NET Remoting: Binary Format Data Structure\n\nCopyright © 2019 Microsoft Corporation\n\nRelease: March 13, 2019\n\n# Section 2.3.1.1\n\nIn Windows, the order of the Members can vary for each occurrence of the record for a given class.\n\n# Section 2.4\n\nWindows uses ObjectNullMultiple256 if the number of sequential Null Objects is 255 or fewer. Windows uses ObjectNullMultiple if the number of sequential Null Objects is greater than 255.\n\n# Section 2.4.2.1\n\nWindows uses a single counter that counts from 1 to generate the ObjectId in the ClassInfo, ArrayInfo, BinaryObjectString, and BinaryArray records, and the LibraryId in the BinaryLibrary record. The maximum value is 2,147,483,647.\n\n# Section 2.4.3.1\n\nWindows uses a single counter that counts from 1 to generate the ObjectId in the ClassInfo, ArrayInfo, BinaryObjectString, and BinaryArray records, and the LibraryId in the BinaryLibrary record. The maximum value is 2,147,483,647.\n\n# Section 2.5.3\n\nWindows places the record that defines the ID before or after the referencing record.\n\n# Section 2.5.7\n\nWindows uses a single counter that counts from 1 to generate the ObjectId in the ClassInfo, ArrayInfo, BinaryObjectString, and BinaryArray records, and the LibraryId in the BinaryLibrary record. The maximum value is 2,147,483,647.\n\n# Section 2.6.2\n\nWindows uses a single counter that counts from 1 to generate the ObjectId in the ClassInfo, ArrayInfo, BinaryObjectString, and BinaryArray records, and the LibraryId in the BinaryLibrary record. The maximum value is 2,147,483,647.\n\n52 / 55\n\n",
      "images": [
      ],
      "charts": [
      ],
      "items": [
        {
          "type": "heading",
          "lvl": 1,
          "value": ".NET Remoting: Binary Format Data Structure",
          "md": "# .NET Remoting: Binary Format Data Structure",
          "bBox": {
            "x": 72.1,
            "y": 724.35,
            "w": 182.82,
            "h": 8
          }
        },
        {
          "type": "text",
          "value": "Copyright © 2019 Microsoft Corporation\n\nRelease: March 13, 2019",
          "md": "Copyright © 2019 Microsoft Corporation\n\nRelease: March 13, 2019",
          "bBox": {
            "x": 72.1,
            "y": 735.25,
            "w": 161.18,
            "h": 18.9
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "Section 2.3.1.1",
          "md": "# Section 2.3.1.1",
          "bBox": {
            "x": 0,
            "y": 0,
            "w": 612,
            "h": 792
          }
        },
        {
          "type": "text",
          "value": "In Windows, the order of the Members can vary for each occurrence of the record for a given class.",
          "md": "In Windows, the order of the Members can vary for each occurrence of the record for a given class.",
          "bBox": {
            "x": 72.1,
            "y": 67.45,
            "w": 76.21,
            "h": 9
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "Section 2.4",
          "md": "# Section 2.4",
          "bBox": {
            "x": 0,
            "y": 0,
            "w": 612,
            "h": 792
          }
        },
        {
          "type": "text",
          "value": "Windows uses ObjectNullMultiple256 if the number of sequential Null Objects is 255 or fewer. Windows uses ObjectNullMultiple if the number of sequential Null Objects is greater than 255.",
          "md": "Windows uses ObjectNullMultiple256 if the number of sequential Null Objects is 255 or fewer. Windows uses ObjectNullMultiple if the number of sequential Null Objects is greater than 255.",
          "bBox": {
            "x": 72.1,
            "y": 101.05,
            "w": 466.93,
            "h": 9
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "Section 2.4.2.1",
          "md": "# Section 2.4.2.1",
          "bBox": {
            "x": 0,
            "y": 0,
            "w": 612,
            "h": 792
          }
        },
        {
          "type": "text",
          "value": "Windows uses a single counter that counts from 1 to generate the ObjectId in the ClassInfo, ArrayInfo, BinaryObjectString, and BinaryArray records, and the LibraryId in the BinaryLibrary record. The maximum value is 2,147,483,647.",
          "md": "Windows uses a single counter that counts from 1 to generate the ObjectId in the ClassInfo, ArrayInfo, BinaryObjectString, and BinaryArray records, and the LibraryId in the BinaryLibrary record. The maximum value is 2,147,483,647.",
          "bBox": {
            "x": 72.1,
            "y": 134.65,
            "w": 405.74,
            "h": 192.6
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "Section 2.4.3.1",
          "md": "# Section 2.4.3.1",
          "bBox": {
            "x": 0,
            "y": 0,
            "w": 612,
            "h": 792
          }
        },
        {
          "type": "text",
          "value": "Windows uses a single counter that counts from 1 to generate the ObjectId in the ClassInfo, ArrayInfo, BinaryObjectString, and BinaryArray records, and the LibraryId in the BinaryLibrary record. The maximum value is 2,147,483,647.",
          "md": "Windows uses a single counter that counts from 1 to generate the ObjectId in the ClassInfo, ArrayInfo, BinaryObjectString, and BinaryArray records, and the LibraryId in the BinaryLibrary record. The maximum value is 2,147,483,647.",
          "bBox": {
            "x": 72.1,
            "y": 134.65,
            "w": 405.74,
            "h": 192.6
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "Section 2.5.3",
          "md": "# Section 2.5.3",
          "bBox": {
            "x": 0,
            "y": 0,
            "w": 612,
            "h": 792
          }
        },
        {
          "type": "text",
          "value": "Windows places the record that defines the ID before or after the referencing record.",
          "md": "Windows places the record that defines the ID before or after the referencing record.",
          "bBox": {
            "x": 72.1,
            "y": 226.45,
            "w": 32,
            "h": 9
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "Section 2.5.7",
          "md": "# Section 2.5.7",
          "bBox": {
            "x": 0,
            "y": 0,
            "w": 612,
            "h": 792
          }
        },
        {
          "type": "text",
          "value": "Windows uses a single counter that counts from 1 to generate the ObjectId in the ClassInfo, ArrayInfo, BinaryObjectString, and BinaryArray records, and the LibraryId in the BinaryLibrary record. The maximum value is 2,147,483,647.",
          "md": "Windows uses a single counter that counts from 1 to generate the ObjectId in the ClassInfo, ArrayInfo, BinaryObjectString, and BinaryArray records, and the LibraryId in the BinaryLibrary record. The maximum value is 2,147,483,647.",
          "bBox": {
            "x": 72.1,
            "y": 134.65,
            "w": 405.74,
            "h": 192.6
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "Section 2.6.2",
          "md": "# Section 2.6.2",
          "bBox": {
            "x": 0,
            "y": 0,
            "w": 612,
            "h": 792
          }
        },
        {
          "type": "text",
          "value": "Windows uses a single counter that counts from 1 to generate the ObjectId in the ClassInfo, ArrayInfo, BinaryObjectString, and BinaryArray records, and the LibraryId in the BinaryLibrary record. The maximum value is 2,147,483,647.\n\n52 / 55",
          "md": "Windows uses a single counter that counts from 1 to generate the ObjectId in the ClassInfo, ArrayInfo, BinaryObjectString, and BinaryArray records, and the LibraryId in the BinaryLibrary record. The maximum value is 2,147,483,647.\n\n52 / 55",
          "bBox": {
            "x": 72.1,
            "y": 134.65,
            "w": 467.9,
            "h": 569.9
          }
        }
      ],
      "status": "OK",
      "originalOrientationAngle": 0,
      "links": [
      ],
      "width": 612,
      "height": 792,
      "triggeredAutoMode": false,
      "parsingMode": "accurate",
      "structuredData": null,
      "noStructuredContent": false,
      "noTextContent": false,
      "pageHeaderMarkdown": "\n# .NET Remoting: Binary Format Data Structure\n\nCopyright © 2019 Microsoft Corporation\n\nRelease: March 13, 2019\n\n",
      "pageFooterMarkdown": "\n52 / 55\n\n",
      "confidence": 0.973
    },
    {
      "page": 53,
      "text": "6     Change Tracking\n\nThis section identifies changes that were made to this document since the last release. Changes are\nclassified as Major, Minor, or None.\n\nThe revision class Major means that the technical content in the document was significantly revised.\nMajor changes affect protocol interoperability or implementation. Examples of major changes are:\n\n§     A document revision that incorporates changes to interoperability requirements.\n§     A document revision that captures changes to protocol functionality.\n\nThe revision class Minor means that the meaning of the technical content was clarified. Minor changes\ndo not affect protocol interoperability or implementation. Examples of minor changes are updates to\nclarify ambiguity at the sentence, paragraph, or table level.\n\nThe revision class None means that no new technical changes were introduced. Minor editorial and\nformatting changes may have been made, but the relevant technical content is identical to the last\nreleased version.\n\nThe changes made to this document are listed in the following table. For more information, please\ncontact dochelp@microsoft.com.\n\n       Section                    Description                                                         Revision\n                                                                                                      class\n\n       2.1.2.2                    9220 : Updated the term \"string\" to \"String\" in the Description     Major\n       BinaryTypeEnumeration      column for the SystemClass and StringArray rows of the table.\n\n       2.3.1.2 MemberTypeInfo     9220 : Changed the description of the number of items in the        Major\n                                  BinaryTypeEnums structure.\n\n       5 Appendix A: Product      Added .NET Framework v4.8 to the applicability list.                Major\n       Behavior\n\n\n                                           53 / 55\n[MS-NRBF] - v20190313\n.NET Remoting: Binary Format Data Structure\nCopyright © 2019 Microsoft Corporation\nRelease: March 13, 2019",
      "md": "\n6 Change Tracking\n\nThis section identifies changes that were made to this document since the last release. Changes are classified as Major, Minor, or None.\n\nThe revision class Major means that the technical content in the document was significantly revised. Major changes affect protocol interoperability or implementation. Examples of major changes are:\n\n- A document revision that incorporates changes to interoperability requirements.\n- A document revision that captures changes to protocol functionality.\n\nThe revision class Minor means that the meaning of the technical content was clarified. Minor changes do not affect protocol interoperability or implementation. Examples of minor changes are updates to clarify ambiguity at the sentence, paragraph, or table level.\n\nThe revision class None means that no new technical changes were introduced. Minor editorial and formatting changes may have been made, but the relevant technical content is identical to the last released version.\n\nThe changes made to this document are listed in the following table. For more information, please contact dochelp@microsoft.com.\n\n| Section                        | Description                                                                                                                   | Revision class |\n| ------------------------------ | ----------------------------------------------------------------------------------------------------------------------------- | -------------- |\n| 2.1.2.2                        | 9220 : Updated the term \"string\" to \"String\" in the Description column for the SystemClass and StringArray rows of the table. | Major          |\n| 2.3.1.2 MemberTypeInfo         | 9220 : Changed the description of the number of items in the BinaryTypeEnums structure.                                       | Major          |\n| 5 Appendix A: Product Behavior | Added .NET Framework v4.8 to the applicability list.                                                                          | Major          |\n\n53 / 55\n[MS-NRBF] - v20190313\n.NET Remoting: Binary Format Data Structure\nCopyright © 2019 Microsoft Corporation\nRelease: March 13, 2019\n",
      "images": [
      ],
      "charts": [
      ],
      "items": [
        {
          "type": "text",
          "value": "6 Change Tracking\n\nThis section identifies changes that were made to this document since the last release. Changes are classified as Major, Minor, or None.\n\nThe revision class Major means that the technical content in the document was significantly revised. Major changes affect protocol interoperability or implementation. Examples of major changes are:\n\n- A document revision that incorporates changes to interoperability requirements.\n- A document revision that captures changes to protocol functionality.\n\nThe revision class Minor means that the meaning of the technical content was clarified. Minor changes do not affect protocol interoperability or implementation. Examples of minor changes are updates to clarify ambiguity at the sentence, paragraph, or table level.\n\nThe revision class None means that no new technical changes were introduced. Minor editorial and formatting changes may have been made, but the relevant technical content is identical to the last released version.\n\nThe changes made to this document are listed in the following table. For more information, please contact dochelp@microsoft.com.",
          "md": "6 Change Tracking\n\nThis section identifies changes that were made to this document since the last release. Changes are classified as Major, Minor, or None.\n\nThe revision class Major means that the technical content in the document was significantly revised. Major changes affect protocol interoperability or implementation. Examples of major changes are:\n\n- A document revision that incorporates changes to interoperability requirements.\n- A document revision that captures changes to protocol functionality.\n\nThe revision class Minor means that the meaning of the technical content was clarified. Minor changes do not affect protocol interoperability or implementation. Examples of minor changes are updates to clarify ambiguity at the sentence, paragraph, or table level.\n\nThe revision class None means that no new technical changes were introduced. Minor editorial and formatting changes may have been made, but the relevant technical content is identical to the last released version.\n\nThe changes made to this document are listed in the following table. For more information, please contact dochelp@microsoft.com.",
          "bBox": {
            "x": 72.1,
            "y": 62.55,
            "w": 467.36,
            "h": 363.1
          }
        },
        {
          "type": "table",
          "rows": [
            [
              "Section",
              "Description",
              "Revision class"
            ],
            [
              "2.1.2.2",
              "9220 : Updated the term \"string\" to \"String\" in the Description column for the SystemClass and StringArray rows of the table.",
              "Major"
            ],
            [
              "2.3.1.2 MemberTypeInfo",
              "9220 : Changed the description of the number of items in the BinaryTypeEnums structure.",
              "Major"
            ],
            [
              "5 Appendix A: Product Behavior",
              "Added .NET Framework v4.8 to the applicability list.",
              "Major"
            ]
          ],
          "md": "| Section                        | Description                                                                                                                   | Revision class |\n| ------------------------------ | ----------------------------------------------------------------------------------------------------------------------------- | -------------- |\n| 2.1.2.2                        | 9220 : Updated the term \"string\" to \"String\" in the Description column for the SystemClass and StringArray rows of the table. | Major          |\n| 2.3.1.2 MemberTypeInfo         | 9220 : Changed the description of the number of items in the BinaryTypeEnums structure.                                       | Major          |\n| 5 Appendix A: Product Behavior | Added .NET Framework v4.8 to the applicability list.                                                                          | Major          |",
          "isPerfectTable": true,
          "csv": "\"Section\",\"Description\",\"Revision class\"\n\"2.1.2.2\",\"9220 : Updated the term \"\"string\"\" to \"\"String\"\" in the Description column for the SystemClass and StringArray rows of the table.\",\"Major\"\n\"2.3.1.2 MemberTypeInfo\",\"9220 : Changed the description of the number of items in the BinaryTypeEnums structure.\",\"Major\"\n\"5 Appendix A: Product Behavior\",\"Added .NET Framework v4.8 to the applicability list.\",\"Major\"",
          "bBox": {
            "x": 72.1,
            "y": 87.55,
            "w": 467.36,
            "h": 338.1
          }
        },
        {
          "type": "text",
          "value": "53 / 55\n[MS-NRBF] - v20190313\n.NET Remoting: Binary Format Data Structure\nCopyright © 2019 Microsoft Corporation\nRelease: March 13, 2019",
          "md": "53 / 55\n[MS-NRBF] - v20190313\n.NET Remoting: Binary Format Data Structure\nCopyright © 2019 Microsoft Corporation\nRelease: March 13, 2019",
          "bBox": {
            "x": 72.1,
            "y": 696.55,
            "w": 467.9,
            "h": 57.6
          }
        }
      ],
      "status": "OK",
      "originalOrientationAngle": 0,
      "links": [
        {
          "url": "mailto:dochelp@microsoft.com",
          "unsafeUrl": "mailto:dochelp@microsoft.com",
          "text": "dochelp@microsoft.com ."
        }
      ],
      "width": 612,
      "height": 792,
      "triggeredAutoMode": false,
      "parsingMode": "accurate",
      "structuredData": null,
      "noStructuredContent": false,
      "noTextContent": false,
      "pageHeaderMarkdown": "\n6 Change Tracking\n",
      "pageFooterMarkdown": "\n53 / 55\n[MS-NRBF] - v20190313\n.NET Remoting: Binary Format Data Structure\nCopyright © 2019 Microsoft Corporation\nRelease: March 13, 2019\n",
      "confidence": 0.986
    },
    {
      "page": 54,
      "text": "7    Index\nA                                                      ClassWithMembersAndTypes packet 30\n                                                       Common data types 13\nApplicability 12                                       Common definitions 13\nArgsInArray 22                                         Common enumerations 18\nArgsInline 22                                          ContextInArray 22\nArgsIsArray 22                                         ContextInline 22\nArray records\n common definitions 34                                 D\n data types 13\n enumerations (section 2.1.2 18, section 2.4.1 33)     DateTime 20\n overview 33                                           DateTime packet 14\n record definitions 34                                 Decimal 20\nArrayInfo packet 34                                    Decimal packet 17\nArrayOfValueWithCode packet 24                         Double 20\nArraySingleObject 18                                   Double packet 13\nArraySingleObject packet 36\nArraySinglePrimitive 18                                E\nArraySinglePrimitive packet 36\nArraySingleString 18                                   Examples 44\nArraySingleString packet 36                            Examples - structure 44\n                                                       ExceptionInArray 22\nB\n                                                       F\nBinary records grammar 42\nBinaryArray 18                                         Fields - vendor-extensible 12\nBinaryArray packet 34\nBinaryLibrary 18                                       G\nBinaryLibrary packet 41\nBinaryMethodCall packet 25                             GenericMethod 22\nBinaryMethodReturn packet 26                           Glossary 7\nBinaryObjectString 18                                  Grammar - binary records 42\nBinaryObjectString packet 39\nBoolean 20                                             I\nByte 20\n\nC                                                      Implementer - security considerations 50\n                                                       Informative references 10\n                                                       Int16 20\nChange tracking 53                                     Int32 20\nChar 20                                                Int64 20\nChar packet 13                                         Introduction 7\nClass 19\nClass records                                          J\n data types 13\n enumerations 18                                       Jagged 33\n overview 28                                           JaggedOffset 33\n record definitions 30\n structures 28                                         L\nClassInfo packet 28\nClassTypeInfo packet 18                                LengthPrefixedString packet 15\nClassWithId 18                                         Localization 12\nClassWithId packet 32\nClassWithMembers 18                                    M\nClassWithMembers packet 31\nClassWithMembersAndTypes 18\n\n                                                                                               54 / 55\n\n[MS-NRBF] - v20190313\n.NET Remoting: Binary Format Data Structure\nCopyright © 2019 Microsoft Corporation\nRelease: March 13, 2019",
      "md": "\n# Index\n\n# A\n\nClassWithMembersAndTypes packet 30\n\nCommon data types 13\n\nApplicability 12\n\nCommon definitions 13\n\nArgsInArray 22\n\nCommon enumerations 18\n\nArgsInline 22\n\nContextInArray 22\n\nArgsIsArray 22\n\nContextInline 22\n\n# Array records\n\ncommon definitions 34\n\ndata types 13\n\nenumerations (section 2.1.2 18, section 2.4.1 33)\n\noverview 33\n\nrecord definitions 34\n\nArrayInfo packet 34\n\nArrayOfValueWithCode packet 24\n\nArraySingleObject 18\n\nArraySingleObject packet 36\n\nArraySinglePrimitive 18\n\nArraySinglePrimitive packet 36\n\nArraySingleString 18\n\nArraySingleString packet 36\n\n# B\n\nBinary records grammar 42\n\nBinaryArray 18\n\nBinaryArray packet 34\n\nBinaryLibrary 18\n\nBinaryLibrary packet 41\n\nBinaryMethodCall packet 25\n\nBinaryMethodReturn packet 26\n\nBinaryObjectString 18\n\nBinaryObjectString packet 39\n\nBoolean 20\n\nByte 20\n\n# C\n\nChange tracking 53\n\nChar 20\n\nChar packet 13\n\nClass 19\n\n# Class records\n\ndata types 13\n\nenumerations 18\n\noverview 28\n\nrecord definitions 30\n\nstructures 28\n\nClassInfo packet 28\n\nClassTypeInfo packet 18\n\nClassWithId 18\n\nClassWithId packet 32\n\nClassWithMembers 18\n\nClassWithMembers packet 31\n\nClassWithMembersAndTypes 18\n\n# D\n\nDateTime 20\n\nDateTime packet 14\n\nDecimal 20\n\nDecimal packet 17\n\nDouble 20\n\nDouble packet 13\n\n# E\n\nExamples 44\n\nExamples - structure 44\n\nExceptionInArray 22\n\n# F\n\nFields - vendor-extensible 12\n\n# G\n\nGenericMethod 22\n\nGlossary 7\n\nGrammar - binary records 42\n\n# I\n\nImplementer - security considerations 50\n\nInformative references 10\n\nInt16 20\n\nInt32 20\n\nInt64 20\n\n# J\n\nJagged 33\n\nJaggedOffset 33\n\n# L\n\nLengthPrefixedString packet 15\n\nLocalization 12\n\n# M\n\nClassWithMembersAndTypes 18\n\n[MS-NRBF] - v20190313\n\n.NET Remoting: Binary Format Data Structure\n\nCopyright © 2019 Microsoft Corporation\n\nRelease: March 13, 2019\n\n",
      "images": [
      ],
      "charts": [
      ],
      "items": [
        {
          "type": "heading",
          "lvl": 1,
          "value": "Index",
          "md": "# Index",
          "bBox": {
            "x": 93.7,
            "y": 71.55,
            "w": 237.4,
            "h": 382.4
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "A",
          "md": "# A",
          "bBox": {
            "x": 72.1,
            "y": 90.55,
            "w": 7,
            "h": 9
          }
        },
        {
          "type": "text",
          "value": "ClassWithMembersAndTypes packet 30\n\nCommon data types 13\n\nApplicability 12\n\nCommon definitions 13\n\nArgsInArray 22\n\nCommon enumerations 18\n\nArgsInline 22\n\nContextInArray 22\n\nArgsIsArray 22\n\nContextInline 22",
          "md": "ClassWithMembersAndTypes packet 30\n\nCommon data types 13\n\nApplicability 12\n\nCommon definitions 13\n\nArgsInArray 22\n\nCommon enumerations 18\n\nArgsInline 22\n\nContextInArray 22\n\nArgsIsArray 22\n\nContextInline 22",
          "bBox": {
            "x": 72.1,
            "y": 90.45,
            "w": 409.95,
            "h": 574.8
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "Array records",
          "md": "# Array records",
          "bBox": {
            "x": 72.1,
            "y": 90.55,
            "w": 259,
            "h": 393.3
          }
        },
        {
          "type": "text",
          "value": "common definitions 34\n\ndata types 13\n\nenumerations (section 2.1.2 18, section 2.4.1 33)\n\noverview 33\n\nrecord definitions 34\n\nArrayInfo packet 34\n\nArrayOfValueWithCode packet 24\n\nArraySingleObject 18\n\nArraySingleObject packet 36\n\nArraySinglePrimitive 18\n\nArraySinglePrimitive packet 36\n\nArraySingleString 18\n\nArraySingleString packet 36",
          "md": "common definitions 34\n\ndata types 13\n\nenumerations (section 2.1.2 18, section 2.4.1 33)\n\noverview 33\n\nrecord definitions 34\n\nArrayInfo packet 34\n\nArrayOfValueWithCode packet 24\n\nArraySingleObject 18\n\nArraySingleObject packet 36\n\nArraySinglePrimitive 18\n\nArraySinglePrimitive packet 36\n\nArraySingleString 18\n\nArraySingleString packet 36",
          "bBox": {
            "x": 72.1,
            "y": 90.55,
            "w": 261,
            "h": 574.7
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "B",
          "md": "# B",
          "bBox": {
            "x": 72.1,
            "y": 320.85,
            "w": 7,
            "h": 9
          }
        },
        {
          "type": "text",
          "value": "Binary records grammar 42\n\nBinaryArray 18\n\nBinaryArray packet 34\n\nBinaryLibrary 18\n\nBinaryLibrary packet 41\n\nBinaryMethodCall packet 25\n\nBinaryMethodReturn packet 26\n\nBinaryObjectString 18\n\nBinaryObjectString packet 39\n\nBoolean 20\n\nByte 20",
          "md": "Binary records grammar 42\n\nBinaryArray 18\n\nBinaryArray packet 34\n\nBinaryLibrary 18\n\nBinaryLibrary packet 41\n\nBinaryMethodCall packet 25\n\nBinaryMethodReturn packet 26\n\nBinaryObjectString 18\n\nBinaryObjectString packet 39\n\nBoolean 20\n\nByte 20",
          "bBox": {
            "x": 72.1,
            "y": 90.55,
            "w": 261,
            "h": 574.7
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "C",
          "md": "# C",
          "bBox": {
            "x": 72.1,
            "y": 474.85,
            "w": 7,
            "h": 9
          }
        },
        {
          "type": "text",
          "value": "Change tracking 53\n\nChar 20\n\nChar packet 13\n\nClass 19",
          "md": "Change tracking 53\n\nChar 20\n\nChar packet 13\n\nClass 19",
          "bBox": {
            "x": 72.1,
            "y": 90.55,
            "w": 259,
            "h": 518.8
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "Class records",
          "md": "# Class records",
          "bBox": {
            "x": 72.1,
            "y": 90.55,
            "w": 259,
            "h": 518.8
          }
        },
        {
          "type": "text",
          "value": "data types 13\n\nenumerations 18\n\noverview 28\n\nrecord definitions 30\n\nstructures 28\n\nClassInfo packet 28\n\nClassTypeInfo packet 18\n\nClassWithId 18\n\nClassWithId packet 32\n\nClassWithMembers 18\n\nClassWithMembers packet 31\n\nClassWithMembersAndTypes 18",
          "md": "data types 13\n\nenumerations 18\n\noverview 28\n\nrecord definitions 30\n\nstructures 28\n\nClassInfo packet 28\n\nClassTypeInfo packet 18\n\nClassWithId 18\n\nClassWithId packet 32\n\nClassWithMembers 18\n\nClassWithMembers packet 31\n\nClassWithMembersAndTypes 18",
          "bBox": {
            "x": 72.1,
            "y": 90.55,
            "w": 261,
            "h": 589.8
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "D",
          "md": "# D",
          "bBox": {
            "x": 324.1,
            "y": 166.85,
            "w": 7,
            "h": 9
          }
        },
        {
          "type": "text",
          "value": "DateTime 20\n\nDateTime packet 14\n\nDecimal 20\n\nDecimal packet 17\n\nDouble 20\n\nDouble packet 13",
          "md": "DateTime 20\n\nDateTime packet 14\n\nDecimal 20\n\nDecimal packet 17\n\nDouble 20\n\nDouble packet 13",
          "bBox": {
            "x": 72.1,
            "y": 71.55,
            "w": 333.05,
            "h": 593.7
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "E",
          "md": "# E",
          "bBox": {
            "x": 324.1,
            "y": 266.35,
            "w": 6,
            "h": 9
          }
        },
        {
          "type": "text",
          "value": "Examples 44\n\nExamples - structure 44\n\nExceptionInArray 22",
          "md": "Examples 44\n\nExamples - structure 44\n\nExceptionInArray 22",
          "bBox": {
            "x": 72.1,
            "y": 90.55,
            "w": 347.8,
            "h": 574.7
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "F",
          "md": "# F",
          "bBox": {
            "x": 324.1,
            "y": 333.15,
            "w": 6,
            "h": 9
          }
        },
        {
          "type": "text",
          "value": "Fields - vendor-extensible 12",
          "md": "Fields - vendor-extensible 12",
          "bBox": {
            "x": 72.1,
            "y": 166.85,
            "w": 367.95,
            "h": 442.5
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "G",
          "md": "# G",
          "bBox": {
            "x": 324.1,
            "y": 378.15,
            "w": 7,
            "h": 9
          }
        },
        {
          "type": "text",
          "value": "GenericMethod 22\n\nGlossary 7\n\nGrammar - binary records 42",
          "md": "GenericMethod 22\n\nGlossary 7\n\nGrammar - binary records 42",
          "bBox": {
            "x": 72.1,
            "y": 71.55,
            "w": 368.5,
            "h": 593.7
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "I",
          "md": "# I",
          "bBox": {
            "x": 324.1,
            "y": 444.95,
            "w": 3,
            "h": 9
          }
        },
        {
          "type": "text",
          "value": "Implementer - security considerations 50\n\nInformative references 10\n\nInt16 20\n\nInt32 20\n\nInt64 20",
          "md": "Implementer - security considerations 50\n\nInformative references 10\n\nInt16 20\n\nInt32 20\n\nInt64 20",
          "bBox": {
            "x": 72.1,
            "y": 90.55,
            "w": 416.9,
            "h": 574.7
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "J",
          "md": "# J",
          "bBox": {
            "x": 324.1,
            "y": 544.45,
            "w": 3,
            "h": 9
          }
        },
        {
          "type": "text",
          "value": "Jagged 33\n\nJaggedOffset 33",
          "md": "Jagged 33\n\nJaggedOffset 33",
          "bBox": {
            "x": 72.1,
            "y": 90.55,
            "w": 316.05,
            "h": 495.9
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "L",
          "md": "# L",
          "bBox": {
            "x": 324.1,
            "y": 600.35,
            "w": 6,
            "h": 9
          }
        },
        {
          "type": "text",
          "value": "LengthPrefixedString packet 15\n\nLocalization 12",
          "md": "LengthPrefixedString packet 15\n\nLocalization 12",
          "bBox": {
            "x": 72.1,
            "y": 90.55,
            "w": 378.5,
            "h": 551.8
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "M",
          "md": "# M",
          "bBox": {
            "x": 324.1,
            "y": 656.25,
            "w": 9,
            "h": 9
          }
        },
        {
          "type": "text",
          "value": "ClassWithMembersAndTypes 18\n\n[MS-NRBF] - v20190313\n\n.NET Remoting: Binary Format Data Structure\n\nCopyright © 2019 Microsoft Corporation\n\nRelease: March 13, 2019",
          "md": "ClassWithMembersAndTypes 18\n\n[MS-NRBF] - v20190313\n\n.NET Remoting: Binary Format Data Structure\n\nCopyright © 2019 Microsoft Corporation\n\nRelease: March 13, 2019",
          "bBox": {
            "x": 72.1,
            "y": 90.55,
            "w": 261,
            "h": 663.6
          }
        }
      ],
      "status": "OK",
      "originalOrientationAngle": 0,
      "links": [
      ],
      "width": 612,
      "height": 792,
      "triggeredAutoMode": false,
      "parsingMode": "accurate",
      "structuredData": null,
      "noStructuredContent": false,
      "noTextContent": false,
      "pageHeaderMarkdown": "\n# Index\n\n",
      "pageFooterMarkdown": "\n[MS-NRBF] - v20190313\n\n.NET Remoting: Binary Format Data Structure\n\nCopyright © 2019 Microsoft Corporation\n\nRelease: March 13, 2019\n\n",
      "confidence": 0.977
    },
    {
      "page": 55,
      "text": "Member reference records 37                            Relationship to protocols and other structures 11\n data types 13                                         ReturnValueInArray 22\n enumerations 18                                       ReturnValueInline 22\nMemberPrimitiveTyped 18                                ReturnValueVoid 22\nMemberPrimitiveTyped packet 37\nMemberPrimitiveUnTyped packet 37                       S\nMemberReference 18\nMemberReference packet 38                              SByte 20\nMemberTypeInfo packet 29                               Security 50\nMessageEnd 18                                          Security - implementer considerations 50\nMessageEnd packet 41                                   SerializationHeaderRecord packet 40\nMethod invocation records                              SerializedStreamHeader 18\n data types 13                                         Single (section 2.1.2.3 20, section 2.4.1.1 33)\n enumerations (section 2.1.2 18, section 2.2.1 22)     Single packet 14\n overview 21                                           SingleOffset 33\n record definitions 25                                 String (section 2.1.2.2 19, section 2.1.2.3 20)\n structures 24                                         StringArray 19\nMethodCall 18                                          StringValueWithCode packet 24\nMethodReturn 18                                        Structure examples 44\nMethodSignatureInArray 22                              Structures 13\n                                                       SystemClass 19\nN                                                      SystemClassWithMembers 18\n                                                       SystemClassWithMembers packet 32\nNoArgs 22                                              SystemClassWithMembersAndTypes 18\nNoContext 22                                           SystemClassWithMembersAndTypes packet 31\nNoReturnValue 22\nNormative references 10                                T\nNull 20\n                                                       TimeSpan 20\nO                                                      TimeSpan packet 14\n                                                       Tracking changes 53\nObject 19\nObjectArray 19                                         U\nObjectNull 18\nObjectNull packet 38                                   UInt16 20\nObjectNullMultiple 18                                  UInt32 20\nObjectNullMultiple packet 39                           UInt64 20\nObjectNullMultiple256 18\nObjectNullMultiple256 packet 39                        V\nOther records (section 2.1.1 13, section 2.6 40)\nOverview (synopsis) 11                                 ValueWithCode packet 24\n                                                       Vendor-extensible fields 12\nP                                                      Versioning 12\n\nPrimitive 19\nPrimitiveArray 19\nProduct behavior 51\nPropertiesInArray 22\n\nR\n\nRectangular 33\nRectangularOffset 33\nReferences 10\n informative 10\n normative 10\nRelationship to other protocols 11\n\n                                                                                                      55 / 55\n\n[MS-NRBF] - v20190313\n.NET Remoting: Binary Format Data Structure\nCopyright © 2019 Microsoft Corporation\nRelease: March 13, 2019",
      "md": "[MS-NRBF] - v20190313\n# .NET Remoting: Binary Format Data Structure\n\nCopyright © 2019 Microsoft Corporation\n\nRelease: March 13, 2019\n\n# Member reference records\n\n| 37 | Relationship to protocols and other structures | 11 |\n| -- | ---------------------------------------------- | -- |\n\n# Data types\n\n| 13 | Enumerations | 18 |\n| -- | ------------ | -- |\n\n# MemberPrimitiveTyped\n\n| 18 | MemberPrimitiveTyped packet | 37 |\n| -- | --------------------------- | -- |\n\n# MemberPrimitiveUnTyped\n\n| packet | 37 | S |\n| ------ | -- | - |\n\n# MemberReference\n\n| 18 | MemberReference packet | 38 |\n| -- | ---------------------- | -- |\n\n# MemberTypeInfo\n\n| packet | 29 | Security | 50 |\n| ------ | -- | -------- | -- |\n\n# MessageEnd\n\n| 18 | MessageEnd packet | 41 |\n| -- | ----------------- | -- |\n\n# Method invocation records\n\n| Data types   | 13             |                    |                |            |    |\n| ------------ | -------------- | ------------------ | -------------- | ---------- | -- |\n| Enumerations | (section 2.1.2 | 18                 | (section 2.2.1 | 22)        |    |\n| Overview     | 21             | Record definitions | 25             | Structures | 24 |\n\n# MethodCall\n\n| 18 | MethodReturn | 18 |\n| -- | ------------ | -- |\n\n# MethodSignatureInArray\n\n22\n\n# Normative references\n\n10\n\n# Null\n\n20\n\n# Object\n\n| 19 | ObjectArray | 19 |\n| -- | ----------- | -- |\n\n# ObjectNull\n\n| 18 | ObjectNull packet | 38 |\n| -- | ----------------- | -- |\n\n# ObjectNullMultiple\n\n| 18 | ObjectNullMultiple packet | 39 |\n| -- | ------------------------- | -- |\n\n# Other records\n\n| (section 2.1.1 | 13 | (section 2.6 | 40) |\n| -------------- | -- | ------------ | --- |\n\n# Overview (synopsis)\n\n11\n\n# Primitive\n\n| 19 | PrimitiveArray | 19 |\n| -- | -------------- | -- |\n\n# Product behavior\n\n51\n\n# PropertiesInArray\n\n22\n\n# Rectangular\n\n| 33 | RectangularOffset | 33 |\n| -- | ----------------- | -- |\n\n# References\n\n| 10 | Informative | 10 | Normative | 10 |\n| -- | ----------- | -- | --------- | -- |\n\n# Relationship to other protocols\n\n11\n\n55 / 55",
      "images": [
      ],
      "charts": [
      ],
      "items": [
        {
          "type": "text",
          "value": "[MS-NRBF] - v20190313",
          "md": "[MS-NRBF] - v20190313",
          "bBox": {
            "x": 72.1,
            "y": 109.65,
            "w": 259,
            "h": 611.8
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": ".NET Remoting: Binary Format Data Structure",
          "md": "# .NET Remoting: Binary Format Data Structure",
          "bBox": {
            "x": 72.1,
            "y": 109.65,
            "w": 259,
            "h": 622.7
          }
        },
        {
          "type": "text",
          "value": "Copyright © 2019 Microsoft Corporation\n\nRelease: March 13, 2019",
          "md": "Copyright © 2019 Microsoft Corporation\n\nRelease: March 13, 2019",
          "bBox": {
            "x": 72.1,
            "y": 109.65,
            "w": 258,
            "h": 644.5
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "Member reference records",
          "md": "# Member reference records",
          "bBox": {
            "x": 72.1,
            "y": 109.65,
            "w": 258,
            "h": 492.8
          }
        },
        {
          "type": "table",
          "rows": [
            [
              "37",
              "Relationship to protocols and other structures",
              "11"
            ]
          ],
          "md": "| 37 | Relationship to protocols and other structures | 11 |\n| -- | ---------------------------------------------- | -- |",
          "isPerfectTable": true,
          "csv": "\"37\",\"Relationship to protocols and other structures\",\"11\"",
          "bBox": {
            "x": 72.1,
            "y": 55.05,
            "w": 448.7,
            "h": 624
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "Data types",
          "md": "# Data types",
          "bBox": {
            "x": 72.1,
            "y": 109.65,
            "w": 258,
            "h": 415.1
          }
        },
        {
          "type": "table",
          "rows": [
            [
              "13",
              "Enumerations",
              "18"
            ]
          ],
          "md": "| 13 | Enumerations | 18 |\n| -- | ------------ | -- |",
          "isPerfectTable": true,
          "csv": "\"13\",\"Enumerations\",\"18\"",
          "bBox": {
            "x": 72.1,
            "y": 65.95,
            "w": 434.2,
            "h": 688.2
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "MemberPrimitiveTyped",
          "md": "# MemberPrimitiveTyped",
          "bBox": {
            "x": 72.1,
            "y": 339.95,
            "w": 259,
            "h": 262.5
          }
        },
        {
          "type": "table",
          "rows": [
            [
              "18",
              "MemberPrimitiveTyped packet",
              "37"
            ]
          ],
          "md": "| 18 | MemberPrimitiveTyped packet | 37 |\n| -- | --------------------------- | -- |",
          "isPerfectTable": true,
          "csv": "\"18\",\"MemberPrimitiveTyped packet\",\"37\"",
          "bBox": {
            "x": 72.1,
            "y": 55.05,
            "w": 410.2,
            "h": 414.1
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "MemberPrimitiveUnTyped",
          "md": "# MemberPrimitiveUnTyped",
          "bBox": {
            "x": 72.1,
            "y": 284.05,
            "w": 259,
            "h": 318.4
          }
        },
        {
          "type": "table",
          "rows": [
            [
              "packet",
              "37",
              "S"
            ]
          ],
          "md": "| packet | 37 | S |\n| ------ | -- | - |",
          "isPerfectTable": true,
          "csv": "\"packet\",\"37\",\"S\"",
          "bBox": {
            "x": 72.1,
            "y": 55.05,
            "w": 448.7,
            "h": 699.1
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "MemberReference",
          "md": "# MemberReference",
          "bBox": {
            "x": 72.1,
            "y": 284.05,
            "w": 8,
            "h": 318.4
          }
        },
        {
          "type": "table",
          "rows": [
            [
              "18",
              "MemberReference packet",
              "38"
            ]
          ],
          "md": "| 18 | MemberReference packet | 38 |\n| -- | ---------------------- | -- |",
          "isPerfectTable": true,
          "csv": "\"18\",\"MemberReference packet\",\"38\"",
          "bBox": {
            "x": 72.1,
            "y": 76.85,
            "w": 410.2,
            "h": 392.3
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "MemberTypeInfo",
          "md": "# MemberTypeInfo",
          "bBox": {
            "x": 72.1,
            "y": 284.05,
            "w": 258,
            "h": 318.4
          }
        },
        {
          "type": "table",
          "rows": [
            [
              "packet",
              "29",
              "Security",
              "50"
            ]
          ],
          "md": "| packet | 29 | Security | 50 |\n| ------ | -- | -------- | -- |",
          "isPerfectTable": true,
          "csv": "\"packet\",\"29\",\"Security\",\"50\"",
          "bBox": {
            "x": 72.1,
            "y": 98.65,
            "w": 439.8,
            "h": 406
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "MessageEnd",
          "md": "# MessageEnd",
          "bBox": {
            "x": 72.1,
            "y": 109.65,
            "w": 258,
            "h": 183.4
          }
        },
        {
          "type": "table",
          "rows": [
            [
              "18",
              "MessageEnd packet",
              "41"
            ]
          ],
          "md": "| 18 | MessageEnd packet | 41 |\n| -- | ----------------- | -- |",
          "isPerfectTable": true,
          "csv": "\"18\",\"MessageEnd packet\",\"41\"",
          "bBox": {
            "x": 72.1,
            "y": 76.85,
            "w": 410.2,
            "h": 392.3
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "Method invocation records",
          "md": "# Method invocation records",
          "bBox": {
            "x": 72.1,
            "y": 109.65,
            "w": 259,
            "h": 492.8
          }
        },
        {
          "type": "table",
          "rows": [
            [
              "Data types",
              "13",
              "",
              "",
              "",
              ""
            ],
            [
              "Enumerations",
              "(section 2.1.2",
              "18",
              "(section 2.2.1",
              "22)",
              ""
            ],
            [
              "Overview",
              "21",
              "Record definitions",
              "25",
              "Structures",
              "24"
            ]
          ],
          "md": "| Data types   | 13             |                    |                |            |    |\n| ------------ | -------------- | ------------------ | -------------- | ---------- | -- |\n| Enumerations | (section 2.1.2 | 18                 | (section 2.2.1 | 22)        |    |\n| Overview     | 21             | Record definitions | 25             | Structures | 24 |",
          "isPerfectTable": true,
          "csv": "\"Data types\",\"13\",\"\",\"\",\"\",\"\"\n\"Enumerations\",\"(section 2.1.2\",\"18\",\"(section 2.2.1\",\"22)\",\"\"\n\"Overview\",\"21\",\"Record definitions\",\"25\",\"Structures\",\"24\"",
          "bBox": {
            "x": 72.1,
            "y": 55.05,
            "w": 467.9,
            "h": 699.1
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "MethodCall",
          "md": "# MethodCall",
          "bBox": {
            "x": 72.1,
            "y": 339.95,
            "w": 258,
            "h": 41.7
          }
        },
        {
          "type": "table",
          "rows": [
            [
              "18",
              "MethodReturn",
              "18"
            ]
          ],
          "md": "| 18 | MethodReturn | 18 |\n| -- | ------------ | -- |",
          "isPerfectTable": true,
          "csv": "\"18\",\"MethodReturn\",\"18\"",
          "bBox": {
            "x": 72.1,
            "y": 76.85,
            "w": 410.2,
            "h": 392.3
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "MethodSignatureInArray",
          "md": "# MethodSignatureInArray",
          "bBox": {
            "x": 72.1,
            "y": 109.65,
            "w": 259,
            "h": 492.8
          }
        },
        {
          "type": "text",
          "value": "22",
          "md": "22",
          "bBox": {
            "x": 0,
            "y": 0,
            "w": 612,
            "h": 792
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "Normative references",
          "md": "# Normative references",
          "bBox": {
            "x": 72.1,
            "y": 109.65,
            "w": 259,
            "h": 492.8
          }
        },
        {
          "type": "text",
          "value": "10",
          "md": "10",
          "bBox": {
            "x": 0,
            "y": 0,
            "w": 612,
            "h": 792
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "Null",
          "md": "# Null",
          "bBox": {
            "x": 72.1,
            "y": 284.05,
            "w": 259,
            "h": 131.7
          }
        },
        {
          "type": "text",
          "value": "20",
          "md": "20",
          "bBox": {
            "x": 0,
            "y": 0,
            "w": 612,
            "h": 792
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "Object",
          "md": "# Object",
          "bBox": {
            "x": 72.1,
            "y": 339.95,
            "w": 258,
            "h": 41.7
          }
        },
        {
          "type": "table",
          "rows": [
            [
              "19",
              "ObjectArray",
              "19"
            ]
          ],
          "md": "| 19 | ObjectArray | 19 |\n| -- | ----------- | -- |",
          "isPerfectTable": true,
          "csv": "\"19\",\"ObjectArray\",\"19\"",
          "bBox": {
            "x": 72.1,
            "y": 219.95,
            "w": 433.45,
            "h": 534.2
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "ObjectNull",
          "md": "# ObjectNull",
          "bBox": {
            "x": 72.1,
            "y": 284.05,
            "w": 259,
            "h": 131.7
          }
        },
        {
          "type": "table",
          "rows": [
            [
              "18",
              "ObjectNull packet",
              "38"
            ]
          ],
          "md": "| 18 | ObjectNull packet | 38 |\n| -- | ----------------- | -- |",
          "isPerfectTable": true,
          "csv": "\"18\",\"ObjectNull packet\",\"38\"",
          "bBox": {
            "x": 72.1,
            "y": 76.85,
            "w": 410.2,
            "h": 392.3
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "ObjectNullMultiple",
          "md": "# ObjectNullMultiple",
          "bBox": {
            "x": 72.1,
            "y": 284.05,
            "w": 259,
            "h": 240.7
          }
        },
        {
          "type": "table",
          "rows": [
            [
              "18",
              "ObjectNullMultiple packet",
              "39"
            ]
          ],
          "md": "| 18 | ObjectNullMultiple packet | 39 |\n| -- | ------------------------- | -- |",
          "isPerfectTable": true,
          "csv": "\"18\",\"ObjectNullMultiple packet\",\"39\"",
          "bBox": {
            "x": 72.1,
            "y": 76.85,
            "w": 410.2,
            "h": 403.2
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "Other records",
          "md": "# Other records",
          "bBox": {
            "x": 72.1,
            "y": 109.65,
            "w": 258,
            "h": 492.8
          }
        },
        {
          "type": "table",
          "rows": [
            [
              "(section 2.1.1",
              "13",
              "(section 2.6",
              "40)"
            ]
          ],
          "md": "| (section 2.1.1 | 13 | (section 2.6 | 40) |\n| -------------- | -- | ------------ | --- |",
          "isPerfectTable": true,
          "csv": "\"(section 2.1.1\",\"13\",\"(section 2.6\",\"40)\"",
          "bBox": {
            "x": 72.1,
            "y": 65.95,
            "w": 434.2,
            "h": 688.2
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "Overview (synopsis)",
          "md": "# Overview (synopsis)",
          "bBox": {
            "x": 72.1,
            "y": 109.65,
            "w": 259,
            "h": 492.8
          }
        },
        {
          "type": "text",
          "value": "11",
          "md": "11",
          "bBox": {
            "x": 0,
            "y": 0,
            "w": 612,
            "h": 792
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "Primitive",
          "md": "# Primitive",
          "bBox": {
            "x": 72.1,
            "y": 339.95,
            "w": 259,
            "h": 262.5
          }
        },
        {
          "type": "table",
          "rows": [
            [
              "19",
              "PrimitiveArray",
              "19"
            ]
          ],
          "md": "| 19 | PrimitiveArray | 19 |\n| -- | -------------- | -- |",
          "isPerfectTable": true,
          "csv": "\"19\",\"PrimitiveArray\",\"19\"",
          "bBox": {
            "x": 72.1,
            "y": 219.95,
            "w": 433.45,
            "h": 534.2
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "Product behavior",
          "md": "# Product behavior",
          "bBox": {
            "x": 72.1,
            "y": 339.95,
            "w": 259,
            "h": 262.5
          }
        },
        {
          "type": "text",
          "value": "51",
          "md": "51",
          "bBox": {
            "x": 0,
            "y": 0,
            "w": 612,
            "h": 792
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "PropertiesInArray",
          "md": "# PropertiesInArray",
          "bBox": {
            "x": 72.1,
            "y": 109.65,
            "w": 258,
            "h": 492.8
          }
        },
        {
          "type": "text",
          "value": "22",
          "md": "22",
          "bBox": {
            "x": 0,
            "y": 0,
            "w": 612,
            "h": 792
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "Rectangular",
          "md": "# Rectangular",
          "bBox": {
            "x": 72.1,
            "y": 284.05,
            "w": 259,
            "h": 318.4
          }
        },
        {
          "type": "table",
          "rows": [
            [
              "33",
              "RectangularOffset",
              "33"
            ]
          ],
          "md": "| 33 | RectangularOffset | 33 |\n| -- | ----------------- | -- |",
          "isPerfectTable": true,
          "csv": "\"33\",\"RectangularOffset\",\"33\"",
          "bBox": {
            "x": 72.1,
            "y": 187.25,
            "w": 434.2,
            "h": 448.2
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "References",
          "md": "# References",
          "bBox": {
            "x": 72.1,
            "y": 109.65,
            "w": 258,
            "h": 492.8
          }
        },
        {
          "type": "table",
          "rows": [
            [
              "10",
              "Informative",
              "10",
              "Normative",
              "10"
            ]
          ],
          "md": "| 10 | Informative | 10 | Normative | 10 |\n| -- | ----------- | -- | --------- | -- |",
          "isPerfectTable": true,
          "csv": "\"10\",\"Informative\",\"10\",\"Normative\",\"10\"",
          "bBox": {
            "x": 72.1,
            "y": 339.85,
            "w": 99.6,
            "h": 328.3
          }
        },
        {
          "type": "heading",
          "lvl": 1,
          "value": "Relationship to other protocols",
          "md": "# Relationship to other protocols",
          "bBox": {
            "x": 72.1,
            "y": 109.65,
            "w": 258,
            "h": 492.8
          }
        },
        {
          "type": "text",
          "value": "11\n\n55 / 55",
          "md": "11\n\n55 / 55",
          "bBox": {
            "x": 512.1,
            "y": 696.55,
            "w": 27.9,
            "h": 8
          }
        }
      ],
      "status": "OK",
      "originalOrientationAngle": 0,
      "links": [
      ],
      "width": 612,
      "height": 792,
      "triggeredAutoMode": false,
      "parsingMode": "accurate",
      "structuredData": null,
      "noStructuredContent": false,
      "noTextContent": false,
      "pageHeaderMarkdown": "[MS-NRBF] - v20190313",
      "pageFooterMarkdown": "55 / 55",
      "confidence": 0.55
    }
  ],
  "job_metadata": {
    "credits_used": 0,
    "job_credits_usage": 0,
    "job_pages": 55,
    "job_auto_mode_triggered_pages": 0,
    "job_is_cache_hit": false
  }
}
